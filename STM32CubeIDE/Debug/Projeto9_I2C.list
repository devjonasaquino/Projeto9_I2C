
Projeto9_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800b57c  0800b57c  0000c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b650  0800b650  0000c650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b658  0800b658  0000c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b65c  0800b65c  0000c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b660  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800b6c4  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b724  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  24000124  0800b784  0000d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400096c  0800b784  0000d96c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d248  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003162  00000000  00000000  0002a39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f20  00000000  00000000  0002e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385dc  00000000  00000000  0002f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da36  00000000  00000000  00067d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001627f3  00000000  00000000  00085792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e7f85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005864  00000000  00000000  001e7fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001ed82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b564 	.word	0x0800b564

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800b564 	.word	0x0800b564

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 ffaa 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f94c 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fad4 	bl	8000c38 <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f9c8 	bl	8000a24 <MX_ETH_Init>
  MX_I2C1_Init();
 8000694:	f000 fa12 	bl	8000abc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fa50 	bl	8000b3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069c:	f000 fa9a 	bl	8000bd4 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006a0:	2209      	movs	r2, #9
 80006a2:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <main+0x34>)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <main+0x38>)
 80006a6:	f007 fa9d 	bl	8007be4 <HAL_UART_Receive_IT>

  	  ExecuteProgram();
 80006aa:	f000 f807 	bl	80006bc <ExecuteProgram>
  {
 80006ae:	bf00      	nop
 80006b0:	e7f6      	b.n	80006a0 <main+0x20>
 80006b2:	bf00      	nop
 80006b4:	24000808 	.word	0x24000808
 80006b8:	2400027c 	.word	0x2400027c

080006bc <ExecuteProgram>:
  }
  /* USER CODE END 3 */
}

void ExecuteProgram()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if(execute_flag == '1'){
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ExecuteProgram+0x40>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b31      	cmp	r3, #49	@ 0x31
 80006c6:	d102      	bne.n	80006ce <ExecuteProgram+0x12>
		Read_LDR();
 80006c8:	f000 f81a 	bl	8000700 <Read_LDR>
	}
	else if(execute_flag == '4'){
		Write_DAC();
	}

}
 80006cc:	e013      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '2'){
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <ExecuteProgram+0x40>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b32      	cmp	r3, #50	@ 0x32
 80006d4:	d102      	bne.n	80006dc <ExecuteProgram+0x20>
		Read_Temp();
 80006d6:	f000 f857 	bl	8000788 <Read_Temp>
}
 80006da:	e00c      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '3'){
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <ExecuteProgram+0x40>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b33      	cmp	r3, #51	@ 0x33
 80006e2:	d102      	bne.n	80006ea <ExecuteProgram+0x2e>
		Read_Pot();
 80006e4:	f000 f894 	bl	8000810 <Read_Pot>
}
 80006e8:	e005      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '4'){
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <ExecuteProgram+0x40>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b34      	cmp	r3, #52	@ 0x34
 80006f0:	d101      	bne.n	80006f6 <ExecuteProgram+0x3a>
		Write_DAC();
 80006f2:	f000 f8d1 	bl	8000898 <Write_DAC>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000001 	.word	0x24000001

08000700 <Read_LDR>:

void Read_LDR(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	 // Read analog data from A0 (channel 0) of the PCF8591
		  uint8_t LDR = PCF8591_ReadAnalog(0);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fb72 	bl	8000df0 <PCF8591_ReadAnalog>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 fff5 	bl	8001700 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN0: ");
 8000716:	1d38      	adds	r0, r7, #4
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <Read_LDR+0x74>)
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <Read_LDR+0x78>)
 800071c:	2108      	movs	r1, #8
 800071e:	f00a fa5b 	bl	800abd8 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fddb 	bl	80002e0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4812      	ldr	r0, [pc, #72]	@ (800077c <Read_LDR+0x7c>)
 8000734:	f007 f9c2 	bl	8007abc <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 ffe1 	bl	8001700 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", LDR);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	1d38      	adds	r0, r7, #4
 8000742:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <Read_LDR+0x80>)
 8000744:	2104      	movs	r1, #4
 8000746:	f00a fa47 	bl	800abd8 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fdc7 	bl	80002e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4808      	ldr	r0, [pc, #32]	@ (800077c <Read_LDR+0x7c>)
 800075c:	f007 f9ae 	bl	8007abc <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f000 ffcd 	bl	8001700 <HAL_Delay>
		  execute_flag = '0';
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <Read_LDR+0x84>)
 8000768:	2230      	movs	r2, #48	@ 0x30
 800076a:	701a      	strb	r2, [r3, #0]


}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800b57c 	.word	0x0800b57c
 8000778:	0800b584 	.word	0x0800b584
 800077c:	2400027c 	.word	0x2400027c
 8000780:	0800b58c 	.word	0x0800b58c
 8000784:	24000001 	.word	0x24000001

08000788 <Read_Temp>:

void Read_Temp(){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
	 // Read analog data from A1 (channel 1) of the PCF8591
		  uint8_t Temp = PCF8591_ReadAnalog(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 fb2e 	bl	8000df0 <PCF8591_ReadAnalog>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f000 ffb1 	bl	8001700 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN1: ");
 800079e:	1d38      	adds	r0, r7, #4
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <Read_Temp+0x74>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <Read_Temp+0x78>)
 80007a4:	2108      	movs	r1, #8
 80007a6:	f00a fa17 	bl	800abd8 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd97 	bl	80002e0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Read_Temp+0x7c>)
 80007bc:	f007 f97e 	bl	8007abc <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f000 ff9d 	bl	8001700 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Temp);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	1d38      	adds	r0, r7, #4
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <Read_Temp+0x80>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	f00a fa03 	bl	800abd8 <sniprintf>
  		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd83 	bl	80002e0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4808      	ldr	r0, [pc, #32]	@ (8000804 <Read_Temp+0x7c>)
 80007e4:	f007 f96a 	bl	8007abc <HAL_UART_Transmit_IT>
  		  HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f000 ff89 	bl	8001700 <HAL_Delay>
  		  execute_flag = '0';
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <Read_Temp+0x84>)
 80007f0:	2230      	movs	r2, #48	@ 0x30
 80007f2:	701a      	strb	r2, [r3, #0]

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800b594 	.word	0x0800b594
 8000800:	0800b584 	.word	0x0800b584
 8000804:	2400027c 	.word	0x2400027c
 8000808:	0800b58c 	.word	0x0800b58c
 800080c:	24000001 	.word	0x24000001

08000810 <Read_Pot>:

void Read_Pot(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	 uint8_t Pot = PCF8591_ReadAnalog(3);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 faea 	bl	8000df0 <PCF8591_ReadAnalog>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
		  // Process the analog_value or send it over UART/Display it
		  HAL_Delay(100); // Wait for 1 second before next reading
 8000820:	2064      	movs	r0, #100	@ 0x64
 8000822:	f000 ff6d 	bl	8001700 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN3: ");
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <Read_Pot+0x74>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <Read_Pot+0x78>)
 800082c:	2108      	movs	r1, #8
 800082e:	f00a f9d3 	bl	800abd8 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd53 	bl	80002e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <Read_Pot+0x7c>)
 8000844:	f007 f93a 	bl	8007abc <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f000 ff59 	bl	8001700 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Pot);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	1d38      	adds	r0, r7, #4
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <Read_Pot+0x80>)
 8000854:	2104      	movs	r1, #4
 8000856:	f00a f9bf 	bl	800abd8 <sniprintf>
   		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <Read_Pot+0x7c>)
 800086c:	f007 f926 	bl	8007abc <HAL_UART_Transmit_IT>
     	  HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f000 ff45 	bl	8001700 <HAL_Delay>
   		  execute_flag = '0';
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <Read_Pot+0x84>)
 8000878:	2230      	movs	r2, #48	@ 0x30
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0800b59c 	.word	0x0800b59c
 8000888:	0800b584 	.word	0x0800b584
 800088c:	2400027c 	.word	0x2400027c
 8000890:	0800b58c 	.word	0x0800b58c
 8000894:	24000001 	.word	0x24000001

08000898 <Write_DAC>:

void Write_DAC(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af02      	add	r7, sp, #8

	{       // Teste do DAC 2 - Jonas
	        // Configura o valor do DAC no PCF8591
	        uint8_t data[2] = {0x40, dac_value};  // 0x40 seleciona o DAC, seguido do valor do DAC
 800089e:	2340      	movs	r3, #64	@ 0x40
 80008a0:	713b      	strb	r3, [r7, #4]
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <Write_DAC+0x78>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	717b      	strb	r3, [r7, #5]
	        if (HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80008a8:	1d3a      	adds	r2, r7, #4
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2302      	movs	r3, #2
 80008b2:	2190      	movs	r1, #144	@ 0x90
 80008b4:	4817      	ldr	r0, [pc, #92]	@ (8000914 <Write_DAC+0x7c>)
 80008b6:	f002 fc83 	bl	80031c0 <HAL_I2C_Master_Transmit>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <Write_DAC+0x2c>
	            Error_Handler();
 80008c0:	f000 fb00 	bl	8000ec4 <Error_Handler>
	        }

	        // Exibe o valor escrito no DAC no terminal via UART
	        snprintf(uart_buffer, sizeof(uart_buffer), "DAC Value: %d\r\n", dac_value);
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <Write_DAC+0x78>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <Write_DAC+0x80>)
 80008ca:	2114      	movs	r1, #20
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <Write_DAC+0x84>)
 80008ce:	f00a f983 	bl	800abd8 <sniprintf>
	        HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <Write_DAC+0x84>)
 80008d4:	f7ff fd04 	bl	80002e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	490e      	ldr	r1, [pc, #56]	@ (800091c <Write_DAC+0x84>)
 80008e2:	480f      	ldr	r0, [pc, #60]	@ (8000920 <Write_DAC+0x88>)
 80008e4:	f007 f85c 	bl	80079a0 <HAL_UART_Transmit>

	        // Aumenta o valor do DAC com limite de 0 a 255
	        dac_value = (dac_value + 10) % 256;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <Write_DAC+0x78>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	330a      	adds	r3, #10
 80008ee:	425a      	negs	r2, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	bf58      	it	pl
 80008f6:	4253      	negpl	r3, r2
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <Write_DAC+0x78>)
 80008fc:	701a      	strb	r2, [r3, #0]

	        HAL_Delay(1000); // Intervalo de 1 segundo para cada envio
 80008fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000902:	f000 fefd 	bl	8001700 <HAL_Delay>
	    }
	}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000000 	.word	0x24000000
 8000914:	24000228 	.word	0x24000228
 8000918:	0800b5a4 	.word	0x0800b5a4
 800091c:	240007f4 	.word	0x240007f4
 8000920:	2400027c 	.word	0x2400027c

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f00a f984 	bl	800ac40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00a f97e 	bl	800ac40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000944:	2002      	movs	r0, #2
 8000946:	f004 f97f 	bl	8004c48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <SystemClock_Config+0xf8>)
 8000950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000952:	4a32      	ldr	r2, [pc, #200]	@ (8000a1c <SystemClock_Config+0xf8>)
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800095a:	4b30      	ldr	r3, [pc, #192]	@ (8000a1c <SystemClock_Config+0xf8>)
 800095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <SystemClock_Config+0xfc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800096c:	4a2c      	ldr	r2, [pc, #176]	@ (8000a20 <SystemClock_Config+0xfc>)
 800096e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <SystemClock_Config+0xfc>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <SystemClock_Config+0xfc>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000990:	2303      	movs	r3, #3
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000994:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800099a:	2301      	movs	r3, #1
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	2302      	movs	r3, #2
 80009a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009ae:	2318      	movs	r3, #24
 80009b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009be:	230c      	movs	r3, #12
 80009c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f984 	bl	8004cdc <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009da:	f000 fa73 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	233f      	movs	r3, #63	@ 0x3f
 80009e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fdc4 	bl	8005590 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a0e:	f000 fa59 	bl	8000ec4 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	@ 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58000400 	.word	0x58000400
 8000a20:	58024800 	.word	0x58024800

08000a24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa8 <MX_ETH_Init+0x84>)
 8000a2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a36:	2280      	movs	r2, #128	@ 0x80
 8000a38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a3c:	22e1      	movs	r2, #225	@ 0xe1
 8000a3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a54:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_ETH_Init+0x88>)
 8000a56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a60:	4a13      	ldr	r2, [pc, #76]	@ (8000ab0 <MX_ETH_Init+0x8c>)
 8000a62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_ETH_Init+0x90>)
 8000a68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a6c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_ETH_Init+0x80>)
 8000a74:	f001 fd0a 	bl	800248c <HAL_ETH_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a7e:	f000 fa21 	bl	8000ec4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a82:	2238      	movs	r2, #56	@ 0x38
 8000a84:	2100      	movs	r1, #0
 8000a86:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a88:	f00a f8da 	bl	800ac40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a8e:	2221      	movs	r2, #33	@ 0x21
 8000a90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_ETH_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000178 	.word	0x24000178
 8000aa8:	40028000 	.word	0x40028000
 8000aac:	24000814 	.word	0x24000814
 8000ab0:	240000c4 	.word	0x240000c4
 8000ab4:	24000064 	.word	0x24000064
 8000ab8:	24000140 	.word	0x24000140

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f002 fac6 	bl	8003088 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 f9df 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f003 fed5 	bl	80048b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f9d6 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f003 ff17 	bl	800494e <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 f9cd 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000228 	.word	0x24000228
 8000b34:	40005400 	.word	0x40005400
 8000b38:	10707dbc 	.word	0x10707dbc

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <MX_USART3_UART_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b84:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b86:	f006 febb 	bl	8007900 <HAL_UART_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b90:	f000 f998 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b94:	2100      	movs	r1, #0
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000b98:	f009 fc4b 	bl	800a432 <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 f98f 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000baa:	f009 fc80 	bl	800a4ae <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 f986 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_USART3_UART_Init+0x90>)
 8000bba:	f009 fc01 	bl	800a3c0 <HAL_UARTEx_DisableFifoMode>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f97e 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2400027c 	.word	0x2400027c
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bda:	4a16      	ldr	r2, [pc, #88]	@ (8000c34 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be0:	2209      	movs	r2, #9
 8000be2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c1c:	f003 fee3 	bl	80049e6 <HAL_PCD_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c26:	f000 f94d 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000310 	.word	0x24000310
 8000c34:	40080000 	.word	0x40080000

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b62      	ldr	r3, [pc, #392]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c54:	4a60      	ldr	r2, [pc, #384]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c72:	4a59      	ldr	r2, [pc, #356]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7c:	4b56      	ldr	r3, [pc, #344]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b53      	ldr	r3, [pc, #332]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	4a51      	ldr	r2, [pc, #324]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b44      	ldr	r3, [pc, #272]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd6:	4b40      	ldr	r3, [pc, #256]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	4a3b      	ldr	r2, [pc, #236]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a33      	ldr	r2, [pc, #204]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d26:	482d      	ldr	r0, [pc, #180]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000d28:	f002 f994 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d32:	482b      	ldr	r0, [pc, #172]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d34:	f002 f98e 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4829      	ldr	r0, [pc, #164]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000d3e:	f002 f989 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4824      	ldr	r0, [pc, #144]	@ (8000de8 <MX_GPIO_Init+0x1b0>)
 8000d58:	f001 ffcc 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d5c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4819      	ldr	r0, [pc, #100]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000d76:	f001 ffbd 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d94:	f001 ffae 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	@ (8000dec <MX_GPIO_Init+0x1b4>)
 8000dae:	f001 ffa1 	bl	8002cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000dca:	f001 ff93 	bl	8002cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	@ 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	58020c00 	.word	0x58020c00
 8000de4:	58021000 	.word	0x58021000
 8000de8:	58020800 	.word	0x58020800
 8000dec:	58021800 	.word	0x58021800

08000df0 <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */

//Função de leitura no modulo sensor
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000e0e:	f107 020f 	add.w	r2, r7, #15
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	2190      	movs	r1, #144	@ 0x90
 8000e1c:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <PCF8591_ReadAnalog+0x50>)
 8000e1e:	f002 f9cf 	bl	80031c0 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2190      	movs	r1, #144	@ 0x90
 8000e30:	4803      	ldr	r0, [pc, #12]	@ (8000e40 <PCF8591_ReadAnalog+0x50>)
 8000e32:	f002 fadd 	bl	80033f0 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	24000228 	.word	0x24000228

08000e44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  if (strncmp(rx_buffer, "Read_AIN0", 9) == 0) {
 8000e4c:	2209      	movs	r2, #9
 8000e4e:	4917      	ldr	r1, [pc, #92]	@ (8000eac <HAL_UART_RxCpltCallback+0x68>)
 8000e50:	4817      	ldr	r0, [pc, #92]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e52:	f009 fefd 	bl	800ac50 <strncmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <HAL_UART_RxCpltCallback+0x1e>
	  execute_flag = '1';
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000e5e:	2231      	movs	r2, #49	@ 0x31
 8000e60:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN1", 9) == 0) {
 8000e62:	2209      	movs	r2, #9
 8000e64:	4914      	ldr	r1, [pc, #80]	@ (8000eb8 <HAL_UART_RxCpltCallback+0x74>)
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e68:	f009 fef2 	bl	800ac50 <strncmp>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x34>
	  execute_flag = '2';
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000e74:	2232      	movs	r2, #50	@ 0x32
 8000e76:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN3", 9) == 0) {
 8000e78:	2209      	movs	r2, #9
 8000e7a:	4910      	ldr	r1, [pc, #64]	@ (8000ebc <HAL_UART_RxCpltCallback+0x78>)
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e7e:	f009 fee7 	bl	800ac50 <strncmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <HAL_UART_RxCpltCallback+0x4a>
	  execute_flag = '3';
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000e8a:	2233      	movs	r2, #51	@ 0x33
 8000e8c:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Set_DAC_255", 11) == 0) {
 8000e8e:	220b      	movs	r2, #11
 8000e90:	490b      	ldr	r1, [pc, #44]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x7c>)
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <HAL_UART_RxCpltCallback+0x6c>)
 8000e94:	f009 fedc 	bl	800ac50 <strncmp>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <HAL_UART_RxCpltCallback+0x60>
	  execute_flag = '4';
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_UART_RxCpltCallback+0x70>)
 8000ea0:	2234      	movs	r2, #52	@ 0x34
 8000ea2:	701a      	strb	r2, [r3, #0]
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0800b5b4 	.word	0x0800b5b4
 8000eb0:	24000808 	.word	0x24000808
 8000eb4:	24000001 	.word	0x24000001
 8000eb8:	0800b5c0 	.word	0x0800b5c0
 8000ebc:	0800b5cc 	.word	0x0800b5cc
 8000ec0:	0800b5d8 	.word	0x0800b5d8

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a59      	ldr	r2, [pc, #356]	@ (8001088 <HAL_ETH_MspInit+0x184>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 80ab 	bne.w	800107e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f28:	4b58      	ldr	r3, [pc, #352]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f2e:	4a57      	ldr	r2, [pc, #348]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f38:	4b54      	ldr	r3, [pc, #336]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f46:	4b51      	ldr	r3, [pc, #324]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f64:	4b49      	ldr	r3, [pc, #292]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f6a:	4a48      	ldr	r2, [pc, #288]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f74:	4b45      	ldr	r3, [pc, #276]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b42      	ldr	r3, [pc, #264]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a40      	ldr	r2, [pc, #256]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b36      	ldr	r3, [pc, #216]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2332      	movs	r3, #50	@ 0x32
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	@ (8001090 <HAL_ETH_MspInit+0x18c>)
 8001016:	f001 fe6d 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800101a:	2386      	movs	r3, #134	@ 0x86
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102a:	230b      	movs	r3, #11
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <HAL_ETH_MspInit+0x190>)
 8001036:	f001 fe5d 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800103a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104c:	230b      	movs	r3, #11
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4810      	ldr	r0, [pc, #64]	@ (8001098 <HAL_ETH_MspInit+0x194>)
 8001058:	f001 fe4c 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800105c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106e:	230b      	movs	r3, #11
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	@ (800109c <HAL_ETH_MspInit+0x198>)
 800107a:	f001 fe3b 	bl	8002cf4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	@ 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40028000 	.word	0x40028000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020000 	.word	0x58020000
 8001098:	58020400 	.word	0x58020400
 800109c:	58021800 	.word	0x58021800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	@ 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	@ 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 fdbd 	bl	800ac40 <memset>
  if(hi2c->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <HAL_I2C_MspInit+0xe8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d156      	bne.n	800117e <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	f04f 0208 	mov.w	r2, #8
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 fdde 	bl	8005ca8 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f7ff fee7 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <HAL_I2C_MspInit+0xec>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a23      	ldr	r2, [pc, #140]	@ (800118c <HAL_I2C_MspInit+0xec>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001122:	2301      	movs	r3, #1
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001138:	4619      	mov	r1, r3
 800113a:	4815      	ldr	r0, [pc, #84]	@ (8001190 <HAL_I2C_MspInit+0xf0>)
 800113c:	f001 fdda 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_I2C_MspInit+0xec>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201f      	movs	r0, #31
 8001164:	f000 fbeb 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001168:	201f      	movs	r0, #31
 800116a:	f000 fc02 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2020      	movs	r0, #32
 8001174:	f000 fbe3 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001178:	2020      	movs	r0, #32
 800117a:	f000 fbfa 	bl	8001972 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800117e:	bf00      	nop
 8001180:	37e8      	adds	r7, #232	@ 0xe8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40005400 	.word	0x40005400
 800118c:	58024400 	.word	0x58024400
 8001190:	58020400 	.word	0x58020400

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ba      	sub	sp, #232	@ 0xe8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	22c0      	movs	r2, #192	@ 0xc0
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f009 fd43 	bl	800ac40 <memset>
  if(huart->Instance==USART3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a2b      	ldr	r2, [pc, #172]	@ (800126c <HAL_UART_MspInit+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d14e      	bne.n	8001262 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c4:	f04f 0202 	mov.w	r2, #2
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fd64 	bl	8005ca8 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011e6:	f7ff fe6d 	bl	8000ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_UART_MspInit+0xdc>)
 80011ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001270 <HAL_UART_MspInit+0xdc>)
 80011f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <HAL_UART_MspInit+0xdc>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_UART_MspInit+0xdc>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	4a18      	ldr	r2, [pc, #96]	@ (8001270 <HAL_UART_MspInit+0xdc>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_UART_MspInit+0xdc>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001226:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001240:	2307      	movs	r3, #7
 8001242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800124a:	4619      	mov	r1, r3
 800124c:	4809      	ldr	r0, [pc, #36]	@ (8001274 <HAL_UART_MspInit+0xe0>)
 800124e:	f001 fd51 	bl	8002cf4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2027      	movs	r0, #39	@ 0x27
 8001258:	f000 fb71 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800125c:	2027      	movs	r0, #39	@ 0x27
 800125e:	f000 fb88 	bl	8001972 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001262:	bf00      	nop
 8001264:	37e8      	adds	r7, #232	@ 0xe8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004800 	.word	0x40004800
 8001270:	58024400 	.word	0x58024400
 8001274:	58020c00 	.word	0x58020c00

08001278 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ba      	sub	sp, #232	@ 0xe8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	22c0      	movs	r2, #192	@ 0xc0
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f009 fcd1 	bl	800ac40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a30      	ldr	r2, [pc, #192]	@ (8001364 <HAL_PCD_MspInit+0xec>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d159      	bne.n	800135c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fcf1 	bl	8005ca8 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80012cc:	f7ff fdfa 	bl	8000ec4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012d0:	f003 fcf4 	bl	8004cbc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_PCD_MspInit+0xf0>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a23      	ldr	r2, [pc, #140]	@ (8001368 <HAL_PCD_MspInit+0xf0>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_PCD_MspInit+0xf0>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80012f2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80012f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800130c:	230a      	movs	r3, #10
 800130e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001316:	4619      	mov	r1, r3
 8001318:	4814      	ldr	r0, [pc, #80]	@ (800136c <HAL_PCD_MspInit+0xf4>)
 800131a:	f001 fceb 	bl	8002cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800131e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <HAL_PCD_MspInit+0xf4>)
 800133a:	f001 fcdb 	bl	8002cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_PCD_MspInit+0xf0>)
 8001340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001344:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_PCD_MspInit+0xf0>)
 8001346:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800134a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_PCD_MspInit+0xf0>)
 8001350:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800135c:	bf00      	nop
 800135e:	37e8      	adds	r7, #232	@ 0xe8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40080000 	.word	0x40080000
 8001368:	58024400 	.word	0x58024400
 800136c:	58020000 	.word	0x58020000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f97b 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <I2C1_EV_IRQHandler+0x10>)
 80013d6:	f002 f901 	bl	80035dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	24000228 	.word	0x24000228

080013e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <I2C1_ER_IRQHandler+0x10>)
 80013ea:	f002 f911 	bl	8003610 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000228 	.word	0x24000228

080013f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <USART3_IRQHandler+0x10>)
 80013fe:	f006 fc3d 	bl	8007c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2400027c 	.word	0x2400027c

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f009 fc1a 	bl	800ac74 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	24080000 	.word	0x24080000
 800146c:	00000400 	.word	0x00000400
 8001470:	2400081c 	.word	0x2400081c
 8001474:	24000970 	.word	0x24000970

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800147c:	f000 f826 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	@ (80014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f009 fbeb 	bl	800ac80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff f8e9 	bl	8000680 <main>
  bx  lr
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80014bc:	0800b660 	.word	0x0800b660
  ldr r2, =_sbss
 80014c0:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80014c4:	2400096c 	.word	0x2400096c

080014c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC3_IRQHandler>
	...

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d0:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <SystemInit+0xe4>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a36      	ldr	r2, [pc, #216]	@ (80015b0 <SystemInit+0xe4>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e0:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <SystemInit+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d807      	bhi.n	80014fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <SystemInit+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 030f 	bic.w	r3, r3, #15
 80014f4:	4a2f      	ldr	r2, [pc, #188]	@ (80015b4 <SystemInit+0xe8>)
 80014f6:	f043 0307 	orr.w	r3, r3, #7
 80014fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <SystemInit+0xec>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <SystemInit+0xec>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <SystemInit+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <SystemInit+0xec>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4929      	ldr	r1, [pc, #164]	@ (80015b8 <SystemInit+0xec>)
 8001514:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <SystemInit+0xf0>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151a:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <SystemInit+0xe8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <SystemInit+0xe8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 030f 	bic.w	r3, r3, #15
 800152e:	4a21      	ldr	r2, [pc, #132]	@ (80015b4 <SystemInit+0xe8>)
 8001530:	f043 0307 	orr.w	r3, r3, #7
 8001534:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <SystemInit+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <SystemInit+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <SystemInit+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <SystemInit+0xec>)
 800154a:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <SystemInit+0xf4>)
 800154c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <SystemInit+0xec>)
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <SystemInit+0xf8>)
 8001552:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <SystemInit+0xec>)
 8001556:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <SystemInit+0xfc>)
 8001558:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <SystemInit+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <SystemInit+0xec>)
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <SystemInit+0xfc>)
 8001564:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <SystemInit+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <SystemInit+0xec>)
 800156e:	4a16      	ldr	r2, [pc, #88]	@ (80015c8 <SystemInit+0xfc>)
 8001570:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <SystemInit+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <SystemInit+0xec>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0e      	ldr	r2, [pc, #56]	@ (80015b8 <SystemInit+0xec>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <SystemInit+0xec>)
 8001586:	2200      	movs	r2, #0
 8001588:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <SystemInit+0x100>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <SystemInit+0x104>)
 8001590:	4013      	ands	r3, r2
 8001592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001596:	d202      	bcs.n	800159e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <SystemInit+0x108>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <SystemInit+0x10c>)
 80015a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	52002000 	.word	0x52002000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c0:	02020200 	.word	0x02020200
 80015c4:	01ff0000 	.word	0x01ff0000
 80015c8:	01010280 	.word	0x01010280
 80015cc:	5c001000 	.word	0x5c001000
 80015d0:	ffff0000 	.word	0xffff0000
 80015d4:	51008108 	.word	0x51008108
 80015d8:	52004000 	.word	0x52004000

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f000 f9a0 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015e8:	f004 f988 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_Init+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4913      	ldr	r1, [pc, #76]	@ (8001648 <HAL_Init+0x6c>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_Init+0x68>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_Init+0x6c>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_Init+0x70>)
 800161e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_Init+0x74>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f814 	bl	8001654 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e002      	b.n	800163c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001636:	f7ff fc4b 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58024400 	.word	0x58024400
 8001648:	0800b5e4 	.word	0x0800b5e4
 800164c:	24000008 	.word	0x24000008
 8001650:	24000004 	.word	0x24000004

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_InitTick+0x60>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e021      	b.n	80016ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_InitTick+0x64>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f985 	bl	800198e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f94f 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_InitTick+0x68>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24000010 	.word	0x24000010
 80016b8:	24000004 	.word	0x24000004
 80016bc:	2400000c 	.word	0x2400000c

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	24000010 	.word	0x24000010
 80016e4:	24000820 	.word	0x24000820

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	24000820 	.word	0x24000820

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24000010 	.word	0x24000010

08001748 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetREVID+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0c1b      	lsrs	r3, r3, #16
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	5c001000 	.word	0x5c001000

08001760 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001770:	4904      	ldr	r1, [pc, #16]	@ (8001784 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	58000400 	.word	0x58000400

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	05fa0000 	.word	0x05fa0000

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	@ (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	@ (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	@ (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff40 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff33 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa4 	bl	80018e4 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff fe9a 	bl	80016e8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e2dc      	b.n	8001f7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d008      	beq.n	80019de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e2cd      	b.n	8001f7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a76      	ldr	r2, [pc, #472]	@ (8001bbc <HAL_DMA_Abort+0x214>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d04a      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a74      	ldr	r2, [pc, #464]	@ (8001bc0 <HAL_DMA_Abort+0x218>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d045      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a73      	ldr	r2, [pc, #460]	@ (8001bc4 <HAL_DMA_Abort+0x21c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d040      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a71      	ldr	r2, [pc, #452]	@ (8001bc8 <HAL_DMA_Abort+0x220>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d03b      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a70      	ldr	r2, [pc, #448]	@ (8001bcc <HAL_DMA_Abort+0x224>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d036      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a6e      	ldr	r2, [pc, #440]	@ (8001bd0 <HAL_DMA_Abort+0x228>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d031      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd4 <HAL_DMA_Abort+0x22c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d02c      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd8 <HAL_DMA_Abort+0x230>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d027      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6a      	ldr	r2, [pc, #424]	@ (8001bdc <HAL_DMA_Abort+0x234>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a68      	ldr	r2, [pc, #416]	@ (8001be0 <HAL_DMA_Abort+0x238>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01d      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a67      	ldr	r2, [pc, #412]	@ (8001be4 <HAL_DMA_Abort+0x23c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d018      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a65      	ldr	r2, [pc, #404]	@ (8001be8 <HAL_DMA_Abort+0x240>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a64      	ldr	r2, [pc, #400]	@ (8001bec <HAL_DMA_Abort+0x244>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00e      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a62      	ldr	r2, [pc, #392]	@ (8001bf0 <HAL_DMA_Abort+0x248>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a61      	ldr	r2, [pc, #388]	@ (8001bf4 <HAL_DMA_Abort+0x24c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d004      	beq.n	8001a7e <HAL_DMA_Abort+0xd6>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf8 <HAL_DMA_Abort+0x250>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Abort+0xda>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_Abort+0xdc>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 021e 	bic.w	r2, r2, #30
 8001a96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aa6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e00a      	b.n	8001ac6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020e 	bic.w	r2, r2, #14
 8001abe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a3c      	ldr	r2, [pc, #240]	@ (8001bbc <HAL_DMA_Abort+0x214>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d072      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc0 <HAL_DMA_Abort+0x218>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d06d      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a39      	ldr	r2, [pc, #228]	@ (8001bc4 <HAL_DMA_Abort+0x21c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d068      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a37      	ldr	r2, [pc, #220]	@ (8001bc8 <HAL_DMA_Abort+0x220>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d063      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a36      	ldr	r2, [pc, #216]	@ (8001bcc <HAL_DMA_Abort+0x224>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d05e      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a34      	ldr	r2, [pc, #208]	@ (8001bd0 <HAL_DMA_Abort+0x228>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d059      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a33      	ldr	r2, [pc, #204]	@ (8001bd4 <HAL_DMA_Abort+0x22c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d054      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a31      	ldr	r2, [pc, #196]	@ (8001bd8 <HAL_DMA_Abort+0x230>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04f      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a30      	ldr	r2, [pc, #192]	@ (8001bdc <HAL_DMA_Abort+0x234>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04a      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2e      	ldr	r2, [pc, #184]	@ (8001be0 <HAL_DMA_Abort+0x238>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d045      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001be4 <HAL_DMA_Abort+0x23c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d040      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2b      	ldr	r2, [pc, #172]	@ (8001be8 <HAL_DMA_Abort+0x240>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d03b      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2a      	ldr	r2, [pc, #168]	@ (8001bec <HAL_DMA_Abort+0x244>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d036      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a28      	ldr	r2, [pc, #160]	@ (8001bf0 <HAL_DMA_Abort+0x248>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <HAL_DMA_Abort+0x24c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d02c      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a25      	ldr	r2, [pc, #148]	@ (8001bf8 <HAL_DMA_Abort+0x250>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d027      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a24      	ldr	r2, [pc, #144]	@ (8001bfc <HAL_DMA_Abort+0x254>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a22      	ldr	r2, [pc, #136]	@ (8001c00 <HAL_DMA_Abort+0x258>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01d      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_DMA_Abort+0x25c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <HAL_DMA_Abort+0x260>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <HAL_DMA_Abort+0x264>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c10 <HAL_DMA_Abort+0x268>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c14 <HAL_DMA_Abort+0x26c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort+0x20e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <HAL_DMA_Abort+0x270>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d132      	bne.n	8001c1c <HAL_DMA_Abort+0x274>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e031      	b.n	8001c1e <HAL_DMA_Abort+0x276>
 8001bba:	bf00      	nop
 8001bbc:	40020010 	.word	0x40020010
 8001bc0:	40020028 	.word	0x40020028
 8001bc4:	40020040 	.word	0x40020040
 8001bc8:	40020058 	.word	0x40020058
 8001bcc:	40020070 	.word	0x40020070
 8001bd0:	40020088 	.word	0x40020088
 8001bd4:	400200a0 	.word	0x400200a0
 8001bd8:	400200b8 	.word	0x400200b8
 8001bdc:	40020410 	.word	0x40020410
 8001be0:	40020428 	.word	0x40020428
 8001be4:	40020440 	.word	0x40020440
 8001be8:	40020458 	.word	0x40020458
 8001bec:	40020470 	.word	0x40020470
 8001bf0:	40020488 	.word	0x40020488
 8001bf4:	400204a0 	.word	0x400204a0
 8001bf8:	400204b8 	.word	0x400204b8
 8001bfc:	58025408 	.word	0x58025408
 8001c00:	5802541c 	.word	0x5802541c
 8001c04:	58025430 	.word	0x58025430
 8001c08:	58025444 	.word	0x58025444
 8001c0c:	58025458 	.word	0x58025458
 8001c10:	5802546c 	.word	0x5802546c
 8001c14:	58025480 	.word	0x58025480
 8001c18:	58025494 	.word	0x58025494
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6d      	ldr	r2, [pc, #436]	@ (8001dec <HAL_DMA_Abort+0x444>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d04a      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a6b      	ldr	r2, [pc, #428]	@ (8001df0 <HAL_DMA_Abort+0x448>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d045      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6a      	ldr	r2, [pc, #424]	@ (8001df4 <HAL_DMA_Abort+0x44c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d040      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a68      	ldr	r2, [pc, #416]	@ (8001df8 <HAL_DMA_Abort+0x450>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d03b      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a67      	ldr	r2, [pc, #412]	@ (8001dfc <HAL_DMA_Abort+0x454>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d036      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a65      	ldr	r2, [pc, #404]	@ (8001e00 <HAL_DMA_Abort+0x458>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a64      	ldr	r2, [pc, #400]	@ (8001e04 <HAL_DMA_Abort+0x45c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d02c      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a62      	ldr	r2, [pc, #392]	@ (8001e08 <HAL_DMA_Abort+0x460>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d027      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a61      	ldr	r2, [pc, #388]	@ (8001e0c <HAL_DMA_Abort+0x464>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d022      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a5f      	ldr	r2, [pc, #380]	@ (8001e10 <HAL_DMA_Abort+0x468>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01d      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8001e14 <HAL_DMA_Abort+0x46c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d018      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	@ (8001e18 <HAL_DMA_Abort+0x470>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a5b      	ldr	r2, [pc, #364]	@ (8001e1c <HAL_DMA_Abort+0x474>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a59      	ldr	r2, [pc, #356]	@ (8001e20 <HAL_DMA_Abort+0x478>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a58      	ldr	r2, [pc, #352]	@ (8001e24 <HAL_DMA_Abort+0x47c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d004      	beq.n	8001cd2 <HAL_DMA_Abort+0x32a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a56      	ldr	r2, [pc, #344]	@ (8001e28 <HAL_DMA_Abort+0x480>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d108      	bne.n	8001ce4 <HAL_DMA_Abort+0x33c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e007      	b.n	8001cf4 <HAL_DMA_Abort+0x34c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cf4:	e013      	b.n	8001d1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf6:	f7ff fcf7 	bl	80016e8 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d90c      	bls.n	8001d1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2220      	movs	r2, #32
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e12d      	b.n	8001f7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e5      	bne.n	8001cf6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001dec <HAL_DMA_Abort+0x444>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d04a      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2d      	ldr	r2, [pc, #180]	@ (8001df0 <HAL_DMA_Abort+0x448>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d045      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2c      	ldr	r2, [pc, #176]	@ (8001df4 <HAL_DMA_Abort+0x44c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d040      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001df8 <HAL_DMA_Abort+0x450>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d03b      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a29      	ldr	r2, [pc, #164]	@ (8001dfc <HAL_DMA_Abort+0x454>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d036      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_DMA_Abort+0x458>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d031      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <HAL_DMA_Abort+0x45c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d02c      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <HAL_DMA_Abort+0x460>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d027      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <HAL_DMA_Abort+0x464>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <HAL_DMA_Abort+0x468>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01d      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <HAL_DMA_Abort+0x46c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d018      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e18 <HAL_DMA_Abort+0x470>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <HAL_DMA_Abort+0x474>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00e      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <HAL_DMA_Abort+0x478>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1a      	ldr	r2, [pc, #104]	@ (8001e24 <HAL_DMA_Abort+0x47c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_DMA_Abort+0x422>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a18      	ldr	r2, [pc, #96]	@ (8001e28 <HAL_DMA_Abort+0x480>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_DMA_Abort+0x426>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_DMA_Abort+0x428>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d02b      	beq.n	8001e2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	223f      	movs	r2, #63	@ 0x3f
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	e02a      	b.n	8001e42 <HAL_DMA_Abort+0x49a>
 8001dec:	40020010 	.word	0x40020010
 8001df0:	40020028 	.word	0x40020028
 8001df4:	40020040 	.word	0x40020040
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	40020070 	.word	0x40020070
 8001e00:	40020088 	.word	0x40020088
 8001e04:	400200a0 	.word	0x400200a0
 8001e08:	400200b8 	.word	0x400200b8
 8001e0c:	40020410 	.word	0x40020410
 8001e10:	40020428 	.word	0x40020428
 8001e14:	40020440 	.word	0x40020440
 8001e18:	40020458 	.word	0x40020458
 8001e1c:	40020470 	.word	0x40020470
 8001e20:	40020488 	.word	0x40020488
 8001e24:	400204a0 	.word	0x400204a0
 8001e28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4f      	ldr	r2, [pc, #316]	@ (8001f84 <HAL_DMA_Abort+0x5dc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d072      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4d      	ldr	r2, [pc, #308]	@ (8001f88 <HAL_DMA_Abort+0x5e0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d06d      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f8c <HAL_DMA_Abort+0x5e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d068      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4a      	ldr	r2, [pc, #296]	@ (8001f90 <HAL_DMA_Abort+0x5e8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d063      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a49      	ldr	r2, [pc, #292]	@ (8001f94 <HAL_DMA_Abort+0x5ec>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d05e      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a47      	ldr	r2, [pc, #284]	@ (8001f98 <HAL_DMA_Abort+0x5f0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d059      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a46      	ldr	r2, [pc, #280]	@ (8001f9c <HAL_DMA_Abort+0x5f4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d054      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a44      	ldr	r2, [pc, #272]	@ (8001fa0 <HAL_DMA_Abort+0x5f8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d04f      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a43      	ldr	r2, [pc, #268]	@ (8001fa4 <HAL_DMA_Abort+0x5fc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04a      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a41      	ldr	r2, [pc, #260]	@ (8001fa8 <HAL_DMA_Abort+0x600>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d045      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	@ (8001fac <HAL_DMA_Abort+0x604>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d040      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb0 <HAL_DMA_Abort+0x608>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d03b      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb4 <HAL_DMA_Abort+0x60c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d036      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_DMA_Abort+0x610>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d031      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fbc <HAL_DMA_Abort+0x614>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d02c      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a38      	ldr	r2, [pc, #224]	@ (8001fc0 <HAL_DMA_Abort+0x618>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d027      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a37      	ldr	r2, [pc, #220]	@ (8001fc4 <HAL_DMA_Abort+0x61c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d022      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a35      	ldr	r2, [pc, #212]	@ (8001fc8 <HAL_DMA_Abort+0x620>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01d      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a34      	ldr	r2, [pc, #208]	@ (8001fcc <HAL_DMA_Abort+0x624>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a32      	ldr	r2, [pc, #200]	@ (8001fd0 <HAL_DMA_Abort+0x628>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a31      	ldr	r2, [pc, #196]	@ (8001fd4 <HAL_DMA_Abort+0x62c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00e      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd8 <HAL_DMA_Abort+0x630>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2e      	ldr	r2, [pc, #184]	@ (8001fdc <HAL_DMA_Abort+0x634>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort+0x58a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe0 <HAL_DMA_Abort+0x638>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA_Abort+0x58e>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_DMA_Abort+0x590>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40020010 	.word	0x40020010
 8001f88:	40020028 	.word	0x40020028
 8001f8c:	40020040 	.word	0x40020040
 8001f90:	40020058 	.word	0x40020058
 8001f94:	40020070 	.word	0x40020070
 8001f98:	40020088 	.word	0x40020088
 8001f9c:	400200a0 	.word	0x400200a0
 8001fa0:	400200b8 	.word	0x400200b8
 8001fa4:	40020410 	.word	0x40020410
 8001fa8:	40020428 	.word	0x40020428
 8001fac:	40020440 	.word	0x40020440
 8001fb0:	40020458 	.word	0x40020458
 8001fb4:	40020470 	.word	0x40020470
 8001fb8:	40020488 	.word	0x40020488
 8001fbc:	400204a0 	.word	0x400204a0
 8001fc0:	400204b8 	.word	0x400204b8
 8001fc4:	58025408 	.word	0x58025408
 8001fc8:	5802541c 	.word	0x5802541c
 8001fcc:	58025430 	.word	0x58025430
 8001fd0:	58025444 	.word	0x58025444
 8001fd4:	58025458 	.word	0x58025458
 8001fd8:	5802546c 	.word	0x5802546c
 8001fdc:	58025480 	.word	0x58025480
 8001fe0:	58025494 	.word	0x58025494

08001fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e237      	b.n	8002466 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d004      	beq.n	800200c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2280      	movs	r2, #128	@ 0x80
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e22c      	b.n	8002466 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5c      	ldr	r2, [pc, #368]	@ (8002184 <HAL_DMA_Abort_IT+0x1a0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d04a      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5b      	ldr	r2, [pc, #364]	@ (8002188 <HAL_DMA_Abort_IT+0x1a4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d045      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a59      	ldr	r2, [pc, #356]	@ (800218c <HAL_DMA_Abort_IT+0x1a8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d040      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_DMA_Abort_IT+0x1ac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d03b      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a56      	ldr	r2, [pc, #344]	@ (8002194 <HAL_DMA_Abort_IT+0x1b0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d036      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a55      	ldr	r2, [pc, #340]	@ (8002198 <HAL_DMA_Abort_IT+0x1b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d031      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a53      	ldr	r2, [pc, #332]	@ (800219c <HAL_DMA_Abort_IT+0x1b8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02c      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_DMA_Abort_IT+0x1bc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d027      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a50      	ldr	r2, [pc, #320]	@ (80021a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d022      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a4f      	ldr	r2, [pc, #316]	@ (80021a8 <HAL_DMA_Abort_IT+0x1c4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d01d      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4d      	ldr	r2, [pc, #308]	@ (80021ac <HAL_DMA_Abort_IT+0x1c8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d018      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4c      	ldr	r2, [pc, #304]	@ (80021b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a4a      	ldr	r2, [pc, #296]	@ (80021b4 <HAL_DMA_Abort_IT+0x1d0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00e      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a49      	ldr	r2, [pc, #292]	@ (80021b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a47      	ldr	r2, [pc, #284]	@ (80021bc <HAL_DMA_Abort_IT+0x1d8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_Abort_IT+0xc8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a46      	ldr	r2, [pc, #280]	@ (80021c0 <HAL_DMA_Abort_IT+0x1dc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_DMA_Abort_IT+0xcc>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_DMA_Abort_IT+0xce>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8086 	beq.w	80021c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2204      	movs	r2, #4
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <HAL_DMA_Abort_IT+0x1a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d04a      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002188 <HAL_DMA_Abort_IT+0x1a4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d045      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2c      	ldr	r2, [pc, #176]	@ (800218c <HAL_DMA_Abort_IT+0x1a8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d040      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002190 <HAL_DMA_Abort_IT+0x1ac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d03b      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a29      	ldr	r2, [pc, #164]	@ (8002194 <HAL_DMA_Abort_IT+0x1b0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d036      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <HAL_DMA_Abort_IT+0x1b4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d031      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a26      	ldr	r2, [pc, #152]	@ (800219c <HAL_DMA_Abort_IT+0x1b8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02c      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a25      	ldr	r2, [pc, #148]	@ (80021a0 <HAL_DMA_Abort_IT+0x1bc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d027      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d022      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a22      	ldr	r2, [pc, #136]	@ (80021a8 <HAL_DMA_Abort_IT+0x1c4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d01d      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a20      	ldr	r2, [pc, #128]	@ (80021ac <HAL_DMA_Abort_IT+0x1c8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d018      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <HAL_DMA_Abort_IT+0x1d0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00e      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1c      	ldr	r2, [pc, #112]	@ (80021b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1a      	ldr	r2, [pc, #104]	@ (80021bc <HAL_DMA_Abort_IT+0x1d8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_DMA_Abort_IT+0x17c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_DMA_Abort_IT+0x1dc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <HAL_DMA_Abort_IT+0x18e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e178      	b.n	8002464 <HAL_DMA_Abort_IT+0x480>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e16f      	b.n	8002464 <HAL_DMA_Abort_IT+0x480>
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6c      	ldr	r2, [pc, #432]	@ (800238c <HAL_DMA_Abort_IT+0x3a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d04a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002390 <HAL_DMA_Abort_IT+0x3ac>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d045      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a69      	ldr	r2, [pc, #420]	@ (8002394 <HAL_DMA_Abort_IT+0x3b0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a68      	ldr	r2, [pc, #416]	@ (8002398 <HAL_DMA_Abort_IT+0x3b4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d03b      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a66      	ldr	r2, [pc, #408]	@ (800239c <HAL_DMA_Abort_IT+0x3b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d036      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_DMA_Abort_IT+0x3bc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d031      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a63      	ldr	r2, [pc, #396]	@ (80023a4 <HAL_DMA_Abort_IT+0x3c0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02c      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a62      	ldr	r2, [pc, #392]	@ (80023a8 <HAL_DMA_Abort_IT+0x3c4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d027      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a60      	ldr	r2, [pc, #384]	@ (80023ac <HAL_DMA_Abort_IT+0x3c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d022      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5f      	ldr	r2, [pc, #380]	@ (80023b0 <HAL_DMA_Abort_IT+0x3cc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d01d      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5d      	ldr	r2, [pc, #372]	@ (80023b4 <HAL_DMA_Abort_IT+0x3d0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d018      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5c      	ldr	r2, [pc, #368]	@ (80023b8 <HAL_DMA_Abort_IT+0x3d4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a5a      	ldr	r2, [pc, #360]	@ (80023bc <HAL_DMA_Abort_IT+0x3d8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00e      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a59      	ldr	r2, [pc, #356]	@ (80023c0 <HAL_DMA_Abort_IT+0x3dc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d009      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a57      	ldr	r2, [pc, #348]	@ (80023c4 <HAL_DMA_Abort_IT+0x3e0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_DMA_Abort_IT+0x290>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a56      	ldr	r2, [pc, #344]	@ (80023c8 <HAL_DMA_Abort_IT+0x3e4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <HAL_DMA_Abort_IT+0x2a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <HAL_DMA_Abort_IT+0x2b2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3c      	ldr	r2, [pc, #240]	@ (800238c <HAL_DMA_Abort_IT+0x3a8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d072      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002390 <HAL_DMA_Abort_IT+0x3ac>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d06d      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a39      	ldr	r2, [pc, #228]	@ (8002394 <HAL_DMA_Abort_IT+0x3b0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d068      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a37      	ldr	r2, [pc, #220]	@ (8002398 <HAL_DMA_Abort_IT+0x3b4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d063      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a36      	ldr	r2, [pc, #216]	@ (800239c <HAL_DMA_Abort_IT+0x3b8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d05e      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <HAL_DMA_Abort_IT+0x3bc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d059      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a33      	ldr	r2, [pc, #204]	@ (80023a4 <HAL_DMA_Abort_IT+0x3c0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d054      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_DMA_Abort_IT+0x3c4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d04f      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a30      	ldr	r2, [pc, #192]	@ (80023ac <HAL_DMA_Abort_IT+0x3c8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04a      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2e      	ldr	r2, [pc, #184]	@ (80023b0 <HAL_DMA_Abort_IT+0x3cc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d045      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <HAL_DMA_Abort_IT+0x3d0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d040      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2b      	ldr	r2, [pc, #172]	@ (80023b8 <HAL_DMA_Abort_IT+0x3d4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d03b      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <HAL_DMA_Abort_IT+0x3d8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d036      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a28      	ldr	r2, [pc, #160]	@ (80023c0 <HAL_DMA_Abort_IT+0x3dc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d031      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a27      	ldr	r2, [pc, #156]	@ (80023c4 <HAL_DMA_Abort_IT+0x3e0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d02c      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <HAL_DMA_Abort_IT+0x3e4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d027      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a24      	ldr	r2, [pc, #144]	@ (80023cc <HAL_DMA_Abort_IT+0x3e8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	@ (80023d0 <HAL_DMA_Abort_IT+0x3ec>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01d      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	@ (80023d4 <HAL_DMA_Abort_IT+0x3f0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d018      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	@ (80023d8 <HAL_DMA_Abort_IT+0x3f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1e      	ldr	r2, [pc, #120]	@ (80023dc <HAL_DMA_Abort_IT+0x3f8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00e      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1c      	ldr	r2, [pc, #112]	@ (80023e0 <HAL_DMA_Abort_IT+0x3fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <HAL_DMA_Abort_IT+0x400>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d004      	beq.n	8002386 <HAL_DMA_Abort_IT+0x3a2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <HAL_DMA_Abort_IT+0x404>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d132      	bne.n	80023ec <HAL_DMA_Abort_IT+0x408>
 8002386:	2301      	movs	r3, #1
 8002388:	e031      	b.n	80023ee <HAL_DMA_Abort_IT+0x40a>
 800238a:	bf00      	nop
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
 80023cc:	58025408 	.word	0x58025408
 80023d0:	5802541c 	.word	0x5802541c
 80023d4:	58025430 	.word	0x58025430
 80023d8:	58025444 	.word	0x58025444
 80023dc:	58025458 	.word	0x58025458
 80023e0:	5802546c 	.word	0x5802546c
 80023e4:	58025480 	.word	0x58025480
 80023e8:	58025494 	.word	0x58025494
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d028      	beq.n	8002444 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002400:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2201      	movs	r2, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002420:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002438:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002442:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop

08002470 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800247e:	b2db      	uxtb	r3, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0e3      	b.n	8002666 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2223      	movs	r2, #35	@ 0x23
 80024ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fd27 	bl	8000f04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002670 <HAL_ETH_Init+0x1e4>)
 80024b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002670 <HAL_ETH_Init+0x1e4>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002670 <HAL_ETH_Init+0x1e4>)
 80024c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7a1b      	ldrb	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff f93f 	bl	8001760 <HAL_SYSCFG_ETHInterfaceSelect>
 80024e2:	e003      	b.n	80024ec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80024e4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80024e8:	f7ff f93a 	bl	8001760 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80024ec:	4b61      	ldr	r3, [pc, #388]	@ (8002674 <HAL_ETH_Init+0x1e8>)
 80024ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002506:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7ff f8ee 	bl	80016e8 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800250e:	e011      	b.n	8002534 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002510:	f7ff f8ea 	bl	80016e8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800251e:	d909      	bls.n	8002534 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	22e0      	movs	r2, #224	@ 0xe0
 800252c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e098      	b.n	8002666 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e4      	bne.n	8002510 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f89e 	bl	8002688 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800254c:	f003 fb50 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8002550:	4603      	mov	r3, r0
 8002552:	4a49      	ldr	r2, [pc, #292]	@ (8002678 <HAL_ETH_Init+0x1ec>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	0c9a      	lsrs	r2, r3, #18
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3a01      	subs	r2, #1
 8002560:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa81 	bl	8002a6c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002572:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002576:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002586:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	22e0      	movs	r2, #224	@ 0xe0
 80025a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e05d      	b.n	8002666 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80025b6:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_ETH_Init+0x1f0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6952      	ldr	r2, [r2, #20]
 80025be:	0051      	lsls	r1, r2, #1
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ca:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fae9 	bl	8002ba6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb2f 	bl	8002c38 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	3305      	adds	r3, #5
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	021a      	lsls	r2, r3, #8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	3303      	adds	r3, #3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	061a      	lsls	r2, r3, #24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	3302      	adds	r3, #2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	3301      	adds	r3, #1
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002618:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002626:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002628:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_ETH_Init+0x1f4>)
 800263a:	430b      	orrs	r3, r1
 800263c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_ETH_Init+0x1f8>)
 800264e:	430b      	orrs	r3, r1
 8002650:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2210      	movs	r2, #16
 8002660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	58024400 	.word	0x58024400
 8002674:	58000400 	.word	0x58000400
 8002678:	431bde83 	.word	0x431bde83
 800267c:	ffff8001 	.word	0xffff8001
 8002680:	0c020060 	.word	0x0c020060
 8002684:	0c20c000 	.word	0x0c20c000

08002688 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002698:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80026a2:	f003 faa5 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 80026a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d804      	bhi.n	80026ba <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e022      	b.n	8002700 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_ETH_SetMDIOClockRange+0x90>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d204      	bcs.n	80026cc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e019      	b.n	8002700 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4a13      	ldr	r2, [pc, #76]	@ (800271c <HAL_ETH_SetMDIOClockRange+0x94>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d915      	bls.n	8002700 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <HAL_ETH_SetMDIOClockRange+0x98>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d804      	bhi.n	80026e6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e00c      	b.n	8002700 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d804      	bhi.n	80026f8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e003      	b.n	8002700 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	02160ebf 	.word	0x02160ebf
 8002718:	03938700 	.word	0x03938700
 800271c:	05f5e0ff 	.word	0x05f5e0ff
 8002720:	08f0d17f 	.word	0x08f0d17f
 8002724:	0ee6b27f 	.word	0x0ee6b27f

08002728 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800273a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002742:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	7b1b      	ldrb	r3, [r3, #12]
 8002748:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800274a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7b5b      	ldrb	r3, [r3, #13]
 8002750:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002752:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7b9b      	ldrb	r3, [r3, #14]
 8002758:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800275a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	7bdb      	ldrb	r3, [r3, #15]
 8002760:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002762:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	7c12      	ldrb	r2, [r2, #16]
 8002768:	2a00      	cmp	r2, #0
 800276a:	d102      	bne.n	8002772 <ETH_SetMACConfig+0x4a>
 800276c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0x4c>
 8002772:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002774:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	7c52      	ldrb	r2, [r2, #17]
 800277a:	2a00      	cmp	r2, #0
 800277c:	d102      	bne.n	8002784 <ETH_SetMACConfig+0x5c>
 800277e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002782:	e000      	b.n	8002786 <ETH_SetMACConfig+0x5e>
 8002784:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002786:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	7c9b      	ldrb	r3, [r3, #18]
 800278c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800278e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002794:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800279a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	7f1b      	ldrb	r3, [r3, #28]
 80027a0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80027a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	7f5b      	ldrb	r3, [r3, #29]
 80027a8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80027aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	7f92      	ldrb	r2, [r2, #30]
 80027b0:	2a00      	cmp	r2, #0
 80027b2:	d102      	bne.n	80027ba <ETH_SetMACConfig+0x92>
 80027b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027b8:	e000      	b.n	80027bc <ETH_SetMACConfig+0x94>
 80027ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80027bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7fdb      	ldrb	r3, [r3, #31]
 80027c2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80027c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027cc:	2a00      	cmp	r2, #0
 80027ce:	d102      	bne.n	80027d6 <ETH_SetMACConfig+0xae>
 80027d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d4:	e000      	b.n	80027d8 <ETH_SetMACConfig+0xb0>
 80027d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80027d8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80027de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027e6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80027e8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b56      	ldr	r3, [pc, #344]	@ (8002954 <ETH_SetMACConfig+0x22c>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	430b      	orrs	r3, r1
 8002804:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002812:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002814:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800281c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800281e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002826:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002828:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002830:	2a00      	cmp	r2, #0
 8002832:	d102      	bne.n	800283a <ETH_SetMACConfig+0x112>
 8002834:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002838:	e000      	b.n	800283c <ETH_SetMACConfig+0x114>
 800283a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800283c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4b42      	ldr	r3, [pc, #264]	@ (8002958 <ETH_SetMACConfig+0x230>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	430b      	orrs	r3, r1
 8002858:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002860:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	4b3a      	ldr	r3, [pc, #232]	@ (800295c <ETH_SetMACConfig+0x234>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	430b      	orrs	r3, r1
 800287c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002884:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800288a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002892:	2a00      	cmp	r2, #0
 8002894:	d101      	bne.n	800289a <ETH_SetMACConfig+0x172>
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	e000      	b.n	800289c <ETH_SetMACConfig+0x174>
 800289a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800289c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028ae:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80028b2:	4013      	ands	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	430b      	orrs	r3, r1
 80028bc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80028c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80028cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028da:	f023 0103 	bic.w	r1, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80028f2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800290e:	2a00      	cmp	r2, #0
 8002910:	d101      	bne.n	8002916 <ETH_SetMACConfig+0x1ee>
 8002912:	2240      	movs	r2, #64	@ 0x40
 8002914:	e000      	b.n	8002918 <ETH_SetMACConfig+0x1f0>
 8002916:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002918:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002920:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002922:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800292a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002938:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	430a      	orrs	r2, r1
 8002944:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	00048083 	.word	0x00048083
 8002958:	c0f88000 	.word	0xc0f88000
 800295c:	fffffef0 	.word	0xfffffef0

08002960 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b38      	ldr	r3, [pc, #224]	@ (8002a58 <ETH_SetDMAConfig+0xf8>)
 8002976:	4013      	ands	r3, r2
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	6811      	ldr	r1, [r2, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002986:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002992:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	7b1b      	ldrb	r3, [r3, #12]
 8002998:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a5c <ETH_SetDMAConfig+0xfc>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	430b      	orrs	r3, r1
 80029b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029b8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	7b5b      	ldrb	r3, [r3, #13]
 80029be:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80029d4:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <ETH_SetDMAConfig+0x100>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	430b      	orrs	r3, r1
 80029e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029e4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	7d1b      	ldrb	r3, [r3, #20]
 80029f0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80029f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	7f5b      	ldrb	r3, [r3, #29]
 80029f8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a06:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <ETH_SetDMAConfig+0x104>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a1a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	7f1b      	ldrb	r3, [r3, #28]
 8002a22:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a34:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <ETH_SetDMAConfig+0x108>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	430b      	orrs	r3, r1
 8002a44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a48:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	ffff87fd 	.word	0xffff87fd
 8002a5c:	ffff2ffe 	.word	0xffff2ffe
 8002a60:	fffec000 	.word	0xfffec000
 8002a64:	ffc0efef 	.word	0xffc0efef
 8002a68:	7fc0ffff 	.word	0x7fc0ffff

08002a6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0a4      	sub	sp, #144	@ 0x90
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aac:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002ac4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002ac8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002aee:	2300      	movs	r3, #0
 8002af0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b04:	2320      	movs	r3, #32
 8002b06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b16:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b20:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002b46:	2300      	movs	r3, #0
 8002b48:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b54:	4619      	mov	r1, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fde6 	bl	8002728 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b60:	2301      	movs	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b76:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b84:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b8c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b92:	f107 0308 	add.w	r3, r7, #8
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fee1 	bl	8002960 <ETH_SetDMAConfig>
}
 8002b9e:	bf00      	nop
 8002ba0:	3790      	adds	r7, #144	@ 0x90
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e01d      	b.n	8002bf0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68d9      	ldr	r1, [r3, #12]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	3206      	adds	r2, #6
 8002be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3301      	adds	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d9de      	bls.n	8002bb4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c04:	461a      	mov	r2, r3
 8002c06:	2303      	movs	r3, #3
 8002c08:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c18:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c28:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e023      	b.n	8002c8e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6919      	ldr	r1, [r3, #16]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	3212      	adds	r2, #18
 8002c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d9d8      	bls.n	8002c46 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cce:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ce2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	@ 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d02:	4b89      	ldr	r3, [pc, #548]	@ (8002f28 <HAL_GPIO_Init+0x234>)
 8002d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d06:	e194      	b.n	8003032 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8186 	beq.w	800302c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d005      	beq.n	8002d38 <HAL_GPIO_Init+0x44>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d130      	bne.n	8002d9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6e:	2201      	movs	r2, #1
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0201 	and.w	r2, r3, #1
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d017      	beq.n	8002dd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d123      	bne.n	8002e2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	69b9      	ldr	r1, [r7, #24]
 8002e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80e0 	beq.w	800302c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f2c <HAL_GPIO_Init+0x238>)
 8002e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e72:	4a2e      	ldr	r2, [pc, #184]	@ (8002f2c <HAL_GPIO_Init+0x238>)
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_GPIO_Init+0x238>)
 8002e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8a:	4a29      	ldr	r2, [pc, #164]	@ (8002f30 <HAL_GPIO_Init+0x23c>)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	@ (8002f34 <HAL_GPIO_Init+0x240>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d052      	beq.n	8002f5c <HAL_GPIO_Init+0x268>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <HAL_GPIO_Init+0x244>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d031      	beq.n	8002f22 <HAL_GPIO_Init+0x22e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_GPIO_Init+0x248>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02b      	beq.n	8002f1e <HAL_GPIO_Init+0x22a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <HAL_GPIO_Init+0x24c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d025      	beq.n	8002f1a <HAL_GPIO_Init+0x226>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_GPIO_Init+0x250>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01f      	beq.n	8002f16 <HAL_GPIO_Init+0x222>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_GPIO_Init+0x254>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d019      	beq.n	8002f12 <HAL_GPIO_Init+0x21e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f4c <HAL_GPIO_Init+0x258>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_GPIO_Init+0x21a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	@ (8002f50 <HAL_GPIO_Init+0x25c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00d      	beq.n	8002f0a <HAL_GPIO_Init+0x216>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	@ (8002f54 <HAL_GPIO_Init+0x260>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <HAL_GPIO_Init+0x212>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a17      	ldr	r2, [pc, #92]	@ (8002f58 <HAL_GPIO_Init+0x264>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_GPIO_Init+0x20e>
 8002efe:	2309      	movs	r3, #9
 8002f00:	e02d      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f02:	230a      	movs	r3, #10
 8002f04:	e02b      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f06:	2308      	movs	r3, #8
 8002f08:	e029      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f0a:	2307      	movs	r3, #7
 8002f0c:	e027      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e025      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e023      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e021      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e01f      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e01d      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e01b      	b.n	8002f5e <HAL_GPIO_Init+0x26a>
 8002f26:	bf00      	nop
 8002f28:	58000080 	.word	0x58000080
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58000400 	.word	0x58000400
 8002f34:	58020000 	.word	0x58020000
 8002f38:	58020400 	.word	0x58020400
 8002f3c:	58020800 	.word	0x58020800
 8002f40:	58020c00 	.word	0x58020c00
 8002f44:	58021000 	.word	0x58021000
 8002f48:	58021400 	.word	0x58021400
 8002f4c:	58021800 	.word	0x58021800
 8002f50:	58021c00 	.word	0x58021c00
 8002f54:	58022000 	.word	0x58022000
 8002f58:	58022400 	.word	0x58022400
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	f002 0203 	and.w	r2, r2, #3
 8002f64:	0092      	lsls	r2, r2, #2
 8002f66:	4093      	lsls	r3, r2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6e:	4938      	ldr	r1, [pc, #224]	@ (8003050 <HAL_GPIO_Init+0x35c>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f ae63 	bne.w	8002d08 <HAL_GPIO_Init+0x14>
  }
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3724      	adds	r7, #36	@ 0x24
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	58000400 	.word	0x58000400

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e08b      	b.n	80031b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fff6 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	@ 0x24
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	e006      	b.n	8003110 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800310e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d108      	bne.n	800312a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	e007      	b.n	800313a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <HAL_I2C_Init+0x134>)
 8003146:	430b      	orrs	r3, r1
 8003148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	02008000 	.word	0x02008000

080031c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	460b      	mov	r3, r1
 80031ce:	817b      	strh	r3, [r7, #10]
 80031d0:	4613      	mov	r3, r2
 80031d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b20      	cmp	r3, #32
 80031de:	f040 80fd 	bne.w	80033dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x30>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0f6      	b.n	80033de <HAL_I2C_Master_Transmit+0x21e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f8:	f7fe fa76 	bl	80016e8 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2319      	movs	r3, #25
 8003204:	2201      	movs	r2, #1
 8003206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f001 f875 	bl	80042fa <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0e1      	b.n	80033de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2221      	movs	r2, #33	@ 0x21
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2210      	movs	r2, #16
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	893a      	ldrh	r2, [r7, #8]
 800323a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2bff      	cmp	r3, #255	@ 0xff
 800324a:	d906      	bls.n	800325a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	22ff      	movs	r2, #255	@ 0xff
 8003250:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e007      	b.n	800326a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003268:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d024      	beq.n	80032bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	4b4e      	ldr	r3, [pc, #312]	@ (80033e8 <HAL_I2C_Master_Transmit+0x228>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f001 fa6f 	bl	8004798 <I2C_TransferConfig>
 80032ba:	e066      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	8979      	ldrh	r1, [r7, #10]
 80032c4:	4b48      	ldr	r3, [pc, #288]	@ (80033e8 <HAL_I2C_Master_Transmit+0x228>)
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f001 fa64 	bl	8004798 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032d0:	e05b      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	6a39      	ldr	r1, [r7, #32]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f001 f868 	bl	80043ac <I2C_WaitOnTXISFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07b      	b.n	80033de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d034      	beq.n	800338a <HAL_I2C_Master_Transmit+0x1ca>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d130      	bne.n	800338a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2200      	movs	r2, #0
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 ffe1 	bl	80042fa <I2C_WaitOnFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e04d      	b.n	80033de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2bff      	cmp	r3, #255	@ 0xff
 800334a:	d90e      	bls.n	800336a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	22ff      	movs	r2, #255	@ 0xff
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003356:	b2da      	uxtb	r2, r3
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	2300      	movs	r3, #0
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f001 fa18 	bl	8004798 <I2C_TransferConfig>
 8003368:	e00f      	b.n	800338a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f001 fa07 	bl	8004798 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d19e      	bne.n	80032d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	6a39      	ldr	r1, [r7, #32]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f001 f84e 	bl	800443a <I2C_WaitOnSTOPFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01a      	b.n	80033de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2220      	movs	r2, #32
 80033ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <HAL_I2C_Master_Transmit+0x22c>)
 80033bc:	400b      	ands	r3, r1
 80033be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	80002000 	.word	0x80002000
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
 8003400:	4613      	mov	r3, r2
 8003402:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	f040 80db 	bne.w	80035c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2C_Master_Receive+0x30>
 800341c:	2302      	movs	r3, #2
 800341e:	e0d4      	b.n	80035ca <HAL_I2C_Master_Receive+0x1da>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003428:	f7fe f95e 	bl	80016e8 <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2319      	movs	r3, #25
 8003434:	2201      	movs	r2, #1
 8003436:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 ff5d 	bl	80042fa <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0bf      	b.n	80035ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2222      	movs	r2, #34	@ 0x22
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2210      	movs	r2, #16
 8003456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	893a      	ldrh	r2, [r7, #8]
 800346a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2bff      	cmp	r3, #255	@ 0xff
 800347a:	d90e      	bls.n	800349a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003486:	b2da      	uxtb	r2, r3
 8003488:	8979      	ldrh	r1, [r7, #10]
 800348a:	4b52      	ldr	r3, [pc, #328]	@ (80035d4 <HAL_I2C_Master_Receive+0x1e4>)
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f001 f980 	bl	8004798 <I2C_TransferConfig>
 8003498:	e06d      	b.n	8003576 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	4b49      	ldr	r3, [pc, #292]	@ (80035d4 <HAL_I2C_Master_Receive+0x1e4>)
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f001 f96f 	bl	8004798 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80034ba:	e05c      	b.n	8003576 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	6a39      	ldr	r1, [r7, #32]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fffd 	bl	80044c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e07c      	b.n	80035ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d034      	beq.n	8003576 <HAL_I2C_Master_Receive+0x186>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d130      	bne.n	8003576 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2200      	movs	r2, #0
 800351c:	2180      	movs	r1, #128	@ 0x80
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 feeb 	bl	80042fa <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e04d      	b.n	80035ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	2bff      	cmp	r3, #255	@ 0xff
 8003536:	d90e      	bls.n	8003556 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	22ff      	movs	r2, #255	@ 0xff
 800353c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003542:	b2da      	uxtb	r2, r3
 8003544:	8979      	ldrh	r1, [r7, #10]
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f001 f922 	bl	8004798 <I2C_TransferConfig>
 8003554:	e00f      	b.n	8003576 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	b2da      	uxtb	r2, r3
 8003566:	8979      	ldrh	r1, [r7, #10]
 8003568:	2300      	movs	r3, #0
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f001 f911 	bl	8004798 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d19d      	bne.n	80034bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	6a39      	ldr	r1, [r7, #32]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 ff58 	bl	800443a <I2C_WaitOnSTOPFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e01a      	b.n	80035ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2220      	movs	r2, #32
 800359a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <HAL_I2C_Master_Receive+0x1e8>)
 80035a8:	400b      	ands	r3, r1
 80035aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	80002400 	.word	0x80002400
 80035d8:	fe00e800 	.word	0xfe00e800

080035dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
  }
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00f      	beq.n	8003652 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003650:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00f      	beq.n	800367c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0208 	orr.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00f      	beq.n	80036a6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	f043 0202 	orr.w	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 030b 	and.w	r3, r3, #11
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fcc5 	bl	8004048 <I2C_ITError>
  }
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	70fb      	strb	r3, [r7, #3]
 80036fa:	4613      	mov	r3, r2
 80036fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <I2C_Slave_ISR_IT+0x24>
 8003766:	2302      	movs	r3, #2
 8003768:	e0e2      	b.n	8003930 <I2C_Slave_ISR_IT+0x1ea>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003786:	6939      	ldr	r1, [r7, #16]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f9b5 	bl	8003af8 <I2C_ITSlaveCplt>
 800378e:	e0ca      	b.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04b      	beq.n	8003832 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d046      	beq.n	8003832 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d128      	bne.n	8003800 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b28      	cmp	r3, #40	@ 0x28
 80037b8:	d108      	bne.n	80037cc <I2C_Slave_ISR_IT+0x86>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037c0:	d104      	bne.n	80037cc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037c2:	6939      	ldr	r1, [r7, #16]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fbeb 	bl	8003fa0 <I2C_ITListenCplt>
 80037ca:	e031      	b.n	8003830 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b29      	cmp	r3, #41	@ 0x29
 80037d6:	d10e      	bne.n	80037f6 <I2C_Slave_ISR_IT+0xb0>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037de:	d00a      	beq.n	80037f6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2210      	movs	r2, #16
 80037e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fd44 	bl	8004276 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f926 	bl	8003a40 <I2C_ITSlaveSeqCplt>
 80037f4:	e01c      	b.n	8003830 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2210      	movs	r2, #16
 80037fc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80037fe:	e08f      	b.n	8003920 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2210      	movs	r2, #16
 8003806:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <I2C_Slave_ISR_IT+0xdc>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003820:	d17e      	bne.n	8003920 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	4619      	mov	r1, r3
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fc0d 	bl	8004048 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800382e:	e077      	b.n	8003920 <I2C_Slave_ISR_IT+0x1da>
 8003830:	e076      	b.n	8003920 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02f      	beq.n	800389c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02a      	beq.n	800389c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d018      	beq.n	8003882 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d14b      	bne.n	8003924 <I2C_Slave_ISR_IT+0x1de>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003892:	d047      	beq.n	8003924 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8d3 	bl	8003a40 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800389a:	e043      	b.n	8003924 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80038b0:	6939      	ldr	r1, [r7, #16]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f840 	bl	8003938 <I2C_ITAddrCplt>
 80038b8:	e035      	b.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d030      	beq.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d02b      	beq.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003908:	e00d      	b.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003910:	d002      	beq.n	8003918 <I2C_Slave_ISR_IT+0x1d2>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f891 	bl	8003a40 <I2C_ITSlaveSeqCplt>
 800391e:	e002      	b.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003920:	bf00      	nop
 8003922:	e000      	b.n	8003926 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003924:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800394e:	2b28      	cmp	r3, #40	@ 0x28
 8003950:	d16a      	bne.n	8003a28 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	b29b      	uxth	r3, r3
 800396c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003970:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800398c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d138      	bne.n	8003a08 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	09db      	lsrs	r3, r3, #7
 800399a:	b29a      	uxth	r2, r3
 800399c:	89bb      	ldrh	r3, [r7, #12]
 800399e:	4053      	eors	r3, r2
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f003 0306 	and.w	r3, r3, #6
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11c      	bne.n	80039e4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80039aa:	897b      	ldrh	r3, [r7, #10]
 80039ac:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d13b      	bne.n	8003a38 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039d6:	89ba      	ldrh	r2, [r7, #12]
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fe86 	bl	80036ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039e2:	e029      	b.n	8003a38 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 ff05 	bl	80047fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039fa:	89ba      	ldrh	r2, [r7, #12]
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fe74 	bl	80036ee <HAL_I2C_AddrCallback>
}
 8003a06:	e017      	b.n	8003a38 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fef5 	bl	80047fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a1a:	89ba      	ldrh	r2, [r7, #12]
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fe64 	bl	80036ee <HAL_I2C_AddrCallback>
}
 8003a26:	e007      	b.n	8003a38 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00c      	b.n	8003a8e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b29      	cmp	r3, #41	@ 0x29
 8003a98:	d112      	bne.n	8003ac0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2228      	movs	r2, #40	@ 0x28
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2221      	movs	r2, #33	@ 0x21
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fea6 	bl	80047fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fe04 	bl	80036c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003abe:	e017      	b.n	8003af0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aca:	d111      	bne.n	8003af0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2228      	movs	r2, #40	@ 0x28
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2222      	movs	r2, #34	@ 0x22
 8003ad8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ada:	2102      	movs	r1, #2
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fe8d 	bl	80047fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fdf5 	bl	80036da <HAL_I2C_SlaveRxCpltCallback>
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b12:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2220      	movs	r2, #32
 8003b22:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	2b21      	cmp	r3, #33	@ 0x21
 8003b28:	d002      	beq.n	8003b30 <I2C_ITSlaveCplt+0x38>
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	2b29      	cmp	r3, #41	@ 0x29
 8003b2e:	d108      	bne.n	8003b42 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b30:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fe61 	bl	80047fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2221      	movs	r2, #33	@ 0x21
 8003b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b40:	e019      	b.n	8003b76 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	2b22      	cmp	r3, #34	@ 0x22
 8003b46:	d002      	beq.n	8003b4e <I2C_ITSlaveCplt+0x56>
 8003b48:	7afb      	ldrb	r3, [r7, #11]
 8003b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b4c:	d108      	bne.n	8003b60 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b4e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fe52 	bl	80047fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2222      	movs	r2, #34	@ 0x22
 8003b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b5e:	e00a      	b.n	8003b76 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003b60:	7afb      	ldrb	r3, [r7, #11]
 8003b62:	2b28      	cmp	r3, #40	@ 0x28
 8003b64:	d107      	bne.n	8003b76 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003b66:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fe46 	bl	80047fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b84:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b7f      	ldr	r3, [pc, #508]	@ (8003d90 <I2C_ITSlaveCplt+0x298>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fb6d 	bl	8004276 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d07a      	beq.n	8003c9c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bb4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8111 	beq.w	8003de2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a73      	ldr	r2, [pc, #460]	@ (8003d94 <I2C_ITSlaveCplt+0x29c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d059      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a71      	ldr	r2, [pc, #452]	@ (8003d98 <I2C_ITSlaveCplt+0x2a0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d053      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6f      	ldr	r2, [pc, #444]	@ (8003d9c <I2C_ITSlaveCplt+0x2a4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04d      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6d      	ldr	r2, [pc, #436]	@ (8003da0 <I2C_ITSlaveCplt+0x2a8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d047      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8003da4 <I2C_ITSlaveCplt+0x2ac>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d041      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a69      	ldr	r2, [pc, #420]	@ (8003da8 <I2C_ITSlaveCplt+0x2b0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d03b      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a67      	ldr	r2, [pc, #412]	@ (8003dac <I2C_ITSlaveCplt+0x2b4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d035      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a65      	ldr	r2, [pc, #404]	@ (8003db0 <I2C_ITSlaveCplt+0x2b8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02f      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a63      	ldr	r2, [pc, #396]	@ (8003db4 <I2C_ITSlaveCplt+0x2bc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d029      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a61      	ldr	r2, [pc, #388]	@ (8003db8 <I2C_ITSlaveCplt+0x2c0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d023      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dbc <I2C_ITSlaveCplt+0x2c4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01d      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8003dc0 <I2C_ITSlaveCplt+0x2c8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d017      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc4 <I2C_ITSlaveCplt+0x2cc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d011      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a59      	ldr	r2, [pc, #356]	@ (8003dc8 <I2C_ITSlaveCplt+0x2d0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d00b      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a57      	ldr	r2, [pc, #348]	@ (8003dcc <I2C_ITSlaveCplt+0x2d4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d005      	beq.n	8003c80 <I2C_ITSlaveCplt+0x188>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a55      	ldr	r2, [pc, #340]	@ (8003dd0 <I2C_ITSlaveCplt+0x2d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d105      	bne.n	8003c8c <I2C_ITSlaveCplt+0x194>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	e004      	b.n	8003c96 <I2C_ITSlaveCplt+0x19e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003c9a:	e0a2      	b.n	8003de2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 809d 	beq.w	8003de2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cb6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8090 	beq.w	8003de2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a32      	ldr	r2, [pc, #200]	@ (8003d94 <I2C_ITSlaveCplt+0x29c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d059      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <I2C_ITSlaveCplt+0x2a0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d053      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d9c <I2C_ITSlaveCplt+0x2a4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04d      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	@ (8003da0 <I2C_ITSlaveCplt+0x2a8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d047      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8003da4 <I2C_ITSlaveCplt+0x2ac>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d041      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a28      	ldr	r2, [pc, #160]	@ (8003da8 <I2C_ITSlaveCplt+0x2b0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d03b      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a26      	ldr	r2, [pc, #152]	@ (8003dac <I2C_ITSlaveCplt+0x2b4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d035      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a24      	ldr	r2, [pc, #144]	@ (8003db0 <I2C_ITSlaveCplt+0x2b8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02f      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a22      	ldr	r2, [pc, #136]	@ (8003db4 <I2C_ITSlaveCplt+0x2bc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d029      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <I2C_ITSlaveCplt+0x2c0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d023      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1e      	ldr	r2, [pc, #120]	@ (8003dbc <I2C_ITSlaveCplt+0x2c4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01d      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <I2C_ITSlaveCplt+0x2c8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d017      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <I2C_ITSlaveCplt+0x2cc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d011      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <I2C_ITSlaveCplt+0x2d0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00b      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a16      	ldr	r2, [pc, #88]	@ (8003dcc <I2C_ITSlaveCplt+0x2d4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d005      	beq.n	8003d82 <I2C_ITSlaveCplt+0x28a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a14      	ldr	r2, [pc, #80]	@ (8003dd0 <I2C_ITSlaveCplt+0x2d8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d128      	bne.n	8003dd4 <I2C_ITSlaveCplt+0x2dc>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	e027      	b.n	8003dde <I2C_ITSlaveCplt+0x2e6>
 8003d8e:	bf00      	nop
 8003d90:	fe00e800 	.word	0xfe00e800
 8003d94:	40020010 	.word	0x40020010
 8003d98:	40020028 	.word	0x40020028
 8003d9c:	40020040 	.word	0x40020040
 8003da0:	40020058 	.word	0x40020058
 8003da4:	40020070 	.word	0x40020070
 8003da8:	40020088 	.word	0x40020088
 8003dac:	400200a0 	.word	0x400200a0
 8003db0:	400200b8 	.word	0x400200b8
 8003db4:	40020410 	.word	0x40020410
 8003db8:	40020428 	.word	0x40020428
 8003dbc:	40020440 	.word	0x40020440
 8003dc0:	40020458 	.word	0x40020458
 8003dc4:	40020470 	.word	0x40020470
 8003dc8:	40020488 	.word	0x40020488
 8003dcc:	400204a0 	.word	0x400204a0
 8003dd0:	400204b8 	.word	0x400204b8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d049      	beq.n	8003ee2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d044      	beq.n	8003ee2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d128      	bne.n	8003eb4 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b28      	cmp	r3, #40	@ 0x28
 8003e6c:	d108      	bne.n	8003e80 <I2C_ITSlaveCplt+0x388>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e74:	d104      	bne.n	8003e80 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f891 	bl	8003fa0 <I2C_ITListenCplt>
 8003e7e:	e030      	b.n	8003ee2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b29      	cmp	r3, #41	@ 0x29
 8003e8a:	d10e      	bne.n	8003eaa <I2C_ITSlaveCplt+0x3b2>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e92:	d00a      	beq.n	8003eaa <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f9ea 	bl	8004276 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fdcc 	bl	8003a40 <I2C_ITSlaveSeqCplt>
 8003ea8:	e01b      	b.n	8003ee2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2210      	movs	r2, #16
 8003eb0:	61da      	str	r2, [r3, #28]
 8003eb2:	e016      	b.n	8003ee2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	f043 0204 	orr.w	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <I2C_ITSlaveCplt+0x3de>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed4:	d105      	bne.n	8003ee2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8b3 	bl	8004048 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f8a2 	bl	8004048 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b28      	cmp	r3, #40	@ 0x28
 8003f0e:	d141      	bne.n	8003f94 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f10:	6979      	ldr	r1, [r7, #20]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f844 	bl	8003fa0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f18:	e03c      	b.n	8003f94 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f22:	d014      	beq.n	8003f4e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fd8b 	bl	8003a40 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f9c <I2C_ITSlaveCplt+0x4a4>)
 8003f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fbdf 	bl	800370a <HAL_I2C_ListenCpltCallback>
}
 8003f4c:	e022      	b.n	8003f94 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b22      	cmp	r3, #34	@ 0x22
 8003f58:	d10e      	bne.n	8003f78 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff fbb2 	bl	80036da <HAL_I2C_SlaveRxCpltCallback>
}
 8003f76:	e00d      	b.n	8003f94 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fb99 	bl	80036c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f94:	bf00      	nop
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	ffff0000 	.word	0xffff0000

08003fa0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a25      	ldr	r2, [pc, #148]	@ (8004044 <I2C_ITListenCplt+0xa4>)
 8003fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d022      	beq.n	800401c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	f043 0204 	orr.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800401c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fbeb 	bl	80047fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2210      	movs	r2, #16
 800402c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fb67 	bl	800370a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	ffff0000 	.word	0xffff0000

08004048 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004058:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a6d      	ldr	r2, [pc, #436]	@ (800421c <I2C_ITError+0x1d4>)
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	2b28      	cmp	r3, #40	@ 0x28
 800407e:	d005      	beq.n	800408c <I2C_ITError+0x44>
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b29      	cmp	r3, #41	@ 0x29
 8004084:	d002      	beq.n	800408c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b2a      	cmp	r3, #42	@ 0x2a
 800408a:	d10b      	bne.n	80040a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800408c:	2103      	movs	r1, #3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fbb4 	bl	80047fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2228      	movs	r2, #40	@ 0x28
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a60      	ldr	r2, [pc, #384]	@ (8004220 <I2C_ITError+0x1d8>)
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040a2:	e030      	b.n	8004106 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fba7 	bl	80047fc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8e1 	bl	8004276 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b60      	cmp	r3, #96	@ 0x60
 80040be:	d01f      	beq.n	8004100 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d114      	bne.n	8004100 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d109      	bne.n	80040f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2210      	movs	r2, #16
 80040ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f0:	f043 0204 	orr.w	r2, r3, #4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2220      	movs	r2, #32
 80040fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d039      	beq.n	8004188 <I2C_ITError+0x140>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b11      	cmp	r3, #17
 8004118:	d002      	beq.n	8004120 <I2C_ITError+0xd8>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b21      	cmp	r3, #33	@ 0x21
 800411e:	d133      	bne.n	8004188 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800412e:	d107      	bne.n	8004140 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800413e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f993 	bl	8002470 <HAL_DMA_GetState>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d017      	beq.n	8004180 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	4a33      	ldr	r2, [pc, #204]	@ (8004224 <I2C_ITError+0x1dc>)
 8004156:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	4618      	mov	r0, r3
 8004166:	f7fd ff3d 	bl	8001fe4 <HAL_DMA_Abort_IT>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d04d      	beq.n	800420c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800417a:	4610      	mov	r0, r2
 800417c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800417e:	e045      	b.n	800420c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f851 	bl	8004228 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004186:	e041      	b.n	800420c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d039      	beq.n	8004204 <I2C_ITError+0x1bc>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b12      	cmp	r3, #18
 8004194:	d002      	beq.n	800419c <I2C_ITError+0x154>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b22      	cmp	r3, #34	@ 0x22
 800419a:	d133      	bne.n	8004204 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041aa:	d107      	bne.n	80041bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe f955 	bl	8002470 <HAL_DMA_GetState>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d017      	beq.n	80041fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <I2C_ITError+0x1dc>)
 80041d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fd feff 	bl	8001fe4 <HAL_DMA_Abort_IT>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d011      	beq.n	8004210 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041f6:	4610      	mov	r0, r2
 80041f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041fa:	e009      	b.n	8004210 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f813 	bl	8004228 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004202:	e005      	b.n	8004210 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f80f 	bl	8004228 <I2C_TreatErrorCallback>
  }
}
 800420a:	e002      	b.n	8004212 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004210:	bf00      	nop
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	ffff0000 	.word	0xffff0000
 8004220:	08003747 	.word	0x08003747
 8004224:	080042bf 	.word	0x080042bf

08004228 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b60      	cmp	r3, #96	@ 0x60
 800423a:	d10e      	bne.n	800425a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fa6d 	bl	8003732 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004258:	e009      	b.n	800426e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fa58 	bl	800371e <HAL_I2C_ErrorCallback>
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d103      	bne.n	8004294 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d007      	beq.n	80042b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	619a      	str	r2, [r3, #24]
  }
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	2200      	movs	r2, #0
 80042da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e8:	2200      	movs	r2, #0
 80042ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff ff9b 	bl	8004228 <I2C_TreatErrorCallback>
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430a:	e03b      	b.n	8004384 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f961 	bl	80045d8 <I2C_IsErrorOccurred>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e041      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d02d      	beq.n	8004384 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fd f9de 	bl	80016e8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <I2C_WaitOnFlagUntilTimeout+0x44>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d122      	bne.n	8004384 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	429a      	cmp	r2, r3
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d113      	bne.n	8004384 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00f      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d0b4      	beq.n	800430c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043b8:	e033      	b.n	8004422 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f90a 	bl	80045d8 <I2C_IsErrorOccurred>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e031      	b.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d025      	beq.n	8004422 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fd f987 	bl	80016e8 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11a      	bne.n	8004422 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d013      	beq.n	8004422 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e007      	b.n	8004432 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d1c4      	bne.n	80043ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004446:	e02f      	b.n	80044a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f8c3 	bl	80045d8 <I2C_IsErrorOccurred>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e02d      	b.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fd f944 	bl	80016e8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11a      	bne.n	80044a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b20      	cmp	r3, #32
 800447e:	d013      	beq.n	80044a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e007      	b.n	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d1c8      	bne.n	8004448 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044d0:	e071      	b.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f87e 	bl	80045d8 <I2C_IsErrorOccurred>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d13b      	bne.n	800456c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d138      	bne.n	800456c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d105      	bne.n	8004514 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b10      	cmp	r3, #16
 8004520:	d121      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2210      	movs	r2, #16
 8004528:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2204      	movs	r2, #4
 800452e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2220      	movs	r2, #32
 8004536:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004544:	400b      	ands	r3, r1
 8004546:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	75fb      	strb	r3, [r7, #23]
 8004564:	e002      	b.n	800456c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800456c:	f7fd f8bc 	bl	80016e8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d119      	bne.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00f      	beq.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f043 0220 	orr.w	r2, r3, #32
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d002      	beq.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d083      	beq.n	80044d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	fe00e800 	.word	0xfe00e800

080045d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d068      	beq.n	80046d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2210      	movs	r2, #16
 800460a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800460c:	e049      	b.n	80046a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d045      	beq.n	80046a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fd f867 	bl	80016e8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_IsErrorOccurred+0x54>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d13a      	bne.n	80046a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004636:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800463e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800464a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464e:	d121      	bne.n	8004694 <I2C_IsErrorOccurred+0xbc>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004656:	d01d      	beq.n	8004694 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b20      	cmp	r3, #32
 800465c:	d01a      	beq.n	8004694 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800466c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800466e:	f7fd f83b 	bl	80016e8 <HAL_GetTick>
 8004672:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004674:	e00e      	b.n	8004694 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004676:	f7fd f837 	bl	80016e8 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b19      	cmp	r3, #25
 8004682:	d907      	bls.n	8004694 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f043 0320 	orr.w	r3, r3, #32
 800468a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004692:	e006      	b.n	80046a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d1e9      	bne.n	8004676 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d003      	beq.n	80046b8 <I2C_IsErrorOccurred+0xe0>
 80046b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0aa      	beq.n	800460e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2220      	movs	r2, #32
 80046c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00b      	beq.n	8004700 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f043 0308 	orr.w	r3, r3, #8
 8004710:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800471a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f043 0302 	orr.w	r3, r3, #2
 8004732:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800473c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01c      	beq.n	8004786 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff fd92 	bl	8004276 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <I2C_IsErrorOccurred+0x1bc>)
 800475e:	400b      	ands	r3, r1
 8004760:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	431a      	orrs	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800478a:	4618      	mov	r0, r3
 800478c:	3728      	adds	r7, #40	@ 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	fe00e800 	.word	0xfe00e800

08004798 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	460b      	mov	r3, r1
 80047a4:	817b      	strh	r3, [r7, #10]
 80047a6:	4613      	mov	r3, r2
 80047a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047aa:	897b      	ldrh	r3, [r7, #10]
 80047ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047b0:	7a7b      	ldrb	r3, [r7, #9]
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	0d5b      	lsrs	r3, r3, #21
 80047d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047d6:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <I2C_TransferConfig+0x60>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	43db      	mvns	r3, r3
 80047dc:	ea02 0103 	and.w	r1, r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	03ff63ff 	.word	0x03ff63ff

080047fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00f      	beq.n	8004836 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800481c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800482a:	2b28      	cmp	r3, #40	@ 0x28
 800482c:	d003      	beq.n	8004836 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004834:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00f      	beq.n	8004860 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004846:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004854:	2b28      	cmp	r3, #40	@ 0x28
 8004856:	d003      	beq.n	8004860 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800485e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004860:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004864:	2b00      	cmp	r3, #0
 8004866:	da03      	bge.n	8004870 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800486e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d103      	bne.n	800487e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800487c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	2b20      	cmp	r3, #32
 8004882:	d103      	bne.n	800488c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f043 0320 	orr.w	r3, r3, #32
 800488a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800488c:	887b      	ldrh	r3, [r7, #2]
 800488e:	2b40      	cmp	r3, #64	@ 0x40
 8004890:	d103      	bne.n	800489a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004898:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	400a      	ands	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d138      	bne.n	8004940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048d8:	2302      	movs	r3, #2
 80048da:	e032      	b.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	@ 0x24
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800490a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	d139      	bne.n	80049d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800496e:	2302      	movs	r3, #2
 8004970:	e033      	b.n	80049da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2224      	movs	r2, #36	@ 0x24
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af02      	add	r7, sp, #8
 80049ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0fe      	b.n	8004bf6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc fc33 	bl	8001278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2203      	movs	r2, #3
 8004a16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f005 fe44 	bl	800a6ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7c1a      	ldrb	r2, [r3, #16]
 8004a2c:	f88d 2000 	strb.w	r2, [sp]
 8004a30:	3304      	adds	r3, #4
 8004a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a34:	f005 fdc8 	bl	800a5c8 <USB_CoreInit>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0d5      	b.n	8004bf6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f005 fe3c 	bl	800a6ce <USB_SetCurrentMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0c6      	b.n	8004bf6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e04a      	b.n	8004b04 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3315      	adds	r3, #21
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	3314      	adds	r3, #20
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	b298      	uxth	r0, r3
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	332e      	adds	r3, #46	@ 0x2e
 8004aaa:	4602      	mov	r2, r0
 8004aac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3318      	adds	r3, #24
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	331c      	adds	r3, #28
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3320      	adds	r3, #32
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004aea:	7bfa      	ldrb	r2, [r7, #15]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3324      	adds	r3, #36	@ 0x24
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	3301      	adds	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	791b      	ldrb	r3, [r3, #4]
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3af      	bcc.n	8004a6e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e044      	b.n	8004b9e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b56:	7bfa      	ldrb	r2, [r7, #15]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b82:	7bfa      	ldrb	r2, [r7, #15]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	73fb      	strb	r3, [r7, #15]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	791b      	ldrb	r3, [r3, #4]
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d3b5      	bcc.n	8004b14 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	7c1a      	ldrb	r2, [r3, #16]
 8004bb0:	f88d 2000 	strb.w	r2, [sp]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb8:	f005 fdd6 	bl	800a768 <USB_DevInit>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e013      	b.n	8004bf6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7b1b      	ldrb	r3, [r3, #12]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d102      	bne.n	8004bea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f80b 	bl	8004c00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f005 ff91 	bl	800ab16 <USB_DevDisconnect>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	10000003 	.word	0x10000003

08004c48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c50:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00a      	beq.n	8004c72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c5c:	4b16      	ldr	r3, [pc, #88]	@ (8004cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d001      	beq.n	8004c6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e01f      	b.n	8004cae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e01d      	b.n	8004cae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c72:	4b11      	ldr	r3, [pc, #68]	@ (8004cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	490f      	ldr	r1, [pc, #60]	@ (8004cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c82:	f7fc fd31 	bl	80016e8 <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c88:	e009      	b.n	8004c9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c8a:	f7fc fd2d 	bl	80016e8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c98:	d901      	bls.n	8004c9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e007      	b.n	8004cae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c9e:	4b06      	ldr	r3, [pc, #24]	@ (8004cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004caa:	d1ee      	bne.n	8004c8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	58024800 	.word	0x58024800

08004cbc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a04      	ldr	r2, [pc, #16]	@ (8004cd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cca:	60d3      	str	r3, [r2, #12]
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	58024800 	.word	0x58024800

08004cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	@ 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f000 bc48 	b.w	8005580 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8088 	beq.w	8004e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfe:	4b99      	ldr	r3, [pc, #612]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d08:	4b96      	ldr	r3, [pc, #600]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d007      	beq.n	8004d24 <HAL_RCC_OscConfig+0x48>
 8004d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d16:	2b18      	cmp	r3, #24
 8004d18:	d111      	bne.n	8004d3e <HAL_RCC_OscConfig+0x62>
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d10c      	bne.n	8004d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	4b8f      	ldr	r3, [pc, #572]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d06d      	beq.n	8004e0c <HAL_RCC_OscConfig+0x130>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d169      	bne.n	8004e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f000 bc21 	b.w	8005580 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d46:	d106      	bne.n	8004d56 <HAL_RCC_OscConfig+0x7a>
 8004d48:	4b86      	ldr	r3, [pc, #536]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a85      	ldr	r2, [pc, #532]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	e02e      	b.n	8004db4 <HAL_RCC_OscConfig+0xd8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x9c>
 8004d5e:	4b81      	ldr	r3, [pc, #516]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a80      	ldr	r2, [pc, #512]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e01d      	b.n	8004db4 <HAL_RCC_OscConfig+0xd8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCC_OscConfig+0xc0>
 8004d82:	4b78      	ldr	r3, [pc, #480]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a77      	ldr	r2, [pc, #476]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b75      	ldr	r3, [pc, #468]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a74      	ldr	r2, [pc, #464]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCC_OscConfig+0xd8>
 8004d9c:	4b71      	ldr	r3, [pc, #452]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a70      	ldr	r2, [pc, #448]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b6e      	ldr	r3, [pc, #440]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6d      	ldr	r2, [pc, #436]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fc fc94 	bl	80016e8 <HAL_GetTick>
 8004dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fc fc90 	bl	80016e8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	@ 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e3d4      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dd6:	4b63      	ldr	r3, [pc, #396]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0xe8>
 8004de2:	e014      	b.n	8004e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fc fc80 	bl	80016e8 <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fc fc7c 	bl	80016e8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	@ 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e3c0      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dfe:	4b59      	ldr	r3, [pc, #356]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x110>
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80ca 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1c:	4b51      	ldr	r3, [pc, #324]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e26:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_RCC_OscConfig+0x166>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2b18      	cmp	r3, #24
 8004e36:	d156      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x20a>
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d151      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e42:	4b48      	ldr	r3, [pc, #288]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_RCC_OscConfig+0x17e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e392      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e5a:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 0219 	bic.w	r2, r3, #25
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	493f      	ldr	r1, [pc, #252]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fc fc3c 	bl	80016e8 <HAL_GetTick>
 8004e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e74:	f7fc fc38 	bl	80016e8 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e37c      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e86:	4b37      	ldr	r3, [pc, #220]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	f7fc fc59 	bl	8001748 <HAL_GetREVID>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d817      	bhi.n	8004ed0 <HAL_RCC_OscConfig+0x1f4>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	d108      	bne.n	8004eba <HAL_RCC_OscConfig+0x1de>
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb8:	e07a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b2a      	ldr	r3, [pc, #168]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	031b      	lsls	r3, r3, #12
 8004ec8:	4926      	ldr	r1, [pc, #152]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ece:	e06f      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed0:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	4921      	ldr	r1, [pc, #132]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee4:	e064      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d047      	beq.n	8004f7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eee:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 0219 	bic.w	r2, r3, #25
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	491a      	ldr	r1, [pc, #104]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fc fbf2 	bl	80016e8 <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f08:	f7fc fbee 	bl	80016e8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e332      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f1a:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f26:	f7fc fc0f 	bl	8001748 <HAL_GetREVID>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d819      	bhi.n	8004f68 <HAL_RCC_OscConfig+0x28c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b40      	cmp	r3, #64	@ 0x40
 8004f3a:	d108      	bne.n	8004f4e <HAL_RCC_OscConfig+0x272>
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f44:	4a07      	ldr	r2, [pc, #28]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4a:	6053      	str	r3, [r2, #4]
 8004f4c:	e030      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
 8004f4e:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	031b      	lsls	r3, r3, #12
 8004f5c:	4901      	ldr	r1, [pc, #4]	@ (8004f64 <HAL_RCC_OscConfig+0x288>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
 8004f62:	e025      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
 8004f64:	58024400 	.word	0x58024400
 8004f68:	4b9a      	ldr	r3, [pc, #616]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	4997      	ldr	r1, [pc, #604]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	e018      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7e:	4b95      	ldr	r3, [pc, #596]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a94      	ldr	r2, [pc, #592]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fc fbad 	bl	80016e8 <HAL_GetTick>
 8004f8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fc fba9 	bl	80016e8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e2ed      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fa4:	4b8b      	ldr	r3, [pc, #556]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80a9 	beq.w	8005110 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fbe:	4b85      	ldr	r3, [pc, #532]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fc8:	4b82      	ldr	r3, [pc, #520]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d007      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x308>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b18      	cmp	r3, #24
 8004fd8:	d13a      	bne.n	8005050 <HAL_RCC_OscConfig+0x374>
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d135      	bne.n	8005050 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_OscConfig+0x320>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	2b80      	cmp	r3, #128	@ 0x80
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e2c1      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ffc:	f7fc fba4 	bl	8001748 <HAL_GetREVID>
 8005000:	4603      	mov	r3, r0
 8005002:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005006:	4293      	cmp	r3, r2
 8005008:	d817      	bhi.n	800503a <HAL_RCC_OscConfig+0x35e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	2b20      	cmp	r3, #32
 8005010:	d108      	bne.n	8005024 <HAL_RCC_OscConfig+0x348>
 8005012:	4b70      	ldr	r3, [pc, #448]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800501a:	4a6e      	ldr	r2, [pc, #440]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800501c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005020:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005022:	e075      	b.n	8005110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005024:	4b6b      	ldr	r3, [pc, #428]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	069b      	lsls	r3, r3, #26
 8005032:	4968      	ldr	r1, [pc, #416]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005038:	e06a      	b.n	8005110 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800503a:	4b66      	ldr	r3, [pc, #408]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	4962      	ldr	r1, [pc, #392]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800504a:	4313      	orrs	r3, r2
 800504c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800504e:	e05f      	b.n	8005110 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d042      	beq.n	80050de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005058:	4b5e      	ldr	r3, [pc, #376]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a5d      	ldr	r2, [pc, #372]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800505e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc fb40 	bl	80016e8 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800506c:	f7fc fb3c 	bl	80016e8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e280      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800507e:	4b55      	ldr	r3, [pc, #340]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800508a:	f7fc fb5d 	bl	8001748 <HAL_GetREVID>
 800508e:	4603      	mov	r3, r0
 8005090:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005094:	4293      	cmp	r3, r2
 8005096:	d817      	bhi.n	80050c8 <HAL_RCC_OscConfig+0x3ec>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	2b20      	cmp	r3, #32
 800509e:	d108      	bne.n	80050b2 <HAL_RCC_OscConfig+0x3d6>
 80050a0:	4b4c      	ldr	r3, [pc, #304]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050a8:	4a4a      	ldr	r2, [pc, #296]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050ae:	6053      	str	r3, [r2, #4]
 80050b0:	e02e      	b.n	8005110 <HAL_RCC_OscConfig+0x434>
 80050b2:	4b48      	ldr	r3, [pc, #288]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	069b      	lsls	r3, r3, #26
 80050c0:	4944      	ldr	r1, [pc, #272]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
 80050c6:	e023      	b.n	8005110 <HAL_RCC_OscConfig+0x434>
 80050c8:	4b42      	ldr	r3, [pc, #264]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	493f      	ldr	r1, [pc, #252]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	60cb      	str	r3, [r1, #12]
 80050dc:	e018      	b.n	8005110 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050de:	4b3d      	ldr	r3, [pc, #244]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a3c      	ldr	r2, [pc, #240]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80050e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fc fafd 	bl	80016e8 <HAL_GetTick>
 80050ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050f2:	f7fc faf9 	bl	80016e8 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e23d      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005104:	4b33      	ldr	r3, [pc, #204]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f0      	bne.n	80050f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d036      	beq.n	800518a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d019      	beq.n	8005158 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005124:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005128:	4a2a      	ldr	r2, [pc, #168]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fc fada 	bl	80016e8 <HAL_GetTick>
 8005134:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005138:	f7fc fad6 	bl	80016e8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e21a      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800514a:	4b22      	ldr	r3, [pc, #136]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800514c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x45c>
 8005156:	e018      	b.n	800518a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005158:	4b1e      	ldr	r3, [pc, #120]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800515a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515c:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005164:	f7fc fac0 	bl	80016e8 <HAL_GetTick>
 8005168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800516c:	f7fc fabc 	bl	80016e8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e200      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 8005180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d039      	beq.n	800520a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01c      	beq.n	80051d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800519e:	4b0d      	ldr	r3, [pc, #52]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a0c      	ldr	r2, [pc, #48]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80051a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051aa:	f7fc fa9d 	bl	80016e8 <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b2:	f7fc fa99 	bl	80016e8 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e1dd      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051c4:	4b03      	ldr	r3, [pc, #12]	@ (80051d4 <HAL_RCC_OscConfig+0x4f8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x4d6>
 80051d0:	e01b      	b.n	800520a <HAL_RCC_OscConfig+0x52e>
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051d8:	4b9b      	ldr	r3, [pc, #620]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a9a      	ldr	r2, [pc, #616]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80051de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051e4:	f7fc fa80 	bl	80016e8 <HAL_GetTick>
 80051e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ec:	f7fc fa7c 	bl	80016e8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e1c0      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051fe:	4b92      	ldr	r3, [pc, #584]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8081 	beq.w	800531a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005218:	4b8c      	ldr	r3, [pc, #560]	@ (800544c <HAL_RCC_OscConfig+0x770>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a8b      	ldr	r2, [pc, #556]	@ (800544c <HAL_RCC_OscConfig+0x770>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005224:	f7fc fa60 	bl	80016e8 <HAL_GetTick>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fc fa5c 	bl	80016e8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	@ 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e1a0      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523e:	4b83      	ldr	r3, [pc, #524]	@ (800544c <HAL_RCC_OscConfig+0x770>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d106      	bne.n	8005260 <HAL_RCC_OscConfig+0x584>
 8005252:	4b7d      	ldr	r3, [pc, #500]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	4a7c      	ldr	r2, [pc, #496]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	@ 0x70
 800525e:	e02d      	b.n	80052bc <HAL_RCC_OscConfig+0x5e0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10c      	bne.n	8005282 <HAL_RCC_OscConfig+0x5a6>
 8005268:	4b77      	ldr	r3, [pc, #476]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	4a76      	ldr	r2, [pc, #472]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	6713      	str	r3, [r2, #112]	@ 0x70
 8005274:	4b74      	ldr	r3, [pc, #464]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	4a73      	ldr	r2, [pc, #460]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800527a:	f023 0304 	bic.w	r3, r3, #4
 800527e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005280:	e01c      	b.n	80052bc <HAL_RCC_OscConfig+0x5e0>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x5c8>
 800528a:	4b6f      	ldr	r3, [pc, #444]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a6e      	ldr	r2, [pc, #440]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	4b6c      	ldr	r3, [pc, #432]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	4a6b      	ldr	r2, [pc, #428]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a2:	e00b      	b.n	80052bc <HAL_RCC_OscConfig+0x5e0>
 80052a4:	4b68      	ldr	r3, [pc, #416]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	4a67      	ldr	r2, [pc, #412]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b0:	4b65      	ldr	r3, [pc, #404]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b4:	4a64      	ldr	r2, [pc, #400]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80052b6:	f023 0304 	bic.w	r3, r3, #4
 80052ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fc fa10 	bl	80016e8 <HAL_GetTick>
 80052c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052cc:	f7fc fa0c 	bl	80016e8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e14e      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e2:	4b59      	ldr	r3, [pc, #356]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ee      	beq.n	80052cc <HAL_RCC_OscConfig+0x5f0>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fc f9fa 	bl	80016e8 <HAL_GetTick>
 80052f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fc f9f6 	bl	80016e8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e138      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800530e:	4b4e      	ldr	r3, [pc, #312]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ee      	bne.n	80052f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 812d 	beq.w	800557e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005324:	4b48      	ldr	r3, [pc, #288]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800532c:	2b18      	cmp	r3, #24
 800532e:	f000 80bd 	beq.w	80054ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	2b02      	cmp	r3, #2
 8005338:	f040 809e 	bne.w	8005478 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533c:	4b42      	ldr	r3, [pc, #264]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a41      	ldr	r2, [pc, #260]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fc f9ce 	bl	80016e8 <HAL_GetTick>
 800534c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005350:	f7fc f9ca 	bl	80016e8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e10e      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005362:	4b39      	ldr	r3, [pc, #228]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800536e:	4b36      	ldr	r3, [pc, #216]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005372:	4b37      	ldr	r3, [pc, #220]	@ (8005450 <HAL_RCC_OscConfig+0x774>)
 8005374:	4013      	ands	r3, r2
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800537e:	0112      	lsls	r2, r2, #4
 8005380:	430a      	orrs	r2, r1
 8005382:	4931      	ldr	r1, [pc, #196]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	628b      	str	r3, [r1, #40]	@ 0x28
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	3b01      	subs	r3, #1
 800538e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005396:	3b01      	subs	r3, #1
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	b29b      	uxth	r3, r3
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	3b01      	subs	r3, #1
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	3b01      	subs	r3, #1
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053b8:	4923      	ldr	r1, [pc, #140]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80053be:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4a21      	ldr	r2, [pc, #132]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ce:	4b21      	ldr	r3, [pc, #132]	@ (8005454 <HAL_RCC_OscConfig+0x778>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053d6:	00d2      	lsls	r2, r2, #3
 80053d8:	491b      	ldr	r1, [pc, #108]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80053de:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	f023 020c 	bic.w	r2, r3, #12
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	4917      	ldr	r1, [pc, #92]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053f0:	4b15      	ldr	r3, [pc, #84]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	f023 0202 	bic.w	r2, r3, #2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fc:	4912      	ldr	r1, [pc, #72]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005402:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4a10      	ldr	r2, [pc, #64]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800540c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540e:	4b0e      	ldr	r3, [pc, #56]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	4a0d      	ldr	r2, [pc, #52]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005426:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a07      	ldr	r2, [pc, #28]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005432:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a04      	ldr	r2, [pc, #16]	@ (8005448 <HAL_RCC_OscConfig+0x76c>)
 8005438:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800543c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fc f953 	bl	80016e8 <HAL_GetTick>
 8005442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005444:	e011      	b.n	800546a <HAL_RCC_OscConfig+0x78e>
 8005446:	bf00      	nop
 8005448:	58024400 	.word	0x58024400
 800544c:	58024800 	.word	0x58024800
 8005450:	fffffc0c 	.word	0xfffffc0c
 8005454:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005458:	f7fc f946 	bl	80016e8 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e08a      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800546a:	4b47      	ldr	r3, [pc, #284]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x77c>
 8005476:	e082      	b.n	800557e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005478:	4b43      	ldr	r3, [pc, #268]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a42      	ldr	r2, [pc, #264]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 800547e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fc f930 	bl	80016e8 <HAL_GetTick>
 8005488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548c:	f7fc f92c 	bl	80016e8 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e070      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800549e:	4b3a      	ldr	r3, [pc, #232]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x7b0>
 80054aa:	e068      	b.n	800557e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054ac:	4b36      	ldr	r3, [pc, #216]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054b2:	4b35      	ldr	r3, [pc, #212]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d031      	beq.n	8005524 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0203 	and.w	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d12a      	bne.n	8005524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d122      	bne.n	8005524 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d11a      	bne.n	8005524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	0a5b      	lsrs	r3, r3, #9
 80054f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d111      	bne.n	8005524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	0c1b      	lsrs	r3, r3, #16
 8005504:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d108      	bne.n	8005524 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e02b      	b.n	8005580 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005528:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 800552a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005532:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	429a      	cmp	r2, r3
 800553c:	d01f      	beq.n	800557e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 8005540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005542:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800554a:	f7fc f8cd 	bl	80016e8 <HAL_GetTick>
 800554e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005550:	bf00      	nop
 8005552:	f7fc f8c9 	bl	80016e8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	4293      	cmp	r3, r2
 800555c:	d0f9      	beq.n	8005552 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800555e:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 8005560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005562:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCC_OscConfig+0x8b0>)
 8005564:	4013      	ands	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800556a:	00d2      	lsls	r2, r2, #3
 800556c:	4906      	ldr	r1, [pc, #24]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 800556e:	4313      	orrs	r3, r2
 8005570:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005572:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	4a04      	ldr	r2, [pc, #16]	@ (8005588 <HAL_RCC_OscConfig+0x8ac>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3730      	adds	r7, #48	@ 0x30
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	58024400 	.word	0x58024400
 800558c:	ffff0007 	.word	0xffff0007

08005590 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e19c      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a4:	4b8a      	ldr	r3, [pc, #552]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d910      	bls.n	80055d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b87      	ldr	r3, [pc, #540]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 020f 	bic.w	r2, r3, #15
 80055ba:	4985      	ldr	r1, [pc, #532]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b83      	ldr	r3, [pc, #524]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e184      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	4b7b      	ldr	r3, [pc, #492]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d908      	bls.n	8005602 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055f0:	4b78      	ldr	r3, [pc, #480]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	4975      	ldr	r1, [pc, #468]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	4b70      	ldr	r3, [pc, #448]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800561a:	429a      	cmp	r2, r3
 800561c:	d908      	bls.n	8005630 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800561e:	4b6d      	ldr	r3, [pc, #436]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	496a      	ldr	r1, [pc, #424]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800562c:	4313      	orrs	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	4b64      	ldr	r3, [pc, #400]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800564c:	4b61      	ldr	r3, [pc, #388]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	495e      	ldr	r1, [pc, #376]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800565a:	4313      	orrs	r3, r2
 800565c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	4b59      	ldr	r3, [pc, #356]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005676:	429a      	cmp	r2, r3
 8005678:	d908      	bls.n	800568c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800567a:	4b56      	ldr	r3, [pc, #344]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4953      	ldr	r1, [pc, #332]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005688:	4313      	orrs	r3, r2
 800568a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	4b4d      	ldr	r3, [pc, #308]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d908      	bls.n	80056ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a8:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f023 020f 	bic.w	r2, r3, #15
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4947      	ldr	r1, [pc, #284]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d055      	beq.n	8005772 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80056c6:	4b43      	ldr	r3, [pc, #268]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	4940      	ldr	r1, [pc, #256]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056e0:	4b3c      	ldr	r3, [pc, #240]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d121      	bne.n	8005730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0f6      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d107      	bne.n	8005708 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056f8:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d115      	bne.n	8005730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0ea      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005710:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0de      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005720:	4b2c      	ldr	r3, [pc, #176]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0d6      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005730:	4b28      	ldr	r3, [pc, #160]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f023 0207 	bic.w	r2, r3, #7
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4925      	ldr	r1, [pc, #148]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800573e:	4313      	orrs	r3, r2
 8005740:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005742:	f7fb ffd1 	bl	80016e8 <HAL_GetTick>
 8005746:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005748:	e00a      	b.n	8005760 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800574a:	f7fb ffcd 	bl	80016e8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0be      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005760:	4b1c      	ldr	r3, [pc, #112]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	429a      	cmp	r2, r3
 8005770:	d1eb      	bne.n	800574a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d010      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	429a      	cmp	r2, r3
 800578c:	d208      	bcs.n	80057a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800578e:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f023 020f 	bic.w	r2, r3, #15
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	490e      	ldr	r1, [pc, #56]	@ (80057d4 <HAL_RCC_ClockConfig+0x244>)
 800579c:	4313      	orrs	r3, r2
 800579e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d214      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b08      	ldr	r3, [pc, #32]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 020f 	bic.w	r2, r3, #15
 80057b6:	4906      	ldr	r1, [pc, #24]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b04      	ldr	r3, [pc, #16]	@ (80057d0 <HAL_RCC_ClockConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e086      	b.n	80058de <HAL_RCC_ClockConfig+0x34e>
 80057d0:	52002000 	.word	0x52002000
 80057d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	4b3f      	ldr	r3, [pc, #252]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d208      	bcs.n	8005806 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057f4:	4b3c      	ldr	r3, [pc, #240]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	4939      	ldr	r1, [pc, #228]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005802:	4313      	orrs	r3, r2
 8005804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	4b34      	ldr	r3, [pc, #208]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800581e:	429a      	cmp	r2, r3
 8005820:	d208      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005822:	4b31      	ldr	r3, [pc, #196]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	492e      	ldr	r1, [pc, #184]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005830:	4313      	orrs	r3, r2
 8005832:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d010      	beq.n	8005862 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	4b28      	ldr	r3, [pc, #160]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800584c:	429a      	cmp	r2, r3
 800584e:	d208      	bcs.n	8005862 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005850:	4b25      	ldr	r3, [pc, #148]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	4922      	ldr	r1, [pc, #136]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 800585e:	4313      	orrs	r3, r2
 8005860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d010      	beq.n	8005890 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800587a:	429a      	cmp	r2, r3
 800587c:	d208      	bcs.n	8005890 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800587e:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	4917      	ldr	r1, [pc, #92]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 800588c:	4313      	orrs	r3, r2
 800588e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005890:	f000 f834 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	4912      	ldr	r1, [pc, #72]	@ (80058ec <HAL_RCC_ClockConfig+0x35c>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058ae:	4b0e      	ldr	r3, [pc, #56]	@ (80058e8 <HAL_RCC_ClockConfig+0x358>)
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	4a0d      	ldr	r2, [pc, #52]	@ (80058ec <HAL_RCC_ClockConfig+0x35c>)
 80058b8:	5cd3      	ldrb	r3, [r2, r3]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	4a0a      	ldr	r2, [pc, #40]	@ (80058f0 <HAL_RCC_ClockConfig+0x360>)
 80058c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058c8:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <HAL_RCC_ClockConfig+0x364>)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80058ce:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <HAL_RCC_ClockConfig+0x368>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fb febe 	bl	8001654 <HAL_InitTick>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	58024400 	.word	0x58024400
 80058ec:	0800b5e4 	.word	0x0800b5e4
 80058f0:	24000008 	.word	0x24000008
 80058f4:	24000004 	.word	0x24000004
 80058f8:	2400000c 	.word	0x2400000c

080058fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	@ 0x24
 8005900:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005902:	4bb3      	ldr	r3, [pc, #716]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800590a:	2b18      	cmp	r3, #24
 800590c:	f200 8155 	bhi.w	8005bba <HAL_RCC_GetSysClockFreq+0x2be>
 8005910:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800597d 	.word	0x0800597d
 800591c:	08005bbb 	.word	0x08005bbb
 8005920:	08005bbb 	.word	0x08005bbb
 8005924:	08005bbb 	.word	0x08005bbb
 8005928:	08005bbb 	.word	0x08005bbb
 800592c:	08005bbb 	.word	0x08005bbb
 8005930:	08005bbb 	.word	0x08005bbb
 8005934:	08005bbb 	.word	0x08005bbb
 8005938:	080059a3 	.word	0x080059a3
 800593c:	08005bbb 	.word	0x08005bbb
 8005940:	08005bbb 	.word	0x08005bbb
 8005944:	08005bbb 	.word	0x08005bbb
 8005948:	08005bbb 	.word	0x08005bbb
 800594c:	08005bbb 	.word	0x08005bbb
 8005950:	08005bbb 	.word	0x08005bbb
 8005954:	08005bbb 	.word	0x08005bbb
 8005958:	080059a9 	.word	0x080059a9
 800595c:	08005bbb 	.word	0x08005bbb
 8005960:	08005bbb 	.word	0x08005bbb
 8005964:	08005bbb 	.word	0x08005bbb
 8005968:	08005bbb 	.word	0x08005bbb
 800596c:	08005bbb 	.word	0x08005bbb
 8005970:	08005bbb 	.word	0x08005bbb
 8005974:	08005bbb 	.word	0x08005bbb
 8005978:	080059af 	.word	0x080059af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597c:	4b94      	ldr	r3, [pc, #592]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005988:	4b91      	ldr	r3, [pc, #580]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	08db      	lsrs	r3, r3, #3
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	4a90      	ldr	r2, [pc, #576]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800599a:	e111      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800599c:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800599e:	61bb      	str	r3, [r7, #24]
      break;
 80059a0:	e10e      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059a2:	4b8d      	ldr	r3, [pc, #564]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059a4:	61bb      	str	r3, [r7, #24]
      break;
 80059a6:	e10b      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059a8:	4b8c      	ldr	r3, [pc, #560]	@ (8005bdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059aa:	61bb      	str	r3, [r7, #24]
      break;
 80059ac:	e108      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059ae:	4b88      	ldr	r3, [pc, #544]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059b8:	4b85      	ldr	r3, [pc, #532]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	091b      	lsrs	r3, r3, #4
 80059be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059c4:	4b82      	ldr	r3, [pc, #520]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059ce:	4b80      	ldr	r3, [pc, #512]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80e1 	beq.w	8005bb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	f000 8083 	beq.w	8005b00 <HAL_RCC_GetSysClockFreq+0x204>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	f200 80a1 	bhi.w	8005b44 <HAL_RCC_GetSysClockFreq+0x248>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x114>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d056      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a0e:	e099      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a10:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02d      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	08db      	lsrs	r3, r3, #3
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	4a6b      	ldr	r2, [pc, #428]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b62      	ldr	r3, [pc, #392]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a76:	e087      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005be4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b51      	ldr	r3, [pc, #324]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aba:	e065      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b40      	ldr	r3, [pc, #256]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ae2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afe:	e043      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005bec <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b42:	e021      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005be8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005be0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b88:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8c:	0a5b      	lsrs	r3, r3, #9
 8005b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b92:	3301      	adds	r3, #1
 8005b94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 3a90 	vmov	r3, s15
 8005bb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bb2:	e005      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
      break;
 8005bb8:	e002      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005bba:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bbc:	61bb      	str	r3, [r7, #24]
      break;
 8005bbe:	bf00      	nop
  }

  return sysclockfreq;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3724      	adds	r7, #36	@ 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	03d09000 	.word	0x03d09000
 8005bd8:	003d0900 	.word	0x003d0900
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	46000000 	.word	0x46000000
 8005be4:	4c742400 	.word	0x4c742400
 8005be8:	4a742400 	.word	0x4a742400
 8005bec:	4af42400 	.word	0x4af42400

08005bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bf6:	f7ff fe81 	bl	80058fc <HAL_RCC_GetSysClockFreq>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	490f      	ldr	r1, [pc, #60]	@ (8005c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c08:	5ccb      	ldrb	r3, [r1, r3]
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c14:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	4a09      	ldr	r2, [pc, #36]	@ (8005c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2a:	4a07      	ldr	r2, [pc, #28]	@ (8005c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c2e:	4a07      	ldr	r2, [pc, #28]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c34:	4b04      	ldr	r3, [pc, #16]	@ (8005c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c36:	681b      	ldr	r3, [r3, #0]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	0800b5e4 	.word	0x0800b5e4
 8005c48:	24000008 	.word	0x24000008
 8005c4c:	24000004 	.word	0x24000004

08005c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c54:	f7ff ffcc 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4904      	ldr	r1, [pc, #16]	@ (8005c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	58024400 	.word	0x58024400
 8005c78:	0800b5e4 	.word	0x0800b5e4

08005c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c80:	f7ff ffb6 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4904      	ldr	r1, [pc, #16]	@ (8005ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	0800b5e4 	.word	0x0800b5e4

08005ca8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b0ca      	sub	sp, #296	@ 0x128
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ccc:	2500      	movs	r5, #0
 8005cce:	ea54 0305 	orrs.w	r3, r4, r5
 8005cd2:	d049      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cde:	d02f      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ce0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ce4:	d828      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cea:	d01a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cf0:	d822      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cfc:	e01c      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfe:	4bb8      	ldr	r3, [pc, #736]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	4ab7      	ldr	r2, [pc, #732]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d0a:	e01a      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	3308      	adds	r3, #8
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 fc8f 	bl	8007638 <RCCEx_PLL2_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d20:	e00f      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	3328      	adds	r3, #40	@ 0x28
 8005d28:	2102      	movs	r1, #2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 fd36 	bl	800779c <RCCEx_PLL3_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d36:	e004      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d3e:	e000      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d4a:	4ba5      	ldr	r3, [pc, #660]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d58:	4aa1      	ldr	r2, [pc, #644]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d74:	f04f 0900 	mov.w	r9, #0
 8005d78:	ea58 0309 	orrs.w	r3, r8, r9
 8005d7c:	d047      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d82a      	bhi.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d88:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005da5 	.word	0x08005da5
 8005d94:	08005db3 	.word	0x08005db3
 8005d98:	08005dc9 	.word	0x08005dc9
 8005d9c:	08005de7 	.word	0x08005de7
 8005da0:	08005de7 	.word	0x08005de7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da4:	4b8e      	ldr	r3, [pc, #568]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	4a8d      	ldr	r2, [pc, #564]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005db0:	e01a      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	3308      	adds	r3, #8
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fc3c 	bl	8007638 <RCCEx_PLL2_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc6:	e00f      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dcc:	3328      	adds	r3, #40	@ 0x28
 8005dce:	2100      	movs	r1, #0
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fce3 	bl	800779c <RCCEx_PLL3_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ddc:	e004      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de4:	e000      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005df0:	4b7b      	ldr	r3, [pc, #492]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df4:	f023 0107 	bic.w	r1, r3, #7
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfe:	4a78      	ldr	r2, [pc, #480]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e04:	e003      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e1a:	f04f 0b00 	mov.w	fp, #0
 8005e1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e22:	d04c      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e2e:	d030      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e34:	d829      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e38:	d02d      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e3c:	d825      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e3e:	2b80      	cmp	r3, #128	@ 0x80
 8005e40:	d018      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e42:	2b80      	cmp	r3, #128	@ 0x80
 8005e44:	d821      	bhi.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e4a:	2b40      	cmp	r3, #64	@ 0x40
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e4e:	e01c      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4b63      	ldr	r3, [pc, #396]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4a62      	ldr	r2, [pc, #392]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e01c      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fbe6 	bl	8007638 <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e72:	e011      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	3328      	adds	r3, #40	@ 0x28
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fc8d 	bl	800779c <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e88:	e006      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eae:	4a4c      	ldr	r2, [pc, #304]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eb4:	e003      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005eca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005ed4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4313      	orrs	r3, r2
 8005edc:	d053      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ee6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eea:	d035      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ef0:	d82e      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ef2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ef6:	d031      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ef8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005efc:	d828      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f02:	d01a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f08:	d822      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f12:	d007      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f14:	e01c      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f16:	4b32      	ldr	r3, [pc, #200]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	4a31      	ldr	r2, [pc, #196]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f22:	e01c      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f28:	3308      	adds	r3, #8
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 fb83 	bl	8007638 <RCCEx_PLL2_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f38:	e011      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	3328      	adds	r3, #40	@ 0x28
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fc2a 	bl	800779c <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f4e:	e006      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f56:	e002      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f66:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f76:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f96:	2300      	movs	r3, #0
 8005f98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	d056      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fb2:	d038      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fb8:	d831      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fbe:	d034      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005fc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fc4:	d82b      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fca:	d01d      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd0:	d825      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fdc:	e01f      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe4:	4ba2      	ldr	r3, [pc, #648]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	4aa1      	ldr	r2, [pc, #644]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ff0:	e01c      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 fb1c 	bl	8007638 <RCCEx_PLL2_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006006:	e011      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600c:	3328      	adds	r3, #40	@ 0x28
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f001 fbc3 	bl	800779c <RCCEx_PLL3_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800601c:	e006      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006024:	e002      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006026:	bf00      	nop
 8006028:	e000      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800602a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006034:	4b8e      	ldr	r3, [pc, #568]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006038:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800603c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006040:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006044:	4a8a      	ldr	r2, [pc, #552]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006046:	430b      	orrs	r3, r1
 8006048:	6593      	str	r3, [r2, #88]	@ 0x58
 800604a:	e003      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006064:	2300      	movs	r3, #0
 8006066:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800606a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800606e:	460b      	mov	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	d03a      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607a:	2b30      	cmp	r3, #48	@ 0x30
 800607c:	d01f      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800607e:	2b30      	cmp	r3, #48	@ 0x30
 8006080:	d819      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006082:	2b20      	cmp	r3, #32
 8006084:	d00c      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d815      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d019      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800608e:	2b10      	cmp	r3, #16
 8006090:	d111      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006092:	4b77      	ldr	r3, [pc, #476]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	4a76      	ldr	r2, [pc, #472]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800609c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800609e:	e011      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	3308      	adds	r3, #8
 80060a6:	2102      	movs	r1, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fac5 	bl	8007638 <RCCEx_PLL2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060b4:	e006      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060be:	bf00      	nop
 80060c0:	e000      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060cc:	4b68      	ldr	r3, [pc, #416]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060da:	4a65      	ldr	r2, [pc, #404]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060dc:	430b      	orrs	r3, r1
 80060de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060e0:	e003      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80060f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060fa:	2300      	movs	r3, #0
 80060fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006100:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006104:	460b      	mov	r3, r1
 8006106:	4313      	orrs	r3, r2
 8006108:	d051      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006114:	d035      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800611a:	d82e      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800611c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006120:	d031      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006126:	d828      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800612c:	d01a      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800612e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006132:	d822      	bhi.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613c:	d007      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800613e:	e01c      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006140:	4b4b      	ldr	r3, [pc, #300]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	4a4a      	ldr	r2, [pc, #296]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800614c:	e01c      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006152:	3308      	adds	r3, #8
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f001 fa6e 	bl	8007638 <RCCEx_PLL2_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006162:	e011      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	3328      	adds	r3, #40	@ 0x28
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f001 fb15 	bl	800779c <RCCEx_PLL3_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006178:	e006      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006180:	e002      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006190:	4b37      	ldr	r3, [pc, #220]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006194:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619e:	4a34      	ldr	r2, [pc, #208]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061a4:	e003      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061be:	2300      	movs	r3, #0
 80061c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061c8:	460b      	mov	r3, r1
 80061ca:	4313      	orrs	r3, r2
 80061cc:	d056      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061d8:	d033      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80061da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061de:	d82c      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061e4:	d02f      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80061e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061ea:	d826      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061f0:	d02b      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80061f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061f6:	d820      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fc:	d012      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80061fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006202:	d81a      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d022      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800620c:	d115      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006212:	3308      	adds	r3, #8
 8006214:	2101      	movs	r1, #1
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fa0e 	bl	8007638 <RCCEx_PLL2_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006222:	e015      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006228:	3328      	adds	r3, #40	@ 0x28
 800622a:	2101      	movs	r1, #1
 800622c:	4618      	mov	r0, r3
 800622e:	f001 fab5 	bl	800779c <RCCEx_PLL3_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006238:	e00a      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006242:	bf00      	nop
 8006244:	e004      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006246:	bf00      	nop
 8006248:	e002      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800624a:	bf00      	nop
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800624e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10d      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006258:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800625a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800625c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006266:	4a02      	ldr	r2, [pc, #8]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006268:	430b      	orrs	r3, r1
 800626a:	6513      	str	r3, [r2, #80]	@ 0x50
 800626c:	e006      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800626e:	bf00      	nop
 8006270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006292:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d055      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a8:	d033      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80062aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062ae:	d82c      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d02f      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d826      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c0:	d02b      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80062c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c6:	d820      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062cc:	d012      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80062ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d2:	d81a      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d022      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062dc:	d115      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3308      	adds	r3, #8
 80062e4:	2101      	movs	r1, #1
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 f9a6 	bl	8007638 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062f2:	e015      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f8:	3328      	adds	r3, #40	@ 0x28
 80062fa:	2101      	movs	r1, #1
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fa4d 	bl	800779c <RCCEx_PLL3_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006308:	e00a      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006312:	bf00      	nop
 8006314:	e004      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800631e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006328:	4ba3      	ldr	r3, [pc, #652]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006338:	4a9f      	ldr	r2, [pc, #636]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800633a:	430b      	orrs	r3, r1
 800633c:	6593      	str	r3, [r2, #88]	@ 0x58
 800633e:	e003      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006358:	2300      	movs	r3, #0
 800635a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800635e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006362:	460b      	mov	r3, r1
 8006364:	4313      	orrs	r3, r2
 8006366:	d037      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006372:	d00e      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006378:	d816      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d018      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800637e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006382:	d111      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006384:	4b8c      	ldr	r3, [pc, #560]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	4a8b      	ldr	r2, [pc, #556]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800638a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800638e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006390:	e00f      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	3308      	adds	r3, #8
 8006398:	2101      	movs	r1, #1
 800639a:	4618      	mov	r0, r3
 800639c:	f001 f94c 	bl	8007638 <RCCEx_PLL2_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063a6:	e004      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ae:	e000      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80063b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063ba:	4b7f      	ldr	r3, [pc, #508]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c8:	4a7b      	ldr	r2, [pc, #492]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80063ce:	e003      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e8:	2300      	movs	r3, #0
 80063ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d039      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d81c      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006445 	.word	0x08006445
 800640c:	08006419 	.word	0x08006419
 8006410:	08006427 	.word	0x08006427
 8006414:	08006445 	.word	0x08006445
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006418:	4b67      	ldr	r3, [pc, #412]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	4a66      	ldr	r2, [pc, #408]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800641e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006424:	e00f      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	3308      	adds	r3, #8
 800642c:	2102      	movs	r1, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f902 	bl	8007638 <RCCEx_PLL2_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800644e:	4b5a      	ldr	r3, [pc, #360]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006452:	f023 0103 	bic.w	r1, r3, #3
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645c:	4a56      	ldr	r2, [pc, #344]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800645e:	430b      	orrs	r3, r1
 8006460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006462:	e003      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006482:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	f000 809f 	beq.w	80065cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800648e:	4b4b      	ldr	r3, [pc, #300]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4a      	ldr	r2, [pc, #296]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800649a:	f7fb f925 	bl	80016e8 <HAL_GetTick>
 800649e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064a2:	e00b      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a4:	f7fb f920 	bl	80016e8 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b64      	cmp	r3, #100	@ 0x64
 80064b2:	d903      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ba:	e005      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064bc:	4b3f      	ldr	r3, [pc, #252]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0ed      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80064c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d179      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064d0:	4b39      	ldr	r3, [pc, #228]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064dc:	4053      	eors	r3, r2
 80064de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d015      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064e6:	4b34      	ldr	r3, [pc, #208]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064f2:	4b31      	ldr	r3, [pc, #196]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f6:	4a30      	ldr	r2, [pc, #192]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064fe:	4b2e      	ldr	r3, [pc, #184]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	4a2d      	ldr	r2, [pc, #180]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006508:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800650a:	4a2b      	ldr	r2, [pc, #172]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800650c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006510:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800651a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800651e:	d118      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fb f8e2 	bl	80016e8 <HAL_GetTick>
 8006524:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006528:	e00d      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fb f8dd 	bl	80016e8 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800653a:	429a      	cmp	r2, r3
 800653c:	d903      	bls.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006544:	e005      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006546:	4b1c      	ldr	r3, [pc, #112]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0eb      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006556:	2b00      	cmp	r3, #0
 8006558:	d129      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800656a:	d10e      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800656c:	4b12      	ldr	r3, [pc, #72]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800657c:	091a      	lsrs	r2, r3, #4
 800657e:	4b10      	ldr	r3, [pc, #64]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006580:	4013      	ands	r3, r2
 8006582:	4a0d      	ldr	r2, [pc, #52]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006584:	430b      	orrs	r3, r1
 8006586:	6113      	str	r3, [r2, #16]
 8006588:	e005      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800658a:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	4a0a      	ldr	r2, [pc, #40]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006594:	6113      	str	r3, [r2, #16]
 8006596:	4b08      	ldr	r3, [pc, #32]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006598:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a6:	4a04      	ldr	r2, [pc, #16]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ac:	e00e      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80065b6:	e009      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80065b8:	58024400 	.word	0x58024400
 80065bc:	58024800 	.word	0x58024800
 80065c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f002 0301 	and.w	r3, r2, #1
 80065d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065dc:	2300      	movs	r3, #0
 80065de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f000 8089 	beq.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065f4:	2b28      	cmp	r3, #40	@ 0x28
 80065f6:	d86b      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	080066d9 	.word	0x080066d9
 8006604:	080066d1 	.word	0x080066d1
 8006608:	080066d1 	.word	0x080066d1
 800660c:	080066d1 	.word	0x080066d1
 8006610:	080066d1 	.word	0x080066d1
 8006614:	080066d1 	.word	0x080066d1
 8006618:	080066d1 	.word	0x080066d1
 800661c:	080066d1 	.word	0x080066d1
 8006620:	080066a5 	.word	0x080066a5
 8006624:	080066d1 	.word	0x080066d1
 8006628:	080066d1 	.word	0x080066d1
 800662c:	080066d1 	.word	0x080066d1
 8006630:	080066d1 	.word	0x080066d1
 8006634:	080066d1 	.word	0x080066d1
 8006638:	080066d1 	.word	0x080066d1
 800663c:	080066d1 	.word	0x080066d1
 8006640:	080066bb 	.word	0x080066bb
 8006644:	080066d1 	.word	0x080066d1
 8006648:	080066d1 	.word	0x080066d1
 800664c:	080066d1 	.word	0x080066d1
 8006650:	080066d1 	.word	0x080066d1
 8006654:	080066d1 	.word	0x080066d1
 8006658:	080066d1 	.word	0x080066d1
 800665c:	080066d1 	.word	0x080066d1
 8006660:	080066d9 	.word	0x080066d9
 8006664:	080066d1 	.word	0x080066d1
 8006668:	080066d1 	.word	0x080066d1
 800666c:	080066d1 	.word	0x080066d1
 8006670:	080066d1 	.word	0x080066d1
 8006674:	080066d1 	.word	0x080066d1
 8006678:	080066d1 	.word	0x080066d1
 800667c:	080066d1 	.word	0x080066d1
 8006680:	080066d9 	.word	0x080066d9
 8006684:	080066d1 	.word	0x080066d1
 8006688:	080066d1 	.word	0x080066d1
 800668c:	080066d1 	.word	0x080066d1
 8006690:	080066d1 	.word	0x080066d1
 8006694:	080066d1 	.word	0x080066d1
 8006698:	080066d1 	.word	0x080066d1
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080066d9 	.word	0x080066d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a8:	3308      	adds	r3, #8
 80066aa:	2101      	movs	r1, #1
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 ffc3 	bl	8007638 <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066b8:	e00f      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3328      	adds	r3, #40	@ 0x28
 80066c0:	2101      	movs	r1, #1
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f86a 	bl	800779c <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066ce:	e004      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80066d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066e2:	4bbf      	ldr	r3, [pc, #764]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066f0:	4abb      	ldr	r2, [pc, #748]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80066f6:	e003      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f002 0302 	and.w	r3, r2, #2
 800670c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006710:	2300      	movs	r3, #0
 8006712:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006716:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800671a:	460b      	mov	r3, r1
 800671c:	4313      	orrs	r3, r2
 800671e:	d041      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006726:	2b05      	cmp	r3, #5
 8006728:	d824      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800672a:	a201      	add	r2, pc, #4	@ (adr r2, 8006730 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	0800677d 	.word	0x0800677d
 8006734:	08006749 	.word	0x08006749
 8006738:	0800675f 	.word	0x0800675f
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	3308      	adds	r3, #8
 800674e:	2101      	movs	r1, #1
 8006750:	4618      	mov	r0, r3
 8006752:	f000 ff71 	bl	8007638 <RCCEx_PLL2_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800675c:	e00f      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	3328      	adds	r3, #40	@ 0x28
 8006764:	2101      	movs	r1, #1
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f818 	bl	800779c <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800677c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006786:	4b96      	ldr	r3, [pc, #600]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678a:	f023 0107 	bic.w	r1, r3, #7
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006794:	4a92      	ldr	r2, [pc, #584]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006796:	430b      	orrs	r3, r1
 8006798:	6553      	str	r3, [r2, #84]	@ 0x54
 800679a:	e003      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f002 0304 	and.w	r3, r2, #4
 80067b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d044      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067cc:	2b05      	cmp	r3, #5
 80067ce:	d825      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80067d0:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	08006825 	.word	0x08006825
 80067dc:	080067f1 	.word	0x080067f1
 80067e0:	08006807 	.word	0x08006807
 80067e4:	08006825 	.word	0x08006825
 80067e8:	08006825 	.word	0x08006825
 80067ec:	08006825 	.word	0x08006825
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f4:	3308      	adds	r3, #8
 80067f6:	2101      	movs	r1, #1
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 ff1d 	bl	8007638 <RCCEx_PLL2_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006804:	e00f      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	3328      	adds	r3, #40	@ 0x28
 800680c:	2101      	movs	r1, #1
 800680e:	4618      	mov	r0, r3
 8006810:	f000 ffc4 	bl	800779c <RCCEx_PLL3_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800681a:	e004      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006822:	e000      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800682e:	4b6c      	ldr	r3, [pc, #432]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006832:	f023 0107 	bic.w	r1, r3, #7
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800683e:	4a68      	ldr	r2, [pc, #416]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006840:	430b      	orrs	r3, r1
 8006842:	6593      	str	r3, [r2, #88]	@ 0x58
 8006844:	e003      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f002 0320 	and.w	r3, r2, #32
 800685a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800685e:	2300      	movs	r3, #0
 8006860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006868:	460b      	mov	r3, r1
 800686a:	4313      	orrs	r3, r2
 800686c:	d055      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800686e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800687a:	d033      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800687c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006880:	d82c      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006886:	d02f      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688c:	d826      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800688e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006892:	d02b      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006894:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006898:	d820      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800689a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800689e:	d012      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a4:	d81a      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d022      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80068aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ae:	d115      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	3308      	adds	r3, #8
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 febd 	bl	8007638 <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068c4:	e015      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	3328      	adds	r3, #40	@ 0x28
 80068cc:	2102      	movs	r1, #2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 ff64 	bl	800779c <RCCEx_PLL3_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068da:	e00a      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068e2:	e006      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068e4:	bf00      	nop
 80068e6:	e004      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068fa:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690a:	4a35      	ldr	r2, [pc, #212]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006910:	e003      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800692a:	2300      	movs	r3, #0
 800692c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006930:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d058      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006942:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006946:	d033      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006948:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800694c:	d82c      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006952:	d02f      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006958:	d826      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800695a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800695e:	d02b      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006964:	d820      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800696a:	d012      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800696c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006970:	d81a      	bhi.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d022      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697a:	d115      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006980:	3308      	adds	r3, #8
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fe57 	bl	8007638 <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006990:	e015      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006996:	3328      	adds	r3, #40	@ 0x28
 8006998:	2102      	movs	r1, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fefe 	bl	800779c <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069a6:	e00a      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069ae:	e006      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069b0:	bf00      	nop
 80069b2:	e004      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10e      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069c6:	4b06      	ldr	r3, [pc, #24]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069d6:	4a02      	ldr	r2, [pc, #8]	@ (80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	6593      	str	r3, [r2, #88]	@ 0x58
 80069dc:	e006      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80069de:	bf00      	nop
 80069e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80069f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069fc:	2300      	movs	r3, #0
 80069fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a02:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a06:	460b      	mov	r3, r1
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	d055      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a18:	d033      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a1e:	d82c      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a24:	d02f      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2a:	d826      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a30:	d02b      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a36:	d820      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a3c:	d012      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a42:	d81a      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d022      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a4c:	d115      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	3308      	adds	r3, #8
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fdee 	bl	8007638 <RCCEx_PLL2_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a62:	e015      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	3328      	adds	r3, #40	@ 0x28
 8006a6a:	2102      	movs	r1, #2
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fe95 	bl	800779c <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a78:	e00a      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a80:	e006      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a82:	bf00      	nop
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a86:	bf00      	nop
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a98:	4ba1      	ldr	r3, [pc, #644]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006aa8:	4a9d      	ldr	r2, [pc, #628]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f002 0308 	and.w	r3, r2, #8
 8006ac4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ace:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	d01e      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aea:	3328      	adds	r3, #40	@ 0x28
 8006aec:	2102      	movs	r1, #2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fe54 	bl	800779c <RCCEx_PLL3_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b00:	4b87      	ldr	r3, [pc, #540]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b10:	4a83      	ldr	r2, [pc, #524]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f002 0310 	and.w	r3, r2, #16
 8006b22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b26:	2300      	movs	r3, #0
 8006b28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b2c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b30:	460b      	mov	r3, r1
 8006b32:	4313      	orrs	r3, r2
 8006b34:	d01e      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b42:	d10c      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	3328      	adds	r3, #40	@ 0x28
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fe25 	bl	800779c <RCCEx_PLL3_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b5e:	4b70      	ldr	r3, [pc, #448]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b70:	430b      	orrs	r3, r1
 8006b72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d03e      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba0:	d022      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba6:	d81b      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bb0:	d00b      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006bb2:	e015      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fd3b 	bl	8007638 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	3328      	adds	r3, #40	@ 0x28
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fde2 	bl	800779c <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c02:	4a47      	ldr	r2, [pc, #284]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c20:	2300      	movs	r3, #0
 8006c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c3a:	d01f      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c40:	d818      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c4c:	d007      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c4e:	e011      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c50:	4b33      	ldr	r3, [pc, #204]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	4a32      	ldr	r2, [pc, #200]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c5c:	e00f      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	3328      	adds	r3, #40	@ 0x28
 8006c64:	2101      	movs	r1, #1
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fd98 	bl	800779c <RCCEx_PLL3_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c72:	e004      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c86:	4b26      	ldr	r3, [pc, #152]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c96:	4a22      	ldr	r2, [pc, #136]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d034      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd0:	d007      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006cd2:	e011      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd4:	4b12      	ldr	r3, [pc, #72]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ce0:	e00e      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fca4 	bl	8007638 <RCCEx_PLL2_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d08:	4b05      	ldr	r3, [pc, #20]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d16:	4a02      	ldr	r2, [pc, #8]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d1e:	bf00      	nop
 8006d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d00c      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4c:	3328      	adds	r3, #40	@ 0x28
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fd23 	bl	800779c <RCCEx_PLL3_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d70:	2300      	movs	r3, #0
 8006d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d038      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d8a:	d018      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d90:	d811      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d96:	d014      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d9c:	d80b      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d011      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da6:	d106      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da8:	4bc3      	ldr	r3, [pc, #780]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	4ac2      	ldr	r2, [pc, #776]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006db4:	e008      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dbc:	e004      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dd0:	4bb9      	ldr	r3, [pc, #740]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de0:	4ab5      	ldr	r2, [pc, #724]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de2:	430b      	orrs	r3, r1
 8006de4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006de6:	e003      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dfe:	2300      	movs	r3, #0
 8006e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e06:	460b      	mov	r3, r1
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e0c:	4baa      	ldr	r3, [pc, #680]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1a:	4aa7      	ldr	r2, [pc, #668]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e2e:	2300      	movs	r3, #0
 8006e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e36:	460b      	mov	r3, r1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d00a      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e3c:	4b9e      	ldr	r3, [pc, #632]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e4c:	4a9a      	ldr	r2, [pc, #616]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e60:	2300      	movs	r3, #0
 8006e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e6e:	4b92      	ldr	r3, [pc, #584]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e7c:	4a8e      	ldr	r2, [pc, #568]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e90:	2300      	movs	r3, #0
 8006e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	d00e      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e9e:	4b86      	ldr	r3, [pc, #536]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4a85      	ldr	r2, [pc, #532]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ea4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ea8:	6113      	str	r3, [r2, #16]
 8006eaa:	4b83      	ldr	r3, [pc, #524]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eac:	6919      	ldr	r1, [r3, #16]
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006eb6:	4a80      	ldr	r2, [pc, #512]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eca:	2300      	movs	r3, #0
 8006ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ece:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	d009      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ed8:	4b77      	ldr	r3, [pc, #476]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006edc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee6:	4a74      	ldr	r2, [pc, #464]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d00a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f08:	4b6b      	ldr	r3, [pc, #428]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f18:	4a67      	ldr	r2, [pc, #412]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	2100      	movs	r1, #0
 8006f28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f34:	460b      	mov	r3, r1
 8006f36:	4313      	orrs	r3, r2
 8006f38:	d011      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	3308      	adds	r3, #8
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fb78 	bl	8007638 <RCCEx_PLL2_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	2100      	movs	r1, #0
 8006f68:	6239      	str	r1, [r7, #32]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d011      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	3308      	adds	r3, #8
 8006f80:	2101      	movs	r1, #1
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fb58 	bl	8007638 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	61b9      	str	r1, [r7, #24]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	d011      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fb38 	bl	8007638 <RCCEx_PLL2_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6139      	str	r1, [r7, #16]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	d011      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	3328      	adds	r3, #40	@ 0x28
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fbca 	bl	800779c <RCCEx_PLL3_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	2100      	movs	r1, #0
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d011      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	3328      	adds	r3, #40	@ 0x28
 8007040:	2101      	movs	r1, #1
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fbaa 	bl	800779c <RCCEx_PLL3_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800704e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	2100      	movs	r1, #0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007074:	460b      	mov	r3, r1
 8007076:	4313      	orrs	r3, r2
 8007078:	d011      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	3328      	adds	r3, #40	@ 0x28
 8007080:	2102      	movs	r1, #2
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fb8a 	bl	800779c <RCCEx_PLL3_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800708e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800709e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e000      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80070b2:	46bd      	mov	sp, r7
 80070b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b8:	58024400 	.word	0x58024400

080070bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070c0:	f7fe fd96 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 80070c4:	4602      	mov	r2, r0
 80070c6:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	091b      	lsrs	r3, r3, #4
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4904      	ldr	r1, [pc, #16]	@ (80070e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070d2:	5ccb      	ldrb	r3, [r1, r3]
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	58024400 	.word	0x58024400
 80070e4:	0800b5e4 	.word	0x0800b5e4

080070e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b089      	sub	sp, #36	@ 0x24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f0:	4ba1      	ldr	r3, [pc, #644]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070fa:	4b9f      	ldr	r3, [pc, #636]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fe:	0b1b      	lsrs	r3, r3, #12
 8007100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007104:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007106:	4b9c      	ldr	r3, [pc, #624]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	091b      	lsrs	r3, r3, #4
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007112:	4b99      	ldr	r3, [pc, #612]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 8111 	beq.w	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b02      	cmp	r3, #2
 800713a:	f000 8083 	beq.w	8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b02      	cmp	r3, #2
 8007142:	f200 80a1 	bhi.w	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d056      	beq.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007152:	e099      	b.n	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007154:	4b88      	ldr	r3, [pc, #544]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02d      	beq.n	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007160:	4b85      	ldr	r3, [pc, #532]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	08db      	lsrs	r3, r3, #3
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	4a84      	ldr	r2, [pc, #528]	@ (800737c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
 8007170:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b7b      	ldr	r3, [pc, #492]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a03 	vldr	s12, [r7, #12]
 800719e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ba:	e087      	b.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fe:	e065      	b.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b59      	ldr	r3, [pc, #356]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a03 	vldr	s12, [r7, #12]
 8007226:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007242:	e043      	b.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800738c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b48      	ldr	r3, [pc, #288]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007286:	e021      	b.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b37      	ldr	r3, [pc, #220]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	0a5b      	lsrs	r3, r3, #9
 80072d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f2:	ee17 2a90 	vmov	r2, s15
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007314:	edd7 6a07 	vldr	s13, [r7, #28]
 8007318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007320:	ee17 2a90 	vmov	r2, s15
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007328:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	0e1b      	lsrs	r3, r3, #24
 800732e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007342:	edd7 6a07 	vldr	s13, [r7, #28]
 8007346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734e:	ee17 2a90 	vmov	r2, s15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007356:	e008      	b.n	800736a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	609a      	str	r2, [r3, #8]
}
 800736a:	bf00      	nop
 800736c:	3724      	adds	r7, #36	@ 0x24
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	58024400 	.word	0x58024400
 800737c:	03d09000 	.word	0x03d09000
 8007380:	46000000 	.word	0x46000000
 8007384:	4c742400 	.word	0x4c742400
 8007388:	4a742400 	.word	0x4a742400
 800738c:	4af42400 	.word	0x4af42400

08007390 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007390:	b480      	push	{r7}
 8007392:	b089      	sub	sp, #36	@ 0x24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007398:	4ba1      	ldr	r3, [pc, #644]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739c:	f003 0303 	and.w	r3, r3, #3
 80073a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073a2:	4b9f      	ldr	r3, [pc, #636]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	0d1b      	lsrs	r3, r3, #20
 80073a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073ae:	4b9c      	ldr	r3, [pc, #624]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	0a1b      	lsrs	r3, r3, #8
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073ba:	4b99      	ldr	r3, [pc, #612]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073be:	08db      	lsrs	r3, r3, #3
 80073c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	fb02 f303 	mul.w	r3, r2, r3
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8111 	beq.w	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	f000 8083 	beq.w	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	f200 80a1 	bhi.w	8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d056      	beq.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073fa:	e099      	b.n	8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073fc:	4b88      	ldr	r3, [pc, #544]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d02d      	beq.n	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007408:	4b85      	ldr	r3, [pc, #532]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	08db      	lsrs	r3, r3, #3
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	4a84      	ldr	r2, [pc, #528]	@ (8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
 8007418:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b7b      	ldr	r3, [pc, #492]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a03 	vldr	s12, [r7, #12]
 8007446:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007462:	e087      	b.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800762c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b6a      	ldr	r3, [pc, #424]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a03 	vldr	s12, [r7, #12]
 800748a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a6:	e065      	b.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b59      	ldr	r3, [pc, #356]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ea:	e043      	b.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b48      	ldr	r3, [pc, #288]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007512:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752e:	e021      	b.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b37      	ldr	r3, [pc, #220]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a03 	vldr	s12, [r7, #12]
 8007556:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007572:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007574:	4b2a      	ldr	r3, [pc, #168]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	0a5b      	lsrs	r3, r3, #9
 800757a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800758a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800758e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759a:	ee17 2a90 	vmov	r2, s15
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	0c1b      	lsrs	r3, r3, #16
 80075a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c8:	ee17 2a90 	vmov	r2, s15
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075d0:	4b13      	ldr	r3, [pc, #76]	@ (8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	0e1b      	lsrs	r3, r3, #24
 80075d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075fe:	e008      	b.n	8007612 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	609a      	str	r2, [r3, #8]
}
 8007612:	bf00      	nop
 8007614:	3724      	adds	r7, #36	@ 0x24
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	58024400 	.word	0x58024400
 8007624:	03d09000 	.word	0x03d09000
 8007628:	46000000 	.word	0x46000000
 800762c:	4c742400 	.word	0x4c742400
 8007630:	4a742400 	.word	0x4a742400
 8007634:	4af42400 	.word	0x4af42400

08007638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007646:	4b53      	ldr	r3, [pc, #332]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	2b03      	cmp	r3, #3
 8007650:	d101      	bne.n	8007656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e099      	b.n	800778a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007656:	4b4f      	ldr	r3, [pc, #316]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a4e      	ldr	r2, [pc, #312]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800765c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007662:	f7fa f841 	bl	80016e8 <HAL_GetTick>
 8007666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007668:	e008      	b.n	800767c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800766a:	f7fa f83d 	bl	80016e8 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e086      	b.n	800778a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800767c:	4b45      	ldr	r3, [pc, #276]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f0      	bne.n	800766a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007688:	4b42      	ldr	r3, [pc, #264]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	031b      	lsls	r3, r3, #12
 8007696:	493f      	ldr	r1, [pc, #252]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007698:	4313      	orrs	r3, r2
 800769a:	628b      	str	r3, [r1, #40]	@ 0x28
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	025b      	lsls	r3, r3, #9
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	061b      	lsls	r3, r3, #24
 80076c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076cc:	4931      	ldr	r1, [pc, #196]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076d2:	4b30      	ldr	r3, [pc, #192]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	492d      	ldr	r1, [pc, #180]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	f023 0220 	bic.w	r2, r3, #32
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	4928      	ldr	r1, [pc, #160]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076f6:	4b27      	ldr	r3, [pc, #156]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	4a26      	ldr	r2, [pc, #152]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	f023 0310 	bic.w	r3, r3, #16
 8007700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007702:	4b24      	ldr	r3, [pc, #144]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007706:	4b24      	ldr	r3, [pc, #144]	@ (8007798 <RCCEx_PLL2_Config+0x160>)
 8007708:	4013      	ands	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	69d2      	ldr	r2, [r2, #28]
 800770e:	00d2      	lsls	r2, r2, #3
 8007710:	4920      	ldr	r1, [pc, #128]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007716:	4b1f      	ldr	r3, [pc, #124]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	4a1e      	ldr	r2, [pc, #120]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800771c:	f043 0310 	orr.w	r3, r3, #16
 8007720:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007728:	4b1a      	ldr	r3, [pc, #104]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	4a19      	ldr	r2, [pc, #100]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800772e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007732:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007734:	e00f      	b.n	8007756 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d106      	bne.n	800774a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800773c:	4b15      	ldr	r3, [pc, #84]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	4a14      	ldr	r2, [pc, #80]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007746:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007748:	e005      	b.n	8007756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800774a:	4b12      	ldr	r3, [pc, #72]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	4a11      	ldr	r2, [pc, #68]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007754:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007756:	4b0f      	ldr	r3, [pc, #60]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a0e      	ldr	r2, [pc, #56]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800775c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007762:	f7f9 ffc1 	bl	80016e8 <HAL_GetTick>
 8007766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007768:	e008      	b.n	800777c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800776a:	f7f9 ffbd 	bl	80016e8 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e006      	b.n	800778a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800777c:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <RCCEx_PLL2_Config+0x15c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0f0      	beq.n	800776a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	ffff0007 	.word	0xffff0007

0800779c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077aa:	4b53      	ldr	r3, [pc, #332]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d101      	bne.n	80077ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e099      	b.n	80078ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077ba:	4b4f      	ldr	r3, [pc, #316]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a4e      	ldr	r2, [pc, #312]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c6:	f7f9 ff8f 	bl	80016e8 <HAL_GetTick>
 80077ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077cc:	e008      	b.n	80077e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077ce:	f7f9 ff8b 	bl	80016e8 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d901      	bls.n	80077e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e086      	b.n	80078ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077e0:	4b45      	ldr	r3, [pc, #276]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f0      	bne.n	80077ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077ec:	4b42      	ldr	r3, [pc, #264]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	051b      	lsls	r3, r3, #20
 80077fa:	493f      	ldr	r1, [pc, #252]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	3b01      	subs	r3, #1
 8007806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	3b01      	subs	r3, #1
 8007810:	025b      	lsls	r3, r3, #9
 8007812:	b29b      	uxth	r3, r3
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	3b01      	subs	r3, #1
 800781c:	041b      	lsls	r3, r3, #16
 800781e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	3b01      	subs	r3, #1
 800782a:	061b      	lsls	r3, r3, #24
 800782c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007830:	4931      	ldr	r1, [pc, #196]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007832:	4313      	orrs	r3, r2
 8007834:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007836:	4b30      	ldr	r3, [pc, #192]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	492d      	ldr	r1, [pc, #180]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007844:	4313      	orrs	r3, r2
 8007846:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007848:	4b2b      	ldr	r3, [pc, #172]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	4928      	ldr	r1, [pc, #160]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007856:	4313      	orrs	r3, r2
 8007858:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800785a:	4b27      	ldr	r3, [pc, #156]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4a26      	ldr	r2, [pc, #152]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007866:	4b24      	ldr	r3, [pc, #144]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800786a:	4b24      	ldr	r3, [pc, #144]	@ (80078fc <RCCEx_PLL3_Config+0x160>)
 800786c:	4013      	ands	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	69d2      	ldr	r2, [r2, #28]
 8007872:	00d2      	lsls	r2, r2, #3
 8007874:	4920      	ldr	r1, [pc, #128]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800787a:	4b1f      	ldr	r3, [pc, #124]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	4a1e      	ldr	r2, [pc, #120]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007884:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800788c:	4b1a      	ldr	r3, [pc, #104]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 800788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007890:	4a19      	ldr	r2, [pc, #100]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 8007892:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007898:	e00f      	b.n	80078ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d106      	bne.n	80078ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078a0:	4b15      	ldr	r3, [pc, #84]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	4a14      	ldr	r2, [pc, #80]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078ac:	e005      	b.n	80078ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078ae:	4b12      	ldr	r3, [pc, #72]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	4a11      	ldr	r2, [pc, #68]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078ba:	4b0f      	ldr	r3, [pc, #60]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a0e      	ldr	r2, [pc, #56]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c6:	f7f9 ff0f 	bl	80016e8 <HAL_GetTick>
 80078ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078cc:	e008      	b.n	80078e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078ce:	f7f9 ff0b 	bl	80016e8 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e006      	b.n	80078ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078e0:	4b05      	ldr	r3, [pc, #20]	@ (80078f8 <RCCEx_PLL3_Config+0x15c>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0f0      	beq.n	80078ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	58024400 	.word	0x58024400
 80078fc:	ffff0007 	.word	0xffff0007

08007900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e042      	b.n	8007998 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007918:	2b00      	cmp	r3, #0
 800791a:	d106      	bne.n	800792a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7f9 fc35 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2224      	movs	r2, #36	@ 0x24
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fad8 	bl	8008f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fd6d 	bl	8008430 <UART_SetConfig>
 8007956:	4603      	mov	r3, r0
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e01b      	b.n	8007998 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800796e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800797e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fb57 	bl	8009044 <UART_CheckIdleState>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	@ 0x28
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d17b      	bne.n	8007ab2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_UART_Transmit+0x26>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e074      	b.n	8007ab4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2221      	movs	r2, #33	@ 0x21
 80079d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079da:	f7f9 fe85 	bl	80016e8 <HAL_GetTick>
 80079de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f8:	d108      	bne.n	8007a0c <HAL_UART_Transmit+0x6c>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	e003      	b.n	8007a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a14:	e030      	b.n	8007a78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2180      	movs	r1, #128	@ 0x80
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 fbb9 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d005      	beq.n	8007a38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e03d      	b.n	8007ab4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	3302      	adds	r3, #2
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e007      	b.n	8007a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1c8      	bne.n	8007a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2140      	movs	r1, #64	@ 0x40
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f001 fb82 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e006      	b.n	8007ab4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e000      	b.n	8007ab4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ab2:	2302      	movs	r3, #2
  }
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b091      	sub	sp, #68	@ 0x44
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d178      	bne.n	8007bc6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_UART_Transmit_IT+0x24>
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e071      	b.n	8007bc8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	88fa      	ldrh	r2, [r7, #6]
 8007af6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2221      	movs	r2, #33	@ 0x21
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b18:	d12a      	bne.n	8007b70 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b22:	d107      	bne.n	8007b34 <HAL_UART_Transmit_IT+0x78>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4a29      	ldr	r2, [pc, #164]	@ (8007bd4 <HAL_UART_Transmit_IT+0x118>)
 8007b30:	679a      	str	r2, [r3, #120]	@ 0x78
 8007b32:	e002      	b.n	8007b3a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4a28      	ldr	r2, [pc, #160]	@ (8007bd8 <HAL_UART_Transmit_IT+0x11c>)
 8007b38:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007b50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b5a:	637a      	str	r2, [r7, #52]	@ 0x34
 8007b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <HAL_UART_Transmit_IT+0x7e>
 8007b6e:	e028      	b.n	8007bc2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b78:	d107      	bne.n	8007b8a <HAL_UART_Transmit_IT+0xce>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4a15      	ldr	r2, [pc, #84]	@ (8007bdc <HAL_UART_Transmit_IT+0x120>)
 8007b86:	679a      	str	r2, [r3, #120]	@ 0x78
 8007b88:	e002      	b.n	8007b90 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4a14      	ldr	r2, [pc, #80]	@ (8007be0 <HAL_UART_Transmit_IT+0x124>)
 8007b8e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bae:	623b      	str	r3, [r7, #32]
 8007bb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	69f9      	ldr	r1, [r7, #28]
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e6      	bne.n	8007b90 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e000      	b.n	8007bc8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007bc6:	2302      	movs	r3, #2
  }
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3744      	adds	r7, #68	@ 0x44
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	0800980b 	.word	0x0800980b
 8007bd8:	0800972b 	.word	0x0800972b
 8007bdc:	08009669 	.word	0x08009669
 8007be0:	080095b1 	.word	0x080095b1

08007be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	@ 0x28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d137      	bne.n	8007c6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <HAL_UART_Receive_IT+0x24>
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e030      	b.n	8007c6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a18      	ldr	r2, [pc, #96]	@ (8007c78 <HAL_UART_Receive_IT+0x94>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d01f      	beq.n	8007c5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d018      	beq.n	8007c5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	613b      	str	r3, [r7, #16]
   return(result);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	6a3a      	ldr	r2, [r7, #32]
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e6      	bne.n	8007c2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f001 fb06 	bl	8009274 <UART_Start_Receive_IT>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	e000      	b.n	8007c6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c6c:	2302      	movs	r3, #2
  }
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3728      	adds	r7, #40	@ 0x28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	58000c00 	.word	0x58000c00

08007c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b0ba      	sub	sp, #232	@ 0xe8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ca6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007caa:	4013      	ands	r3, r2
 8007cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11b      	bne.n	8007cf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d015      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d105      	bne.n	8007cdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d009      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8377 	beq.w	80083d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
      }
      return;
 8007cee:	e371      	b.n	80083d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8123 	beq.w	8007f40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8007f34 <HAL_UART_IRQHandler+0x2b8>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d0a:	4b8b      	ldr	r3, [pc, #556]	@ (8007f38 <HAL_UART_IRQHandler+0x2bc>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8116 	beq.w	8007f40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d011      	beq.n	8007d44 <HAL_UART_IRQHandler+0xc8>
 8007d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2201      	movs	r2, #1
 8007d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3a:	f043 0201 	orr.w	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d011      	beq.n	8007d74 <HAL_UART_IRQHandler+0xf8>
 8007d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2202      	movs	r2, #2
 8007d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6a:	f043 0204 	orr.w	r2, r3, #4
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d011      	beq.n	8007da4 <HAL_UART_IRQHandler+0x128>
 8007d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2204      	movs	r2, #4
 8007d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9a:	f043 0202 	orr.w	r2, r3, #2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007dbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8007f34 <HAL_UART_IRQHandler+0x2b8>)
 8007dc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dd6:	f043 0208 	orr.w	r2, r3, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d012      	beq.n	8007e12 <HAL_UART_IRQHandler+0x196>
 8007dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00c      	beq.n	8007e12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 82dd 	beq.w	80083d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d013      	beq.n	8007e52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d005      	beq.n	8007e76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d054      	beq.n	8007f20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fb1e 	bl	80094b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e86:	2b40      	cmp	r3, #64	@ 0x40
 8007e88:	d146      	bne.n	8007f18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1d9      	bne.n	8007e8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d017      	beq.n	8007f10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ee6:	4a15      	ldr	r2, [pc, #84]	@ (8007f3c <HAL_UART_IRQHandler+0x2c0>)
 8007ee8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fa f877 	bl	8001fe4 <HAL_DMA_Abort_IT>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d019      	beq.n	8007f30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0e:	e00f      	b.n	8007f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa77 	bl	8008404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f16:	e00b      	b.n	8007f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa73 	bl	8008404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1e:	e007      	b.n	8007f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa6f 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007f2e:	e253      	b.n	80083d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f30:	bf00      	nop
    return;
 8007f32:	e251      	b.n	80083d8 <HAL_UART_IRQHandler+0x75c>
 8007f34:	10000001 	.word	0x10000001
 8007f38:	04000120 	.word	0x04000120
 8007f3c:	08009585 	.word	0x08009585

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	f040 81e7 	bne.w	8008318 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 81e0 	beq.w	8008318 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 81d9 	beq.w	8008318 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2210      	movs	r2, #16
 8007f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f78:	2b40      	cmp	r3, #64	@ 0x40
 8007f7a:	f040 8151 	bne.w	8008220 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a96      	ldr	r2, [pc, #600]	@ (80081e0 <HAL_UART_IRQHandler+0x564>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d068      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a93      	ldr	r2, [pc, #588]	@ (80081e4 <HAL_UART_IRQHandler+0x568>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d061      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a91      	ldr	r2, [pc, #580]	@ (80081e8 <HAL_UART_IRQHandler+0x56c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d05a      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a8e      	ldr	r2, [pc, #568]	@ (80081ec <HAL_UART_IRQHandler+0x570>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d053      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a8c      	ldr	r2, [pc, #560]	@ (80081f0 <HAL_UART_IRQHandler+0x574>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d04c      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a89      	ldr	r2, [pc, #548]	@ (80081f4 <HAL_UART_IRQHandler+0x578>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d045      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a87      	ldr	r2, [pc, #540]	@ (80081f8 <HAL_UART_IRQHandler+0x57c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d03e      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a84      	ldr	r2, [pc, #528]	@ (80081fc <HAL_UART_IRQHandler+0x580>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d037      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a82      	ldr	r2, [pc, #520]	@ (8008200 <HAL_UART_IRQHandler+0x584>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d030      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a7f      	ldr	r2, [pc, #508]	@ (8008204 <HAL_UART_IRQHandler+0x588>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d029      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a7d      	ldr	r2, [pc, #500]	@ (8008208 <HAL_UART_IRQHandler+0x58c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d022      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a7a      	ldr	r2, [pc, #488]	@ (800820c <HAL_UART_IRQHandler+0x590>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d01b      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a78      	ldr	r2, [pc, #480]	@ (8008210 <HAL_UART_IRQHandler+0x594>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d014      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a75      	ldr	r2, [pc, #468]	@ (8008214 <HAL_UART_IRQHandler+0x598>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00d      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a73      	ldr	r2, [pc, #460]	@ (8008218 <HAL_UART_IRQHandler+0x59c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d006      	beq.n	800805e <HAL_UART_IRQHandler+0x3e2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a70      	ldr	r2, [pc, #448]	@ (800821c <HAL_UART_IRQHandler+0x5a0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d106      	bne.n	800806c <HAL_UART_IRQHandler+0x3f0>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	b29b      	uxth	r3, r3
 800806a:	e005      	b.n	8008078 <HAL_UART_IRQHandler+0x3fc>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	b29b      	uxth	r3, r3
 8008078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800807c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 81ab 	beq.w	80083dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800808c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008090:	429a      	cmp	r2, r3
 8008092:	f080 81a3 	bcs.w	80083dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800809c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ac:	f000 8087 	beq.w	80081be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1da      	bne.n	80080b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800810a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3308      	adds	r3, #8
 800811a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800811e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e1      	bne.n	80080fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800814c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3308      	adds	r3, #8
 8008156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800815a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800815c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e3      	bne.n	8008136 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800818a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800818c:	f023 0310 	bic.w	r3, r3, #16
 8008190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800819e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e4      	bne.n	800817c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7f9 fbf5 	bl	80019a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f91d 	bl	8008418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081de:	e0fd      	b.n	80083dc <HAL_UART_IRQHandler+0x760>
 80081e0:	40020010 	.word	0x40020010
 80081e4:	40020028 	.word	0x40020028
 80081e8:	40020040 	.word	0x40020040
 80081ec:	40020058 	.word	0x40020058
 80081f0:	40020070 	.word	0x40020070
 80081f4:	40020088 	.word	0x40020088
 80081f8:	400200a0 	.word	0x400200a0
 80081fc:	400200b8 	.word	0x400200b8
 8008200:	40020410 	.word	0x40020410
 8008204:	40020428 	.word	0x40020428
 8008208:	40020440 	.word	0x40020440
 800820c:	40020458 	.word	0x40020458
 8008210:	40020470 	.word	0x40020470
 8008214:	40020488 	.word	0x40020488
 8008218:	400204a0 	.word	0x400204a0
 800821c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800822c:	b29b      	uxth	r3, r3
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80cf 	beq.w	80083e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 80ca 	beq.w	80083e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800825a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800826e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008270:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800827c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e4      	bne.n	800824c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	623b      	str	r3, [r7, #32]
   return(result);
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	4b55      	ldr	r3, [pc, #340]	@ (80083ec <HAL_UART_IRQHandler+0x770>)
 8008296:	4013      	ands	r3, r2
 8008298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3308      	adds	r3, #8
 80082a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80082a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e3      	bne.n	8008282 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	60fb      	str	r3, [r7, #12]
   return(result);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0310 	bic.w	r3, r3, #16
 80082e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082f0:	61fb      	str	r3, [r7, #28]
 80082f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	69b9      	ldr	r1, [r7, #24]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	617b      	str	r3, [r7, #20]
   return(result);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e4      	bne.n	80082ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800830a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f881 	bl	8008418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008316:	e063      	b.n	80083e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00e      	beq.n	8008342 <HAL_UART_IRQHandler+0x6c6>
 8008324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f002 f822 	bl	800a384 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008340:	e051      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834a:	2b00      	cmp	r3, #0
 800834c:	d014      	beq.n	8008378 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800834e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800835e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d008      	beq.n	8008378 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800836a:	2b00      	cmp	r3, #0
 800836c:	d03a      	beq.n	80083e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	4798      	blx	r3
    }
    return;
 8008376:	e035      	b.n	80083e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <HAL_UART_IRQHandler+0x71c>
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 faaf 	bl	80098f4 <UART_EndTransmit_IT>
    return;
 8008396:	e026      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800839c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d009      	beq.n	80083b8 <HAL_UART_IRQHandler+0x73c>
 80083a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fffb 	bl	800a3ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083b6:	e016      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80083b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d010      	beq.n	80083e6 <HAL_UART_IRQHandler+0x76a>
 80083c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da0c      	bge.n	80083e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 ffe3 	bl	800a398 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083d2:	e008      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80083d4:	bf00      	nop
 80083d6:	e006      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80083d8:	bf00      	nop
 80083da:	e004      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80083dc:	bf00      	nop
 80083de:	e002      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80083e0:	bf00      	nop
 80083e2:	e000      	b.n	80083e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80083e4:	bf00      	nop
  }
}
 80083e6:	37e8      	adds	r7, #232	@ 0xe8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	effffffe 	.word	0xeffffffe

080083f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008434:	b092      	sub	sp, #72	@ 0x48
 8008436:	af00      	add	r7, sp, #0
 8008438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	431a      	orrs	r2, r3
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	431a      	orrs	r2, r3
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	4313      	orrs	r3, r2
 8008456:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4bbe      	ldr	r3, [pc, #760]	@ (8008758 <UART_SetConfig+0x328>)
 8008460:	4013      	ands	r3, r2
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008468:	430b      	orrs	r3, r1
 800846a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4ab3      	ldr	r2, [pc, #716]	@ (800875c <UART_SetConfig+0x32c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008498:	4313      	orrs	r3, r2
 800849a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	4baf      	ldr	r3, [pc, #700]	@ (8008760 <UART_SetConfig+0x330>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	6812      	ldr	r2, [r2, #0]
 80084aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b6:	f023 010f 	bic.w	r1, r3, #15
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4aa6      	ldr	r2, [pc, #664]	@ (8008764 <UART_SetConfig+0x334>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d177      	bne.n	80085c0 <UART_SetConfig+0x190>
 80084d0:	4ba5      	ldr	r3, [pc, #660]	@ (8008768 <UART_SetConfig+0x338>)
 80084d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084d8:	2b28      	cmp	r3, #40	@ 0x28
 80084da:	d86d      	bhi.n	80085b8 <UART_SetConfig+0x188>
 80084dc:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <UART_SetConfig+0xb4>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008589 	.word	0x08008589
 80084e8:	080085b9 	.word	0x080085b9
 80084ec:	080085b9 	.word	0x080085b9
 80084f0:	080085b9 	.word	0x080085b9
 80084f4:	080085b9 	.word	0x080085b9
 80084f8:	080085b9 	.word	0x080085b9
 80084fc:	080085b9 	.word	0x080085b9
 8008500:	080085b9 	.word	0x080085b9
 8008504:	08008591 	.word	0x08008591
 8008508:	080085b9 	.word	0x080085b9
 800850c:	080085b9 	.word	0x080085b9
 8008510:	080085b9 	.word	0x080085b9
 8008514:	080085b9 	.word	0x080085b9
 8008518:	080085b9 	.word	0x080085b9
 800851c:	080085b9 	.word	0x080085b9
 8008520:	080085b9 	.word	0x080085b9
 8008524:	08008599 	.word	0x08008599
 8008528:	080085b9 	.word	0x080085b9
 800852c:	080085b9 	.word	0x080085b9
 8008530:	080085b9 	.word	0x080085b9
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080085b9 	.word	0x080085b9
 800853c:	080085b9 	.word	0x080085b9
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085a1 	.word	0x080085a1
 8008548:	080085b9 	.word	0x080085b9
 800854c:	080085b9 	.word	0x080085b9
 8008550:	080085b9 	.word	0x080085b9
 8008554:	080085b9 	.word	0x080085b9
 8008558:	080085b9 	.word	0x080085b9
 800855c:	080085b9 	.word	0x080085b9
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085b9 	.word	0x080085b9
 800856c:	080085b9 	.word	0x080085b9
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085b9 	.word	0x080085b9
 800857c:	080085b9 	.word	0x080085b9
 8008580:	080085b9 	.word	0x080085b9
 8008584:	080085b1 	.word	0x080085b1
 8008588:	2301      	movs	r3, #1
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e222      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008590:	2304      	movs	r3, #4
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e21e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008598:	2308      	movs	r3, #8
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e21a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085a0:	2310      	movs	r3, #16
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e216      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085a8:	2320      	movs	r3, #32
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e212      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085b0:	2340      	movs	r3, #64	@ 0x40
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e20e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e20a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a69      	ldr	r2, [pc, #420]	@ (800876c <UART_SetConfig+0x33c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d130      	bne.n	800862c <UART_SetConfig+0x1fc>
 80085ca:	4b67      	ldr	r3, [pc, #412]	@ (8008768 <UART_SetConfig+0x338>)
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d826      	bhi.n	8008624 <UART_SetConfig+0x1f4>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <UART_SetConfig+0x1ac>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	080085f5 	.word	0x080085f5
 80085e0:	080085fd 	.word	0x080085fd
 80085e4:	08008605 	.word	0x08008605
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	08008615 	.word	0x08008615
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e1ec      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e1e8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e1e4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e1e0      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008614:	2320      	movs	r3, #32
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e1dc      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800861c:	2340      	movs	r3, #64	@ 0x40
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e1d8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e1d4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a4f      	ldr	r2, [pc, #316]	@ (8008770 <UART_SetConfig+0x340>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d130      	bne.n	8008698 <UART_SetConfig+0x268>
 8008636:	4b4c      	ldr	r3, [pc, #304]	@ (8008768 <UART_SetConfig+0x338>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b05      	cmp	r3, #5
 8008640:	d826      	bhi.n	8008690 <UART_SetConfig+0x260>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <UART_SetConfig+0x218>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008661 	.word	0x08008661
 800864c:	08008669 	.word	0x08008669
 8008650:	08008671 	.word	0x08008671
 8008654:	08008679 	.word	0x08008679
 8008658:	08008681 	.word	0x08008681
 800865c:	08008689 	.word	0x08008689
 8008660:	2300      	movs	r3, #0
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e1b6      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e1b2      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e1ae      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e1aa      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008680:	2320      	movs	r3, #32
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e1a6      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008688:	2340      	movs	r3, #64	@ 0x40
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e1a2      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008690:	2380      	movs	r3, #128	@ 0x80
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e19e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a35      	ldr	r2, [pc, #212]	@ (8008774 <UART_SetConfig+0x344>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d130      	bne.n	8008704 <UART_SetConfig+0x2d4>
 80086a2:	4b31      	ldr	r3, [pc, #196]	@ (8008768 <UART_SetConfig+0x338>)
 80086a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d826      	bhi.n	80086fc <UART_SetConfig+0x2cc>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <UART_SetConfig+0x284>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e180      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e17c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e178      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e174      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086ec:	2320      	movs	r3, #32
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f2:	e170      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086f4:	2340      	movs	r3, #64	@ 0x40
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e16c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80086fc:	2380      	movs	r3, #128	@ 0x80
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008702:	e168      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1b      	ldr	r2, [pc, #108]	@ (8008778 <UART_SetConfig+0x348>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d142      	bne.n	8008794 <UART_SetConfig+0x364>
 800870e:	4b16      	ldr	r3, [pc, #88]	@ (8008768 <UART_SetConfig+0x338>)
 8008710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b05      	cmp	r3, #5
 8008718:	d838      	bhi.n	800878c <UART_SetConfig+0x35c>
 800871a:	a201      	add	r2, pc, #4	@ (adr r2, 8008720 <UART_SetConfig+0x2f0>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008739 	.word	0x08008739
 8008724:	08008741 	.word	0x08008741
 8008728:	08008749 	.word	0x08008749
 800872c:	08008751 	.word	0x08008751
 8008730:	0800877d 	.word	0x0800877d
 8008734:	08008785 	.word	0x08008785
 8008738:	2300      	movs	r3, #0
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e14a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e146      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e142      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e13e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008758:	cfff69f3 	.word	0xcfff69f3
 800875c:	58000c00 	.word	0x58000c00
 8008760:	11fff4ff 	.word	0x11fff4ff
 8008764:	40011000 	.word	0x40011000
 8008768:	58024400 	.word	0x58024400
 800876c:	40004400 	.word	0x40004400
 8008770:	40004800 	.word	0x40004800
 8008774:	40004c00 	.word	0x40004c00
 8008778:	40005000 	.word	0x40005000
 800877c:	2320      	movs	r3, #32
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e128      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008784:	2340      	movs	r3, #64	@ 0x40
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e124      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800878c:	2380      	movs	r3, #128	@ 0x80
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e120      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4acb      	ldr	r2, [pc, #812]	@ (8008ac8 <UART_SetConfig+0x698>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d176      	bne.n	800888c <UART_SetConfig+0x45c>
 800879e:	4bcb      	ldr	r3, [pc, #812]	@ (8008acc <UART_SetConfig+0x69c>)
 80087a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087a6:	2b28      	cmp	r3, #40	@ 0x28
 80087a8:	d86c      	bhi.n	8008884 <UART_SetConfig+0x454>
 80087aa:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <UART_SetConfig+0x380>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008855 	.word	0x08008855
 80087b4:	08008885 	.word	0x08008885
 80087b8:	08008885 	.word	0x08008885
 80087bc:	08008885 	.word	0x08008885
 80087c0:	08008885 	.word	0x08008885
 80087c4:	08008885 	.word	0x08008885
 80087c8:	08008885 	.word	0x08008885
 80087cc:	08008885 	.word	0x08008885
 80087d0:	0800885d 	.word	0x0800885d
 80087d4:	08008885 	.word	0x08008885
 80087d8:	08008885 	.word	0x08008885
 80087dc:	08008885 	.word	0x08008885
 80087e0:	08008885 	.word	0x08008885
 80087e4:	08008885 	.word	0x08008885
 80087e8:	08008885 	.word	0x08008885
 80087ec:	08008885 	.word	0x08008885
 80087f0:	08008865 	.word	0x08008865
 80087f4:	08008885 	.word	0x08008885
 80087f8:	08008885 	.word	0x08008885
 80087fc:	08008885 	.word	0x08008885
 8008800:	08008885 	.word	0x08008885
 8008804:	08008885 	.word	0x08008885
 8008808:	08008885 	.word	0x08008885
 800880c:	08008885 	.word	0x08008885
 8008810:	0800886d 	.word	0x0800886d
 8008814:	08008885 	.word	0x08008885
 8008818:	08008885 	.word	0x08008885
 800881c:	08008885 	.word	0x08008885
 8008820:	08008885 	.word	0x08008885
 8008824:	08008885 	.word	0x08008885
 8008828:	08008885 	.word	0x08008885
 800882c:	08008885 	.word	0x08008885
 8008830:	08008875 	.word	0x08008875
 8008834:	08008885 	.word	0x08008885
 8008838:	08008885 	.word	0x08008885
 800883c:	08008885 	.word	0x08008885
 8008840:	08008885 	.word	0x08008885
 8008844:	08008885 	.word	0x08008885
 8008848:	08008885 	.word	0x08008885
 800884c:	08008885 	.word	0x08008885
 8008850:	0800887d 	.word	0x0800887d
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e0bc      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e0b8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e0b4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e0b0      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008874:	2320      	movs	r3, #32
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e0ac      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800887c:	2340      	movs	r3, #64	@ 0x40
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e0a8      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008884:	2380      	movs	r3, #128	@ 0x80
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e0a4      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a8f      	ldr	r2, [pc, #572]	@ (8008ad0 <UART_SetConfig+0x6a0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d130      	bne.n	80088f8 <UART_SetConfig+0x4c8>
 8008896:	4b8d      	ldr	r3, [pc, #564]	@ (8008acc <UART_SetConfig+0x69c>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d826      	bhi.n	80088f0 <UART_SetConfig+0x4c0>
 80088a2:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <UART_SetConfig+0x478>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088e1 	.word	0x080088e1
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e086      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e082      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e07e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e07a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088e0:	2320      	movs	r3, #32
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e076      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088e8:	2340      	movs	r3, #64	@ 0x40
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e072      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088f0:	2380      	movs	r3, #128	@ 0x80
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e06e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a75      	ldr	r2, [pc, #468]	@ (8008ad4 <UART_SetConfig+0x6a4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d130      	bne.n	8008964 <UART_SetConfig+0x534>
 8008902:	4b72      	ldr	r3, [pc, #456]	@ (8008acc <UART_SetConfig+0x69c>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b05      	cmp	r3, #5
 800890c:	d826      	bhi.n	800895c <UART_SetConfig+0x52c>
 800890e:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <UART_SetConfig+0x4e4>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	0800892d 	.word	0x0800892d
 8008918:	08008935 	.word	0x08008935
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008945 	.word	0x08008945
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008955 	.word	0x08008955
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e050      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e04c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e048      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e044      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800894c:	2320      	movs	r3, #32
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e040      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008954:	2340      	movs	r3, #64	@ 0x40
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e03c      	b.n	80089d6 <UART_SetConfig+0x5a6>
 800895c:	2380      	movs	r3, #128	@ 0x80
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e038      	b.n	80089d6 <UART_SetConfig+0x5a6>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a5b      	ldr	r2, [pc, #364]	@ (8008ad8 <UART_SetConfig+0x6a8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d130      	bne.n	80089d0 <UART_SetConfig+0x5a0>
 800896e:	4b57      	ldr	r3, [pc, #348]	@ (8008acc <UART_SetConfig+0x69c>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b05      	cmp	r3, #5
 8008978:	d826      	bhi.n	80089c8 <UART_SetConfig+0x598>
 800897a:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <UART_SetConfig+0x550>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008999 	.word	0x08008999
 8008984:	080089a1 	.word	0x080089a1
 8008988:	080089a9 	.word	0x080089a9
 800898c:	080089b1 	.word	0x080089b1
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089c1 	.word	0x080089c1
 8008998:	2302      	movs	r3, #2
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e01a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089a0:	2304      	movs	r3, #4
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e016      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089a8:	2308      	movs	r3, #8
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e012      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089b0:	2310      	movs	r3, #16
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e00e      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089b8:	2320      	movs	r3, #32
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e00a      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089c0:	2340      	movs	r3, #64	@ 0x40
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e006      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089c8:	2380      	movs	r3, #128	@ 0x80
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e002      	b.n	80089d6 <UART_SetConfig+0x5a6>
 80089d0:	2380      	movs	r3, #128	@ 0x80
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a3f      	ldr	r2, [pc, #252]	@ (8008ad8 <UART_SetConfig+0x6a8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	f040 80f8 	bne.w	8008bd2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	dc46      	bgt.n	8008a78 <UART_SetConfig+0x648>
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	f2c0 8082 	blt.w	8008af4 <UART_SetConfig+0x6c4>
 80089f0:	3b02      	subs	r3, #2
 80089f2:	2b1e      	cmp	r3, #30
 80089f4:	d87e      	bhi.n	8008af4 <UART_SetConfig+0x6c4>
 80089f6:	a201      	add	r2, pc, #4	@ (adr r2, 80089fc <UART_SetConfig+0x5cc>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a7f 	.word	0x08008a7f
 8008a00:	08008af5 	.word	0x08008af5
 8008a04:	08008a87 	.word	0x08008a87
 8008a08:	08008af5 	.word	0x08008af5
 8008a0c:	08008af5 	.word	0x08008af5
 8008a10:	08008af5 	.word	0x08008af5
 8008a14:	08008a97 	.word	0x08008a97
 8008a18:	08008af5 	.word	0x08008af5
 8008a1c:	08008af5 	.word	0x08008af5
 8008a20:	08008af5 	.word	0x08008af5
 8008a24:	08008af5 	.word	0x08008af5
 8008a28:	08008af5 	.word	0x08008af5
 8008a2c:	08008af5 	.word	0x08008af5
 8008a30:	08008af5 	.word	0x08008af5
 8008a34:	08008aa7 	.word	0x08008aa7
 8008a38:	08008af5 	.word	0x08008af5
 8008a3c:	08008af5 	.word	0x08008af5
 8008a40:	08008af5 	.word	0x08008af5
 8008a44:	08008af5 	.word	0x08008af5
 8008a48:	08008af5 	.word	0x08008af5
 8008a4c:	08008af5 	.word	0x08008af5
 8008a50:	08008af5 	.word	0x08008af5
 8008a54:	08008af5 	.word	0x08008af5
 8008a58:	08008af5 	.word	0x08008af5
 8008a5c:	08008af5 	.word	0x08008af5
 8008a60:	08008af5 	.word	0x08008af5
 8008a64:	08008af5 	.word	0x08008af5
 8008a68:	08008af5 	.word	0x08008af5
 8008a6c:	08008af5 	.word	0x08008af5
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008ae7 	.word	0x08008ae7
 8008a78:	2b40      	cmp	r3, #64	@ 0x40
 8008a7a:	d037      	beq.n	8008aec <UART_SetConfig+0x6bc>
 8008a7c:	e03a      	b.n	8008af4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a7e:	f7fe fb1d 	bl	80070bc <HAL_RCCEx_GetD3PCLK1Freq>
 8008a82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a84:	e03c      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fb2c 	bl	80070e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a94:	e034      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fc78 	bl	8007390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa4:	e02c      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aa6:	4b09      	ldr	r3, [pc, #36]	@ (8008acc <UART_SetConfig+0x69c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d016      	beq.n	8008ae0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ab2:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <UART_SetConfig+0x69c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	08db      	lsrs	r3, r3, #3
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	4a07      	ldr	r2, [pc, #28]	@ (8008adc <UART_SetConfig+0x6ac>)
 8008abe:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ac4:	e01c      	b.n	8008b00 <UART_SetConfig+0x6d0>
 8008ac6:	bf00      	nop
 8008ac8:	40011400 	.word	0x40011400
 8008acc:	58024400 	.word	0x58024400
 8008ad0:	40007800 	.word	0x40007800
 8008ad4:	40007c00 	.word	0x40007c00
 8008ad8:	58000c00 	.word	0x58000c00
 8008adc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008ae0:	4b9d      	ldr	r3, [pc, #628]	@ (8008d58 <UART_SetConfig+0x928>)
 8008ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae4:	e00c      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ae6:	4b9d      	ldr	r3, [pc, #628]	@ (8008d5c <UART_SetConfig+0x92c>)
 8008ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aea:	e009      	b.n	8008b00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af2:	e005      	b.n	8008b00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008afe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 81de 	beq.w	8008ec4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0c:	4a94      	ldr	r2, [pc, #592]	@ (8008d60 <UART_SetConfig+0x930>)
 8008b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b12:	461a      	mov	r2, r3
 8008b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b1a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	4613      	mov	r3, r2
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	4413      	add	r3, r2
 8008b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d305      	bcc.n	8008b38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d903      	bls.n	8008b40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b3e:	e1c1      	b.n	8008ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b42:	2200      	movs	r2, #0
 8008b44:	60bb      	str	r3, [r7, #8]
 8008b46:	60fa      	str	r2, [r7, #12]
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	4a84      	ldr	r2, [pc, #528]	@ (8008d60 <UART_SetConfig+0x930>)
 8008b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2200      	movs	r2, #0
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b62:	f7f7 fc15 	bl	8000390 <__aeabi_uldivmod>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	020b      	lsls	r3, r1, #8
 8008b78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b7c:	0202      	lsls	r2, r0, #8
 8008b7e:	6979      	ldr	r1, [r7, #20]
 8008b80:	6849      	ldr	r1, [r1, #4]
 8008b82:	0849      	lsrs	r1, r1, #1
 8008b84:	2000      	movs	r0, #0
 8008b86:	460c      	mov	r4, r1
 8008b88:	4605      	mov	r5, r0
 8008b8a:	eb12 0804 	adds.w	r8, r2, r4
 8008b8e:	eb43 0905 	adc.w	r9, r3, r5
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	469a      	mov	sl, r3
 8008b9a:	4693      	mov	fp, r2
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	f7f7 fbf4 	bl	8000390 <__aeabi_uldivmod>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4613      	mov	r3, r2
 8008bae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bb6:	d308      	bcc.n	8008bca <UART_SetConfig+0x79a>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bbe:	d204      	bcs.n	8008bca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	e17c      	b.n	8008ec4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bd0:	e178      	b.n	8008ec4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bda:	f040 80c5 	bne.w	8008d68 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008bde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	dc48      	bgt.n	8008c78 <UART_SetConfig+0x848>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	db7b      	blt.n	8008ce2 <UART_SetConfig+0x8b2>
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d879      	bhi.n	8008ce2 <UART_SetConfig+0x8b2>
 8008bee:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf4 <UART_SetConfig+0x7c4>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c7f 	.word	0x08008c7f
 8008bf8:	08008c87 	.word	0x08008c87
 8008bfc:	08008ce3 	.word	0x08008ce3
 8008c00:	08008ce3 	.word	0x08008ce3
 8008c04:	08008c8f 	.word	0x08008c8f
 8008c08:	08008ce3 	.word	0x08008ce3
 8008c0c:	08008ce3 	.word	0x08008ce3
 8008c10:	08008ce3 	.word	0x08008ce3
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008ce3 	.word	0x08008ce3
 8008c1c:	08008ce3 	.word	0x08008ce3
 8008c20:	08008ce3 	.word	0x08008ce3
 8008c24:	08008ce3 	.word	0x08008ce3
 8008c28:	08008ce3 	.word	0x08008ce3
 8008c2c:	08008ce3 	.word	0x08008ce3
 8008c30:	08008ce3 	.word	0x08008ce3
 8008c34:	08008caf 	.word	0x08008caf
 8008c38:	08008ce3 	.word	0x08008ce3
 8008c3c:	08008ce3 	.word	0x08008ce3
 8008c40:	08008ce3 	.word	0x08008ce3
 8008c44:	08008ce3 	.word	0x08008ce3
 8008c48:	08008ce3 	.word	0x08008ce3
 8008c4c:	08008ce3 	.word	0x08008ce3
 8008c50:	08008ce3 	.word	0x08008ce3
 8008c54:	08008ce3 	.word	0x08008ce3
 8008c58:	08008ce3 	.word	0x08008ce3
 8008c5c:	08008ce3 	.word	0x08008ce3
 8008c60:	08008ce3 	.word	0x08008ce3
 8008c64:	08008ce3 	.word	0x08008ce3
 8008c68:	08008ce3 	.word	0x08008ce3
 8008c6c:	08008ce3 	.word	0x08008ce3
 8008c70:	08008ce3 	.word	0x08008ce3
 8008c74:	08008cd5 	.word	0x08008cd5
 8008c78:	2b40      	cmp	r3, #64	@ 0x40
 8008c7a:	d02e      	beq.n	8008cda <UART_SetConfig+0x8aa>
 8008c7c:	e031      	b.n	8008ce2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c7e:	f7fc ffe7 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8008c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c84:	e033      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c86:	f7fc fff9 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 8008c8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c8c:	e02f      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fa28 	bl	80070e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9c:	e027      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9e:	f107 0318 	add.w	r3, r7, #24
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fb74 	bl	8007390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cac:	e01f      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cae:	4b2d      	ldr	r3, [pc, #180]	@ (8008d64 <UART_SetConfig+0x934>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d009      	beq.n	8008cce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cba:	4b2a      	ldr	r3, [pc, #168]	@ (8008d64 <UART_SetConfig+0x934>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	08db      	lsrs	r3, r3, #3
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	4a24      	ldr	r2, [pc, #144]	@ (8008d58 <UART_SetConfig+0x928>)
 8008cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ccc:	e00f      	b.n	8008cee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008cce:	4b22      	ldr	r3, [pc, #136]	@ (8008d58 <UART_SetConfig+0x928>)
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd2:	e00c      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cd4:	4b21      	ldr	r3, [pc, #132]	@ (8008d5c <UART_SetConfig+0x92c>)
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd8:	e009      	b.n	8008cee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce0:	e005      	b.n	8008cee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80e7 	beq.w	8008ec4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfa:	4a19      	ldr	r2, [pc, #100]	@ (8008d60 <UART_SetConfig+0x930>)
 8008cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d08:	005a      	lsls	r2, r3, #1
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	441a      	add	r2, r3
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1e:	2b0f      	cmp	r3, #15
 8008d20:	d916      	bls.n	8008d50 <UART_SetConfig+0x920>
 8008d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d28:	d212      	bcs.n	8008d50 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f023 030f 	bic.w	r3, r3, #15
 8008d32:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d42:	4313      	orrs	r3, r2
 8008d44:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008d4c:	60da      	str	r2, [r3, #12]
 8008d4e:	e0b9      	b.n	8008ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d56:	e0b5      	b.n	8008ec4 <UART_SetConfig+0xa94>
 8008d58:	03d09000 	.word	0x03d09000
 8008d5c:	003d0900 	.word	0x003d0900
 8008d60:	0800b5f4 	.word	0x0800b5f4
 8008d64:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	dc49      	bgt.n	8008e04 <UART_SetConfig+0x9d4>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	db7c      	blt.n	8008e6e <UART_SetConfig+0xa3e>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d87a      	bhi.n	8008e6e <UART_SetConfig+0xa3e>
 8008d78:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <UART_SetConfig+0x950>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008e0b 	.word	0x08008e0b
 8008d84:	08008e13 	.word	0x08008e13
 8008d88:	08008e6f 	.word	0x08008e6f
 8008d8c:	08008e6f 	.word	0x08008e6f
 8008d90:	08008e1b 	.word	0x08008e1b
 8008d94:	08008e6f 	.word	0x08008e6f
 8008d98:	08008e6f 	.word	0x08008e6f
 8008d9c:	08008e6f 	.word	0x08008e6f
 8008da0:	08008e2b 	.word	0x08008e2b
 8008da4:	08008e6f 	.word	0x08008e6f
 8008da8:	08008e6f 	.word	0x08008e6f
 8008dac:	08008e6f 	.word	0x08008e6f
 8008db0:	08008e6f 	.word	0x08008e6f
 8008db4:	08008e6f 	.word	0x08008e6f
 8008db8:	08008e6f 	.word	0x08008e6f
 8008dbc:	08008e6f 	.word	0x08008e6f
 8008dc0:	08008e3b 	.word	0x08008e3b
 8008dc4:	08008e6f 	.word	0x08008e6f
 8008dc8:	08008e6f 	.word	0x08008e6f
 8008dcc:	08008e6f 	.word	0x08008e6f
 8008dd0:	08008e6f 	.word	0x08008e6f
 8008dd4:	08008e6f 	.word	0x08008e6f
 8008dd8:	08008e6f 	.word	0x08008e6f
 8008ddc:	08008e6f 	.word	0x08008e6f
 8008de0:	08008e6f 	.word	0x08008e6f
 8008de4:	08008e6f 	.word	0x08008e6f
 8008de8:	08008e6f 	.word	0x08008e6f
 8008dec:	08008e6f 	.word	0x08008e6f
 8008df0:	08008e6f 	.word	0x08008e6f
 8008df4:	08008e6f 	.word	0x08008e6f
 8008df8:	08008e6f 	.word	0x08008e6f
 8008dfc:	08008e6f 	.word	0x08008e6f
 8008e00:	08008e61 	.word	0x08008e61
 8008e04:	2b40      	cmp	r3, #64	@ 0x40
 8008e06:	d02e      	beq.n	8008e66 <UART_SetConfig+0xa36>
 8008e08:	e031      	b.n	8008e6e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e0a:	f7fc ff21 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8008e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e10:	e033      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e12:	f7fc ff33 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 8008e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e18:	e02f      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe f962 	bl	80070e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e28:	e027      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2a:	f107 0318 	add.w	r3, r7, #24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe faae 	bl	8007390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e38:	e01f      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef0 <UART_SetConfig+0xac0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d009      	beq.n	8008e5a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e46:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef0 <UART_SetConfig+0xac0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	08db      	lsrs	r3, r3, #3
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	4a28      	ldr	r2, [pc, #160]	@ (8008ef4 <UART_SetConfig+0xac4>)
 8008e52:	fa22 f303 	lsr.w	r3, r2, r3
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e58:	e00f      	b.n	8008e7a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e5a:	4b26      	ldr	r3, [pc, #152]	@ (8008ef4 <UART_SetConfig+0xac4>)
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5e:	e00c      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e60:	4b25      	ldr	r3, [pc, #148]	@ (8008ef8 <UART_SetConfig+0xac8>)
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e64:	e009      	b.n	8008e7a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6c:	e005      	b.n	8008e7a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e78:	bf00      	nop
    }

    if (pclk != 0U)
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d021      	beq.n	8008ec4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e84:	4a1d      	ldr	r2, [pc, #116]	@ (8008efc <UART_SetConfig+0xacc>)
 8008e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	441a      	add	r2, r3
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d909      	bls.n	8008ebe <UART_SetConfig+0xa8e>
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb0:	d205      	bcs.n	8008ebe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60da      	str	r2, [r3, #12]
 8008ebc:	e002      	b.n	8008ec4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ee0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3748      	adds	r7, #72	@ 0x48
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eee:	bf00      	nop
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	03d09000 	.word	0x03d09000
 8008ef8:	003d0900 	.word	0x003d0900
 8008efc:	0800b5f4 	.word	0x0800b5f4

08008f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb6:	f003 0320 	and.w	r3, r3, #32
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01a      	beq.n	8009016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ffe:	d10a      	bne.n	8009016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	605a      	str	r2, [r3, #4]
  }
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b098      	sub	sp, #96	@ 0x60
 8009048:	af02      	add	r7, sp, #8
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009054:	f7f8 fb48 	bl	80016e8 <HAL_GetTick>
 8009058:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b08      	cmp	r3, #8
 8009066:	d12f      	bne.n	80090c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009068:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009070:	2200      	movs	r2, #0
 8009072:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f88e 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d022      	beq.n	80090c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009096:	653b      	str	r3, [r7, #80]	@ 0x50
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e6      	bne.n	8009082 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e063      	b.n	8009190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d149      	bne.n	800916a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090de:	2200      	movs	r2, #0
 80090e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f857 	bl	8009198 <UART_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d03c      	beq.n	800916a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	623b      	str	r3, [r7, #32]
   return(result);
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800910e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009110:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	60fb      	str	r3, [r7, #12]
   return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009142:	61fa      	str	r2, [r7, #28]
 8009144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	69b9      	ldr	r1, [r7, #24]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	617b      	str	r3, [r7, #20]
   return(result);
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e012      	b.n	8009190 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3758      	adds	r7, #88	@ 0x58
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	4613      	mov	r3, r2
 80091a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a8:	e04f      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d04b      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b2:	f7f8 fa99 	bl	80016e8 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d302      	bcc.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e04e      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0304 	and.w	r3, r3, #4
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d037      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b80      	cmp	r3, #128	@ 0x80
 80091de:	d034      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b40      	cmp	r3, #64	@ 0x40
 80091e4:	d031      	beq.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d110      	bne.n	8009216 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2208      	movs	r2, #8
 80091fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f95b 	bl	80094b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2208      	movs	r2, #8
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e029      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009224:	d111      	bne.n	800924a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800922e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f941 	bl	80094b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e00f      	b.n	800926a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	429a      	cmp	r2, r3
 8009258:	bf0c      	ite	eq
 800925a:	2301      	moveq	r3, #1
 800925c:	2300      	movne	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	429a      	cmp	r2, r3
 8009266:	d0a0      	beq.n	80091aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009274:	b480      	push	{r7}
 8009276:	b0a3      	sub	sp, #140	@ 0x8c
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	88fa      	ldrh	r2, [r7, #6]
 800928c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a6:	d10e      	bne.n	80092c6 <UART_Start_Receive_IT+0x52>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d105      	bne.n	80092bc <UART_Start_Receive_IT+0x48>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80092b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092ba:	e02d      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	22ff      	movs	r2, #255	@ 0xff
 80092c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092c4:	e028      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10d      	bne.n	80092ea <UART_Start_Receive_IT+0x76>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <UART_Start_Receive_IT+0x6c>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	22ff      	movs	r2, #255	@ 0xff
 80092da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092de:	e01b      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	227f      	movs	r2, #127	@ 0x7f
 80092e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80092e8:	e016      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092f2:	d10d      	bne.n	8009310 <UART_Start_Receive_IT+0x9c>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <UART_Start_Receive_IT+0x92>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	227f      	movs	r2, #127	@ 0x7f
 8009300:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009304:	e008      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	223f      	movs	r2, #63	@ 0x3f
 800930a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800930e:	e003      	b.n	8009318 <UART_Start_Receive_IT+0xa4>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2222      	movs	r2, #34	@ 0x22
 8009324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3308      	adds	r3, #8
 800932e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800934c:	673a      	str	r2, [r7, #112]	@ 0x70
 800934e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009352:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800935a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e3      	bne.n	8009328 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009368:	d14f      	bne.n	800940a <UART_Start_Receive_IT+0x196>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009370:	88fa      	ldrh	r2, [r7, #6]
 8009372:	429a      	cmp	r2, r3
 8009374:	d349      	bcc.n	800940a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800937e:	d107      	bne.n	8009390 <UART_Start_Receive_IT+0x11c>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4a47      	ldr	r2, [pc, #284]	@ (80094a8 <UART_Start_Receive_IT+0x234>)
 800938c:	675a      	str	r2, [r3, #116]	@ 0x74
 800938e:	e002      	b.n	8009396 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a46      	ldr	r2, [pc, #280]	@ (80094ac <UART_Start_Receive_IT+0x238>)
 8009394:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d01a      	beq.n	80093d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80093ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093c2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80093c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80093ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e4      	bne.n	800939e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3308      	adds	r3, #8
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80093f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80093f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e5      	bne.n	80093d4 <UART_Start_Receive_IT+0x160>
 8009408:	e046      	b.n	8009498 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009412:	d107      	bne.n	8009424 <UART_Start_Receive_IT+0x1b0>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4a24      	ldr	r2, [pc, #144]	@ (80094b0 <UART_Start_Receive_IT+0x23c>)
 8009420:	675a      	str	r2, [r3, #116]	@ 0x74
 8009422:	e002      	b.n	800942a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4a23      	ldr	r2, [pc, #140]	@ (80094b4 <UART_Start_Receive_IT+0x240>)
 8009428:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d019      	beq.n	8009466 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009446:	677b      	str	r3, [r7, #116]	@ 0x74
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009450:	637b      	str	r3, [r7, #52]	@ 0x34
 8009452:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e6      	bne.n	8009432 <UART_Start_Receive_IT+0x1be>
 8009464:	e018      	b.n	8009498 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	613b      	str	r3, [r7, #16]
   return(result);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f043 0320 	orr.w	r3, r3, #32
 800947a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	461a      	mov	r2, r3
 8009482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009484:	623b      	str	r3, [r7, #32]
 8009486:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	6a3a      	ldr	r2, [r7, #32]
 800948c:	e841 2300 	strex	r3, r2, [r1]
 8009490:	61bb      	str	r3, [r7, #24]
   return(result);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1e6      	bne.n	8009466 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	378c      	adds	r7, #140	@ 0x8c
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	0800a01d 	.word	0x0800a01d
 80094ac:	08009cbd 	.word	0x08009cbd
 80094b0:	08009b05 	.word	0x08009b05
 80094b4:	0800994d 	.word	0x0800994d

080094b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b095      	sub	sp, #84	@ 0x54
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094de:	643b      	str	r3, [r7, #64]	@ 0x40
 80094e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e6      	bne.n	80094c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	61fb      	str	r3, [r7, #28]
   return(result);
 8009502:	69fa      	ldr	r2, [r7, #28]
 8009504:	4b1e      	ldr	r3, [pc, #120]	@ (8009580 <UART_EndRxTransfer+0xc8>)
 8009506:	4013      	ands	r3, r2
 8009508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009514:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e5      	bne.n	80094f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800952a:	2b01      	cmp	r3, #1
 800952c:	d118      	bne.n	8009560 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60bb      	str	r3, [r7, #8]
   return(result);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f023 0310 	bic.w	r3, r3, #16
 8009542:	647b      	str	r3, [r7, #68]	@ 0x44
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6979      	ldr	r1, [r7, #20]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	613b      	str	r3, [r7, #16]
   return(result);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009574:	bf00      	nop
 8009576:	3754      	adds	r7, #84	@ 0x54
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	effffffe 	.word	0xeffffffe

08009584 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7fe ff2e 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a8:	bf00      	nop
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b08f      	sub	sp, #60	@ 0x3c
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095be:	2b21      	cmp	r3, #33	@ 0x21
 80095c0:	d14c      	bne.n	800965c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d132      	bne.n	8009634 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	61fb      	str	r3, [r7, #28]
   return(result);
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e6      	bne.n	80095ce <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	60bb      	str	r3, [r7, #8]
   return(result);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009614:	633b      	str	r3, [r7, #48]	@ 0x30
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6979      	ldr	r1, [r7, #20]
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	613b      	str	r3, [r7, #16]
   return(result);
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e6      	bne.n	8009600 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009632:	e013      	b.n	800965c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009650:	b29b      	uxth	r3, r3
 8009652:	3b01      	subs	r3, #1
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800965c:	bf00      	nop
 800965e:	373c      	adds	r7, #60	@ 0x3c
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009668:	b480      	push	{r7}
 800966a:	b091      	sub	sp, #68	@ 0x44
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009676:	2b21      	cmp	r3, #33	@ 0x21
 8009678:	d151      	bne.n	800971e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d132      	bne.n	80096ec <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	623b      	str	r3, [r7, #32]
   return(result);
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800969a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80096a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e6      	bne.n	8009686 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	69b9      	ldr	r1, [r7, #24]
 80096dc:	69fa      	ldr	r2, [r7, #28]
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	617b      	str	r3, [r7, #20]
   return(result);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e6      	bne.n	80096b8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80096ea:	e018      	b.n	800971e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80096f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009700:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009706:	1c9a      	adds	r2, r3, #2
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800971e:	bf00      	nop
 8009720:	3744      	adds	r7, #68	@ 0x44
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800972a:	b480      	push	{r7}
 800972c:	b091      	sub	sp, #68	@ 0x44
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009738:	2b21      	cmp	r3, #33	@ 0x21
 800973a:	d160      	bne.n	80097fe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009742:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009744:	e057      	b.n	80097f6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d133      	bne.n	80097ba <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	623b      	str	r3, [r7, #32]
   return(result);
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3308      	adds	r3, #8
 8009770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009772:	633a      	str	r2, [r7, #48]	@ 0x30
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e5      	bne.n	8009752 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	60fb      	str	r3, [r7, #12]
   return(result);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a4:	61fb      	str	r3, [r7, #28]
 80097a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	69b9      	ldr	r1, [r7, #24]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	e841 2300 	strex	r3, r2, [r1]
 80097b0:	617b      	str	r3, [r7, #20]
   return(result);
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e6      	bne.n	8009786 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80097b8:	e021      	b.n	80097fe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d013      	beq.n	80097f0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097cc:	781a      	ldrb	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80097f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80097f2:	3b01      	subs	r3, #1
 80097f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80097f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1a4      	bne.n	8009746 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80097fc:	e7ff      	b.n	80097fe <UART_TxISR_8BIT_FIFOEN+0xd4>
 80097fe:	bf00      	nop
 8009800:	3744      	adds	r7, #68	@ 0x44
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800980a:	b480      	push	{r7}
 800980c:	b091      	sub	sp, #68	@ 0x44
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009818:	2b21      	cmp	r3, #33	@ 0x21
 800981a:	d165      	bne.n	80098e8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009822:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009824:	e05c      	b.n	80098e0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d133      	bne.n	800989a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3308      	adds	r3, #8
 8009838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	61fb      	str	r3, [r7, #28]
   return(result);
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009854:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e5      	bne.n	8009832 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	60bb      	str	r3, [r7, #8]
   return(result);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800987a:	633b      	str	r3, [r7, #48]	@ 0x30
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6979      	ldr	r1, [r7, #20]
 800988a:	69ba      	ldr	r2, [r7, #24]
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	613b      	str	r3, [r7, #16]
   return(result);
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e6      	bne.n	8009866 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009898:	e026      	b.n	80098e8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d018      	beq.n	80098da <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ac:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80098ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098bc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c2:	1c9a      	adds	r2, r3, #2
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80098dc:	3b01      	subs	r3, #1
 80098de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80098e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d19f      	bne.n	8009826 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80098e6:	e7ff      	b.n	80098e8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80098e8:	bf00      	nop
 80098ea:	3744      	adds	r7, #68	@ 0x44
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	60bb      	str	r3, [r7, #8]
   return(result);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009910:	61fb      	str	r3, [r7, #28]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6979      	ldr	r1, [r7, #20]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	613b      	str	r3, [r7, #16]
   return(result);
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e6      	bne.n	80098fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7fe fd57 	bl	80083f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009942:	bf00      	nop
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b09c      	sub	sp, #112	@ 0x70
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800995a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009964:	2b22      	cmp	r3, #34	@ 0x22
 8009966:	f040 80be 	bne.w	8009ae6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009974:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009978:	b2d9      	uxtb	r1, r3
 800997a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800997e:	b2da      	uxtb	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009984:	400a      	ands	r2, r1
 8009986:	b2d2      	uxtb	r2, r2
 8009988:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800999a:	b29b      	uxth	r3, r3
 800999c:	3b01      	subs	r3, #1
 800999e:	b29a      	uxth	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f040 80a1 	bne.w	8009af6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e6      	bne.n	80099b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a06:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e5      	bne.n	80099e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a33      	ldr	r2, [pc, #204]	@ (8009b00 <UART_RxISR_8BIT+0x1b4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d01f      	beq.n	8009a78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d018      	beq.n	8009a78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	e853 3f00 	ldrex	r3, [r3]
 8009a52:	623b      	str	r3, [r7, #32]
   return(result);
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e6      	bne.n	8009a46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d12e      	bne.n	8009ade <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0310 	bic.w	r3, r3, #16
 8009a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009aa4:	61fb      	str	r3, [r7, #28]
 8009aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f003 0310 	and.w	r3, r3, #16
 8009ac2:	2b10      	cmp	r3, #16
 8009ac4:	d103      	bne.n	8009ace <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2210      	movs	r2, #16
 8009acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fe fc9e 	bl	8008418 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009adc:	e00b      	b.n	8009af6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7f7 f9b0 	bl	8000e44 <HAL_UART_RxCpltCallback>
}
 8009ae4:	e007      	b.n	8009af6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0208 	orr.w	r2, r2, #8
 8009af4:	619a      	str	r2, [r3, #24]
}
 8009af6:	bf00      	nop
 8009af8:	3770      	adds	r7, #112	@ 0x70
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	58000c00 	.word	0x58000c00

08009b04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b09c      	sub	sp, #112	@ 0x70
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b1c:	2b22      	cmp	r3, #34	@ 0x22
 8009b1e:	f040 80be 	bne.w	8009c9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b30:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009b36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b46:	1c9a      	adds	r2, r3, #2
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f040 80a1 	bne.w	8009cae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b80:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b8c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e6      	bne.n	8009b6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3308      	adds	r3, #8
 8009bbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e5      	bne.n	8009b9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a33      	ldr	r2, [pc, #204]	@ (8009cb8 <UART_RxISR_16BIT+0x1b4>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d01f      	beq.n	8009c30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d018      	beq.n	8009c30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c24:	e841 2300 	strex	r3, r2, [r1]
 8009c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e6      	bne.n	8009bfe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d12e      	bne.n	8009c96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f023 0310 	bic.w	r3, r3, #16
 8009c52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6979      	ldr	r1, [r7, #20]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	613b      	str	r3, [r7, #16]
   return(result);
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e6      	bne.n	8009c3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d103      	bne.n	8009c86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2210      	movs	r2, #16
 8009c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fe fbc2 	bl	8008418 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c94:	e00b      	b.n	8009cae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f7 f8d4 	bl	8000e44 <HAL_UART_RxCpltCallback>
}
 8009c9c:	e007      	b.n	8009cae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	699a      	ldr	r2, [r3, #24]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f042 0208 	orr.w	r2, r2, #8
 8009cac:	619a      	str	r2, [r3, #24]
}
 8009cae:	bf00      	nop
 8009cb0:	3770      	adds	r7, #112	@ 0x70
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	58000c00 	.word	0x58000c00

08009cbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b0ac      	sub	sp, #176	@ 0xb0
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009cca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cf2:	2b22      	cmp	r3, #34	@ 0x22
 8009cf4:	f040 8180 	bne.w	8009ff8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cfe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d02:	e123      	b.n	8009f4c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009d12:	b2d9      	uxtb	r1, r3
 8009d14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d1e:	400a      	ands	r2, r1
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d053      	beq.n	8009dfe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d011      	beq.n	8009d86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2201      	movs	r2, #1
 8009d74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d7c:	f043 0201 	orr.w	r2, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d8a:	f003 0302 	and.w	r3, r3, #2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d011      	beq.n	8009db6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2202      	movs	r2, #2
 8009da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dac:	f043 0204 	orr.w	r2, r3, #4
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dba:	f003 0304 	and.w	r3, r3, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d011      	beq.n	8009de6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ddc:	f043 0202 	orr.w	r2, r3, #2
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d006      	beq.n	8009dfe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fe fb07 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 80a0 	bne.w	8009f4c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009e34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009e3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e4      	bne.n	8009e0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009e52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e54:	4b6e      	ldr	r3, [pc, #440]	@ (800a010 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009e56:	4013      	ands	r3, r2
 8009e58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3308      	adds	r3, #8
 8009e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e66:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009e68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009e6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009e74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e3      	bne.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a60      	ldr	r2, [pc, #384]	@ (800a014 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d021      	beq.n	8009edc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d01a      	beq.n	8009edc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009ec8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ecc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ed0:	e841 2300 	strex	r3, r2, [r1]
 8009ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e4      	bne.n	8009ea6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d130      	bne.n	8009f46 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef2:	e853 3f00 	ldrex	r3, [r3]
 8009ef6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	f023 0310 	bic.w	r3, r3, #16
 8009efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e4      	bne.n	8009eea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f003 0310 	and.w	r3, r3, #16
 8009f2a:	2b10      	cmp	r3, #16
 8009f2c:	d103      	bne.n	8009f36 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2210      	movs	r2, #16
 8009f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fe fa6a 	bl	8008418 <HAL_UARTEx_RxEventCallback>
 8009f44:	e002      	b.n	8009f4c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7f6 ff7c 	bl	8000e44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d006      	beq.n	8009f62 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f47f aed1 	bne.w	8009d04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f68:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d049      	beq.n	800a008 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d242      	bcs.n	800a008 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fae:	e841 2300 	strex	r3, r2, [r1]
 8009fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e3      	bne.n	8009f82 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a16      	ldr	r2, [pc, #88]	@ (800a018 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009fbe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f043 0320 	orr.w	r3, r3, #32
 8009fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009fe2:	61bb      	str	r3, [r7, #24]
 8009fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	6979      	ldr	r1, [r7, #20]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	e841 2300 	strex	r3, r2, [r1]
 8009fee:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1e4      	bne.n	8009fc0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ff6:	e007      	b.n	800a008 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	699a      	ldr	r2, [r3, #24]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0208 	orr.w	r2, r2, #8
 800a006:	619a      	str	r2, [r3, #24]
}
 800a008:	bf00      	nop
 800a00a:	37b0      	adds	r7, #176	@ 0xb0
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	effffffe 	.word	0xeffffffe
 800a014:	58000c00 	.word	0x58000c00
 800a018:	0800994d 	.word	0x0800994d

0800a01c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b0ae      	sub	sp, #184	@ 0xb8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a02a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69db      	ldr	r3, [r3, #28]
 800a034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a052:	2b22      	cmp	r3, #34	@ 0x22
 800a054:	f040 8184 	bne.w	800a360 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a05e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a062:	e127      	b.n	800a2b4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a076:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a07a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a07e:	4013      	ands	r3, r2
 800a080:	b29a      	uxth	r2, r3
 800a082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a08c:	1c9a      	adds	r2, r3, #2
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a098:	b29b      	uxth	r3, r3
 800a09a:	3b01      	subs	r3, #1
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d053      	beq.n	800a162 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d011      	beq.n	800a0ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800a0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00b      	beq.n	800a0ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0e0:	f043 0201 	orr.w	r2, r3, #1
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d011      	beq.n	800a11a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a0f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2202      	movs	r2, #2
 800a108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a110:	f043 0204 	orr.w	r2, r3, #4
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a11a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a11e:	f003 0304 	and.w	r3, r3, #4
 800a122:	2b00      	cmp	r3, #0
 800a124:	d011      	beq.n	800a14a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00b      	beq.n	800a14a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2204      	movs	r2, #4
 800a138:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a140:	f043 0202 	orr.w	r2, r3, #2
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a150:	2b00      	cmp	r3, #0
 800a152:	d006      	beq.n	800a162 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7fe f955 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a168:	b29b      	uxth	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f040 80a2 	bne.w	800a2b4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a17e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a196:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a19a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1e2      	bne.n	800a170 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1bc:	4b6e      	ldr	r3, [pc, #440]	@ (800a378 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a1ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a1dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e3      	bne.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a60      	ldr	r2, [pc, #384]	@ (800a37c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d021      	beq.n	800a244 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d01a      	beq.n	800a244 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a216:	e853 3f00 	ldrex	r3, [r3]
 800a21a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a21c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a21e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a230:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a232:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e4      	bne.n	800a20e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d130      	bne.n	800a2ae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a262:	f023 0310 	bic.w	r3, r3, #16
 800a266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a274:	647b      	str	r3, [r7, #68]	@ 0x44
 800a276:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a27a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e4      	bne.n	800a252 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b10      	cmp	r3, #16
 800a294:	d103      	bne.n	800a29e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2210      	movs	r2, #16
 800a29c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7fe f8b6 	bl	8008418 <HAL_UARTEx_RxEventCallback>
 800a2ac:	e002      	b.n	800a2b4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7f6 fdc8 	bl	8000e44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2b4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d006      	beq.n	800a2ca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a2bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f47f aecd 	bne.w	800a064 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2d0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d049      	beq.n	800a370 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a2e2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d242      	bcs.n	800a370 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a30e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e3      	bne.n	800a2ea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a16      	ldr	r2, [pc, #88]	@ (800a380 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a326:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	60fb      	str	r3, [r7, #12]
   return(result);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f043 0320 	orr.w	r3, r3, #32
 800a33c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34e:	69b9      	ldr	r1, [r7, #24]
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	617b      	str	r3, [r7, #20]
   return(result);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e4      	bne.n	800a328 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a35e:	e007      	b.n	800a370 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0208 	orr.w	r2, r2, #8
 800a36e:	619a      	str	r2, [r3, #24]
}
 800a370:	bf00      	nop
 800a372:	37b8      	adds	r7, #184	@ 0xb8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	effffffe 	.word	0xeffffffe
 800a37c:	58000c00 	.word	0x58000c00
 800a380:	08009b05 	.word	0x08009b05

0800a384 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d101      	bne.n	800a3d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e027      	b.n	800a426 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2224      	movs	r2, #36	@ 0x24
 800a3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0201 	bic.w	r2, r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a404:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a442:	2b01      	cmp	r3, #1
 800a444:	d101      	bne.n	800a44a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a446:	2302      	movs	r3, #2
 800a448:	e02d      	b.n	800a4a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2224      	movs	r2, #36	@ 0x24
 800a456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 0201 	bic.w	r2, r2, #1
 800a470:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f850 	bl	800a52c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2220      	movs	r2, #32
 800a498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d101      	bne.n	800a4c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	e02d      	b.n	800a522 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2224      	movs	r2, #36	@ 0x24
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 0201 	bic.w	r2, r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f812 	bl	800a52c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d108      	bne.n	800a54e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a54c:	e031      	b.n	800a5b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a54e:	2310      	movs	r3, #16
 800a550:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a552:	2310      	movs	r3, #16
 800a554:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	0e5b      	lsrs	r3, r3, #25
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 0307 	and.w	r3, r3, #7
 800a564:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	0f5b      	lsrs	r3, r3, #29
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a576:	7bbb      	ldrb	r3, [r7, #14]
 800a578:	7b3a      	ldrb	r2, [r7, #12]
 800a57a:	4911      	ldr	r1, [pc, #68]	@ (800a5c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a57c:	5c8a      	ldrb	r2, [r1, r2]
 800a57e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a582:	7b3a      	ldrb	r2, [r7, #12]
 800a584:	490f      	ldr	r1, [pc, #60]	@ (800a5c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a586:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a588:	fb93 f3f2 	sdiv	r3, r3, r2
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	7b7a      	ldrb	r2, [r7, #13]
 800a598:	4909      	ldr	r1, [pc, #36]	@ (800a5c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a59a:	5c8a      	ldrb	r2, [r1, r2]
 800a59c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5a0:	7b7a      	ldrb	r2, [r7, #13]
 800a5a2:	4908      	ldr	r1, [pc, #32]	@ (800a5c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a5a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5b2:	bf00      	nop
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	0800b60c 	.word	0x0800b60c
 800a5c4:	0800b614 	.word	0x0800b614

0800a5c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	f107 001c 	add.w	r0, r7, #28
 800a5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d121      	bne.n	800a626 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a6a4 <USB_CoreInit+0xdc>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d105      	bne.n	800a61a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 faaa 	bl	800ab74 <USB_CoreReset>
 800a620:	4603      	mov	r3, r0
 800a622:	73fb      	strb	r3, [r7, #15]
 800a624:	e01b      	b.n	800a65e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa9e 	bl	800ab74 <USB_CoreReset>
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a63c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a640:	2b00      	cmp	r3, #0
 800a642:	d106      	bne.n	800a652 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a648:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a650:	e005      	b.n	800a65e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a656:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a65e:	7fbb      	ldrb	r3, [r7, #30]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d116      	bne.n	800a692 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a672:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <USB_CoreInit+0xe0>)
 800a674:	4313      	orrs	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f043 0206 	orr.w	r2, r3, #6
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f043 0220 	orr.w	r2, r3, #32
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a69e:	b004      	add	sp, #16
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	ffbdffbf 	.word	0xffbdffbf
 800a6a8:	03ee0000 	.word	0x03ee0000

0800a6ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f023 0201 	bic.w	r2, r3, #1
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d115      	bne.n	800a71c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a6fc:	200a      	movs	r0, #10
 800a6fe:	f7f6 ffff 	bl	8001700 <HAL_Delay>
      ms += 10U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	330a      	adds	r3, #10
 800a706:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fa25 	bl	800ab58 <USB_GetMode>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b01      	cmp	r3, #1
 800a712:	d01e      	beq.n	800a752 <USB_SetCurrentMode+0x84>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2bc7      	cmp	r3, #199	@ 0xc7
 800a718:	d9f0      	bls.n	800a6fc <USB_SetCurrentMode+0x2e>
 800a71a:	e01a      	b.n	800a752 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d115      	bne.n	800a74e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a72e:	200a      	movs	r0, #10
 800a730:	f7f6 ffe6 	bl	8001700 <HAL_Delay>
      ms += 10U;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	330a      	adds	r3, #10
 800a738:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa0c 	bl	800ab58 <USB_GetMode>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d005      	beq.n	800a752 <USB_SetCurrentMode+0x84>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2bc7      	cmp	r3, #199	@ 0xc7
 800a74a:	d9f0      	bls.n	800a72e <USB_SetCurrentMode+0x60>
 800a74c:	e001      	b.n	800a752 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e005      	b.n	800a75e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2bc8      	cmp	r3, #200	@ 0xc8
 800a756:	d101      	bne.n	800a75c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e000      	b.n	800a75e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a768:	b084      	sub	sp, #16
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a782:	2300      	movs	r3, #0
 800a784:	613b      	str	r3, [r7, #16]
 800a786:	e009      	b.n	800a79c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	3340      	adds	r3, #64	@ 0x40
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	2200      	movs	r2, #0
 800a794:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	3301      	adds	r3, #1
 800a79a:	613b      	str	r3, [r7, #16]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b0e      	cmp	r3, #14
 800a7a0:	d9f2      	bls.n	800a788 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11c      	bne.n	800a7e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7b8:	f043 0302 	orr.w	r3, r3, #2
 800a7bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e005      	b.n	800a7f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10d      	bne.n	800a820 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a80c:	2100      	movs	r1, #0
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f968 	bl	800aae4 <USB_SetDevSpeed>
 800a814:	e008      	b.n	800a828 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a816:	2101      	movs	r1, #1
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f963 	bl	800aae4 <USB_SetDevSpeed>
 800a81e:	e003      	b.n	800a828 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a820:	2103      	movs	r1, #3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f95e 	bl	800aae4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a828:	2110      	movs	r1, #16
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8fa 	bl	800aa24 <USB_FlushTxFifo>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f924 	bl	800aa88 <USB_FlushRxFifo>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a850:	461a      	mov	r2, r3
 800a852:	2300      	movs	r3, #0
 800a854:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a85c:	461a      	mov	r2, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a868:	461a      	mov	r2, r3
 800a86a:	2300      	movs	r3, #0
 800a86c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a86e:	2300      	movs	r3, #0
 800a870:	613b      	str	r3, [r7, #16]
 800a872:	e043      	b.n	800a8fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a886:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a88a:	d118      	bne.n	800a8be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	e013      	b.n	800a8d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	e008      	b.n	800a8d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a8f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	613b      	str	r3, [r7, #16]
 800a8fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a900:	461a      	mov	r2, r3
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	4293      	cmp	r3, r2
 800a906:	d3b5      	bcc.n	800a874 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a908:	2300      	movs	r3, #0
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	e043      	b.n	800a996 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a924:	d118      	bne.n	800a958 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a938:	461a      	mov	r2, r3
 800a93a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	e013      	b.n	800a96a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94e:	461a      	mov	r2, r3
 800a950:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	e008      	b.n	800a96a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a964:	461a      	mov	r2, r3
 800a966:	2300      	movs	r3, #0
 800a968:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	461a      	mov	r2, r3
 800a978:	2300      	movs	r3, #0
 800a97a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4413      	add	r3, r2
 800a984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a988:	461a      	mov	r2, r3
 800a98a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a98e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	3301      	adds	r3, #1
 800a994:	613b      	str	r3, [r7, #16]
 800a996:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a99a:	461a      	mov	r2, r3
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d3b5      	bcc.n	800a90e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a9c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f043 0210 	orr.w	r2, r3, #16
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800aa1c <USB_DevInit+0x2b4>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f043 0208 	orr.w	r2, r3, #8
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d105      	bne.n	800aa0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <USB_DevInit+0x2b8>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa18:	b004      	add	sp, #16
 800aa1a:	4770      	bx	lr
 800aa1c:	803c3800 	.word	0x803c3800
 800aa20:	40000004 	.word	0x40000004

0800aa24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3301      	adds	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa3e:	d901      	bls.n	800aa44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e01b      	b.n	800aa7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	daf2      	bge.n	800aa32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	019b      	lsls	r3, r3, #6
 800aa54:	f043 0220 	orr.w	r2, r3, #32
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa68:	d901      	bls.n	800aa6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e006      	b.n	800aa7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d0f0      	beq.n	800aa5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaa0:	d901      	bls.n	800aaa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e018      	b.n	800aad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	daf2      	bge.n	800aa94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2210      	movs	r2, #16
 800aab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aac4:	d901      	bls.n	800aaca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e006      	b.n	800aad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d0f0      	beq.n	800aab8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	68f9      	ldr	r1, [r7, #12]
 800ab00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab04:	4313      	orrs	r3, r2
 800ab06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab44:	f043 0302 	orr.w	r3, r3, #2
 800ab48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	f003 0301 	and.w	r3, r3, #1
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3301      	adds	r3, #1
 800ab84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab8c:	d901      	bls.n	800ab92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e01b      	b.n	800abca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	daf2      	bge.n	800ab80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	f043 0201 	orr.w	r2, r3, #1
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abb6:	d901      	bls.n	800abbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e006      	b.n	800abca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d0f0      	beq.n	800abaa <USB_CoreReset+0x36>

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <sniprintf>:
 800abd8:	b40c      	push	{r2, r3}
 800abda:	b530      	push	{r4, r5, lr}
 800abdc:	4b17      	ldr	r3, [pc, #92]	@ (800ac3c <sniprintf+0x64>)
 800abde:	1e0c      	subs	r4, r1, #0
 800abe0:	681d      	ldr	r5, [r3, #0]
 800abe2:	b09d      	sub	sp, #116	@ 0x74
 800abe4:	da08      	bge.n	800abf8 <sniprintf+0x20>
 800abe6:	238b      	movs	r3, #139	@ 0x8b
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f04f 30ff 	mov.w	r0, #4294967295
 800abee:	b01d      	add	sp, #116	@ 0x74
 800abf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abf4:	b002      	add	sp, #8
 800abf6:	4770      	bx	lr
 800abf8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800abfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac00:	bf14      	ite	ne
 800ac02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac06:	4623      	moveq	r3, r4
 800ac08:	9304      	str	r3, [sp, #16]
 800ac0a:	9307      	str	r3, [sp, #28]
 800ac0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac10:	9002      	str	r0, [sp, #8]
 800ac12:	9006      	str	r0, [sp, #24]
 800ac14:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ac1a:	ab21      	add	r3, sp, #132	@ 0x84
 800ac1c:	a902      	add	r1, sp, #8
 800ac1e:	4628      	mov	r0, r5
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	f000 f9a7 	bl	800af74 <_svfiprintf_r>
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	bfbc      	itt	lt
 800ac2a:	238b      	movlt	r3, #139	@ 0x8b
 800ac2c:	602b      	strlt	r3, [r5, #0]
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	d0dd      	beq.n	800abee <sniprintf+0x16>
 800ac32:	9b02      	ldr	r3, [sp, #8]
 800ac34:	2200      	movs	r2, #0
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	e7d9      	b.n	800abee <sniprintf+0x16>
 800ac3a:	bf00      	nop
 800ac3c:	24000014 	.word	0x24000014

0800ac40 <memset>:
 800ac40:	4402      	add	r2, r0
 800ac42:	4603      	mov	r3, r0
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d100      	bne.n	800ac4a <memset+0xa>
 800ac48:	4770      	bx	lr
 800ac4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac4e:	e7f9      	b.n	800ac44 <memset+0x4>

0800ac50 <strncmp>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	b16a      	cbz	r2, 800ac70 <strncmp+0x20>
 800ac54:	3901      	subs	r1, #1
 800ac56:	1884      	adds	r4, r0, r2
 800ac58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d103      	bne.n	800ac6c <strncmp+0x1c>
 800ac64:	42a0      	cmp	r0, r4
 800ac66:	d001      	beq.n	800ac6c <strncmp+0x1c>
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	d1f5      	bne.n	800ac58 <strncmp+0x8>
 800ac6c:	1ad0      	subs	r0, r2, r3
 800ac6e:	bd10      	pop	{r4, pc}
 800ac70:	4610      	mov	r0, r2
 800ac72:	e7fc      	b.n	800ac6e <strncmp+0x1e>

0800ac74 <__errno>:
 800ac74:	4b01      	ldr	r3, [pc, #4]	@ (800ac7c <__errno+0x8>)
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	24000014 	.word	0x24000014

0800ac80 <__libc_init_array>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	4d0d      	ldr	r5, [pc, #52]	@ (800acb8 <__libc_init_array+0x38>)
 800ac84:	4c0d      	ldr	r4, [pc, #52]	@ (800acbc <__libc_init_array+0x3c>)
 800ac86:	1b64      	subs	r4, r4, r5
 800ac88:	10a4      	asrs	r4, r4, #2
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	42a6      	cmp	r6, r4
 800ac8e:	d109      	bne.n	800aca4 <__libc_init_array+0x24>
 800ac90:	4d0b      	ldr	r5, [pc, #44]	@ (800acc0 <__libc_init_array+0x40>)
 800ac92:	4c0c      	ldr	r4, [pc, #48]	@ (800acc4 <__libc_init_array+0x44>)
 800ac94:	f000 fc66 	bl	800b564 <_init>
 800ac98:	1b64      	subs	r4, r4, r5
 800ac9a:	10a4      	asrs	r4, r4, #2
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	42a6      	cmp	r6, r4
 800aca0:	d105      	bne.n	800acae <__libc_init_array+0x2e>
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca8:	4798      	blx	r3
 800acaa:	3601      	adds	r6, #1
 800acac:	e7ee      	b.n	800ac8c <__libc_init_array+0xc>
 800acae:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb2:	4798      	blx	r3
 800acb4:	3601      	adds	r6, #1
 800acb6:	e7f2      	b.n	800ac9e <__libc_init_array+0x1e>
 800acb8:	0800b658 	.word	0x0800b658
 800acbc:	0800b658 	.word	0x0800b658
 800acc0:	0800b658 	.word	0x0800b658
 800acc4:	0800b65c 	.word	0x0800b65c

0800acc8 <__retarget_lock_acquire_recursive>:
 800acc8:	4770      	bx	lr

0800acca <__retarget_lock_release_recursive>:
 800acca:	4770      	bx	lr

0800accc <_free_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4605      	mov	r5, r0
 800acd0:	2900      	cmp	r1, #0
 800acd2:	d041      	beq.n	800ad58 <_free_r+0x8c>
 800acd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd8:	1f0c      	subs	r4, r1, #4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	bfb8      	it	lt
 800acde:	18e4      	addlt	r4, r4, r3
 800ace0:	f000 f8e0 	bl	800aea4 <__malloc_lock>
 800ace4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad5c <_free_r+0x90>)
 800ace6:	6813      	ldr	r3, [r2, #0]
 800ace8:	b933      	cbnz	r3, 800acf8 <_free_r+0x2c>
 800acea:	6063      	str	r3, [r4, #4]
 800acec:	6014      	str	r4, [r2, #0]
 800acee:	4628      	mov	r0, r5
 800acf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf4:	f000 b8dc 	b.w	800aeb0 <__malloc_unlock>
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d908      	bls.n	800ad0e <_free_r+0x42>
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	1821      	adds	r1, r4, r0
 800ad00:	428b      	cmp	r3, r1
 800ad02:	bf01      	itttt	eq
 800ad04:	6819      	ldreq	r1, [r3, #0]
 800ad06:	685b      	ldreq	r3, [r3, #4]
 800ad08:	1809      	addeq	r1, r1, r0
 800ad0a:	6021      	streq	r1, [r4, #0]
 800ad0c:	e7ed      	b.n	800acea <_free_r+0x1e>
 800ad0e:	461a      	mov	r2, r3
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	b10b      	cbz	r3, 800ad18 <_free_r+0x4c>
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d9fa      	bls.n	800ad0e <_free_r+0x42>
 800ad18:	6811      	ldr	r1, [r2, #0]
 800ad1a:	1850      	adds	r0, r2, r1
 800ad1c:	42a0      	cmp	r0, r4
 800ad1e:	d10b      	bne.n	800ad38 <_free_r+0x6c>
 800ad20:	6820      	ldr	r0, [r4, #0]
 800ad22:	4401      	add	r1, r0
 800ad24:	1850      	adds	r0, r2, r1
 800ad26:	4283      	cmp	r3, r0
 800ad28:	6011      	str	r1, [r2, #0]
 800ad2a:	d1e0      	bne.n	800acee <_free_r+0x22>
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	6053      	str	r3, [r2, #4]
 800ad32:	4408      	add	r0, r1
 800ad34:	6010      	str	r0, [r2, #0]
 800ad36:	e7da      	b.n	800acee <_free_r+0x22>
 800ad38:	d902      	bls.n	800ad40 <_free_r+0x74>
 800ad3a:	230c      	movs	r3, #12
 800ad3c:	602b      	str	r3, [r5, #0]
 800ad3e:	e7d6      	b.n	800acee <_free_r+0x22>
 800ad40:	6820      	ldr	r0, [r4, #0]
 800ad42:	1821      	adds	r1, r4, r0
 800ad44:	428b      	cmp	r3, r1
 800ad46:	bf04      	itt	eq
 800ad48:	6819      	ldreq	r1, [r3, #0]
 800ad4a:	685b      	ldreq	r3, [r3, #4]
 800ad4c:	6063      	str	r3, [r4, #4]
 800ad4e:	bf04      	itt	eq
 800ad50:	1809      	addeq	r1, r1, r0
 800ad52:	6021      	streq	r1, [r4, #0]
 800ad54:	6054      	str	r4, [r2, #4]
 800ad56:	e7ca      	b.n	800acee <_free_r+0x22>
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	bf00      	nop
 800ad5c:	24000968 	.word	0x24000968

0800ad60 <sbrk_aligned>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	4e0f      	ldr	r6, [pc, #60]	@ (800ada0 <sbrk_aligned+0x40>)
 800ad64:	460c      	mov	r4, r1
 800ad66:	6831      	ldr	r1, [r6, #0]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	b911      	cbnz	r1, 800ad72 <sbrk_aligned+0x12>
 800ad6c:	f000 fba6 	bl	800b4bc <_sbrk_r>
 800ad70:	6030      	str	r0, [r6, #0]
 800ad72:	4621      	mov	r1, r4
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 fba1 	bl	800b4bc <_sbrk_r>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	d103      	bne.n	800ad86 <sbrk_aligned+0x26>
 800ad7e:	f04f 34ff 	mov.w	r4, #4294967295
 800ad82:	4620      	mov	r0, r4
 800ad84:	bd70      	pop	{r4, r5, r6, pc}
 800ad86:	1cc4      	adds	r4, r0, #3
 800ad88:	f024 0403 	bic.w	r4, r4, #3
 800ad8c:	42a0      	cmp	r0, r4
 800ad8e:	d0f8      	beq.n	800ad82 <sbrk_aligned+0x22>
 800ad90:	1a21      	subs	r1, r4, r0
 800ad92:	4628      	mov	r0, r5
 800ad94:	f000 fb92 	bl	800b4bc <_sbrk_r>
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d1f2      	bne.n	800ad82 <sbrk_aligned+0x22>
 800ad9c:	e7ef      	b.n	800ad7e <sbrk_aligned+0x1e>
 800ad9e:	bf00      	nop
 800ada0:	24000964 	.word	0x24000964

0800ada4 <_malloc_r>:
 800ada4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada8:	1ccd      	adds	r5, r1, #3
 800adaa:	f025 0503 	bic.w	r5, r5, #3
 800adae:	3508      	adds	r5, #8
 800adb0:	2d0c      	cmp	r5, #12
 800adb2:	bf38      	it	cc
 800adb4:	250c      	movcc	r5, #12
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	4606      	mov	r6, r0
 800adba:	db01      	blt.n	800adc0 <_malloc_r+0x1c>
 800adbc:	42a9      	cmp	r1, r5
 800adbe:	d904      	bls.n	800adca <_malloc_r+0x26>
 800adc0:	230c      	movs	r3, #12
 800adc2:	6033      	str	r3, [r6, #0]
 800adc4:	2000      	movs	r0, #0
 800adc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aea0 <_malloc_r+0xfc>
 800adce:	f000 f869 	bl	800aea4 <__malloc_lock>
 800add2:	f8d8 3000 	ldr.w	r3, [r8]
 800add6:	461c      	mov	r4, r3
 800add8:	bb44      	cbnz	r4, 800ae2c <_malloc_r+0x88>
 800adda:	4629      	mov	r1, r5
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff ffbf 	bl	800ad60 <sbrk_aligned>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	4604      	mov	r4, r0
 800ade6:	d158      	bne.n	800ae9a <_malloc_r+0xf6>
 800ade8:	f8d8 4000 	ldr.w	r4, [r8]
 800adec:	4627      	mov	r7, r4
 800adee:	2f00      	cmp	r7, #0
 800adf0:	d143      	bne.n	800ae7a <_malloc_r+0xd6>
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	d04b      	beq.n	800ae8e <_malloc_r+0xea>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	4639      	mov	r1, r7
 800adfa:	4630      	mov	r0, r6
 800adfc:	eb04 0903 	add.w	r9, r4, r3
 800ae00:	f000 fb5c 	bl	800b4bc <_sbrk_r>
 800ae04:	4581      	cmp	r9, r0
 800ae06:	d142      	bne.n	800ae8e <_malloc_r+0xea>
 800ae08:	6821      	ldr	r1, [r4, #0]
 800ae0a:	1a6d      	subs	r5, r5, r1
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ffa6 	bl	800ad60 <sbrk_aligned>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d03a      	beq.n	800ae8e <_malloc_r+0xea>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	442b      	add	r3, r5
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	bb62      	cbnz	r2, 800ae80 <_malloc_r+0xdc>
 800ae26:	f8c8 7000 	str.w	r7, [r8]
 800ae2a:	e00f      	b.n	800ae4c <_malloc_r+0xa8>
 800ae2c:	6822      	ldr	r2, [r4, #0]
 800ae2e:	1b52      	subs	r2, r2, r5
 800ae30:	d420      	bmi.n	800ae74 <_malloc_r+0xd0>
 800ae32:	2a0b      	cmp	r2, #11
 800ae34:	d917      	bls.n	800ae66 <_malloc_r+0xc2>
 800ae36:	1961      	adds	r1, r4, r5
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	6025      	str	r5, [r4, #0]
 800ae3c:	bf18      	it	ne
 800ae3e:	6059      	strne	r1, [r3, #4]
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	bf08      	it	eq
 800ae44:	f8c8 1000 	streq.w	r1, [r8]
 800ae48:	5162      	str	r2, [r4, r5]
 800ae4a:	604b      	str	r3, [r1, #4]
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f000 f82f 	bl	800aeb0 <__malloc_unlock>
 800ae52:	f104 000b 	add.w	r0, r4, #11
 800ae56:	1d23      	adds	r3, r4, #4
 800ae58:	f020 0007 	bic.w	r0, r0, #7
 800ae5c:	1ac2      	subs	r2, r0, r3
 800ae5e:	bf1c      	itt	ne
 800ae60:	1a1b      	subne	r3, r3, r0
 800ae62:	50a3      	strne	r3, [r4, r2]
 800ae64:	e7af      	b.n	800adc6 <_malloc_r+0x22>
 800ae66:	6862      	ldr	r2, [r4, #4]
 800ae68:	42a3      	cmp	r3, r4
 800ae6a:	bf0c      	ite	eq
 800ae6c:	f8c8 2000 	streq.w	r2, [r8]
 800ae70:	605a      	strne	r2, [r3, #4]
 800ae72:	e7eb      	b.n	800ae4c <_malloc_r+0xa8>
 800ae74:	4623      	mov	r3, r4
 800ae76:	6864      	ldr	r4, [r4, #4]
 800ae78:	e7ae      	b.n	800add8 <_malloc_r+0x34>
 800ae7a:	463c      	mov	r4, r7
 800ae7c:	687f      	ldr	r7, [r7, #4]
 800ae7e:	e7b6      	b.n	800adee <_malloc_r+0x4a>
 800ae80:	461a      	mov	r2, r3
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d1fb      	bne.n	800ae80 <_malloc_r+0xdc>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	6053      	str	r3, [r2, #4]
 800ae8c:	e7de      	b.n	800ae4c <_malloc_r+0xa8>
 800ae8e:	230c      	movs	r3, #12
 800ae90:	6033      	str	r3, [r6, #0]
 800ae92:	4630      	mov	r0, r6
 800ae94:	f000 f80c 	bl	800aeb0 <__malloc_unlock>
 800ae98:	e794      	b.n	800adc4 <_malloc_r+0x20>
 800ae9a:	6005      	str	r5, [r0, #0]
 800ae9c:	e7d6      	b.n	800ae4c <_malloc_r+0xa8>
 800ae9e:	bf00      	nop
 800aea0:	24000968 	.word	0x24000968

0800aea4 <__malloc_lock>:
 800aea4:	4801      	ldr	r0, [pc, #4]	@ (800aeac <__malloc_lock+0x8>)
 800aea6:	f7ff bf0f 	b.w	800acc8 <__retarget_lock_acquire_recursive>
 800aeaa:	bf00      	nop
 800aeac:	24000960 	.word	0x24000960

0800aeb0 <__malloc_unlock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <__malloc_unlock+0x8>)
 800aeb2:	f7ff bf0a 	b.w	800acca <__retarget_lock_release_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	24000960 	.word	0x24000960

0800aebc <__ssputs_r>:
 800aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	688e      	ldr	r6, [r1, #8]
 800aec2:	461f      	mov	r7, r3
 800aec4:	42be      	cmp	r6, r7
 800aec6:	680b      	ldr	r3, [r1, #0]
 800aec8:	4682      	mov	sl, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	4690      	mov	r8, r2
 800aece:	d82d      	bhi.n	800af2c <__ssputs_r+0x70>
 800aed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aed8:	d026      	beq.n	800af28 <__ssputs_r+0x6c>
 800aeda:	6965      	ldr	r5, [r4, #20]
 800aedc:	6909      	ldr	r1, [r1, #16]
 800aede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aee2:	eba3 0901 	sub.w	r9, r3, r1
 800aee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeea:	1c7b      	adds	r3, r7, #1
 800aeec:	444b      	add	r3, r9
 800aeee:	106d      	asrs	r5, r5, #1
 800aef0:	429d      	cmp	r5, r3
 800aef2:	bf38      	it	cc
 800aef4:	461d      	movcc	r5, r3
 800aef6:	0553      	lsls	r3, r2, #21
 800aef8:	d527      	bpl.n	800af4a <__ssputs_r+0x8e>
 800aefa:	4629      	mov	r1, r5
 800aefc:	f7ff ff52 	bl	800ada4 <_malloc_r>
 800af00:	4606      	mov	r6, r0
 800af02:	b360      	cbz	r0, 800af5e <__ssputs_r+0xa2>
 800af04:	6921      	ldr	r1, [r4, #16]
 800af06:	464a      	mov	r2, r9
 800af08:	f000 fae8 	bl	800b4dc <memcpy>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	6126      	str	r6, [r4, #16]
 800af1a:	6165      	str	r5, [r4, #20]
 800af1c:	444e      	add	r6, r9
 800af1e:	eba5 0509 	sub.w	r5, r5, r9
 800af22:	6026      	str	r6, [r4, #0]
 800af24:	60a5      	str	r5, [r4, #8]
 800af26:	463e      	mov	r6, r7
 800af28:	42be      	cmp	r6, r7
 800af2a:	d900      	bls.n	800af2e <__ssputs_r+0x72>
 800af2c:	463e      	mov	r6, r7
 800af2e:	6820      	ldr	r0, [r4, #0]
 800af30:	4632      	mov	r2, r6
 800af32:	4641      	mov	r1, r8
 800af34:	f000 faa8 	bl	800b488 <memmove>
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	1b9b      	subs	r3, r3, r6
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	4433      	add	r3, r6
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	2000      	movs	r0, #0
 800af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4a:	462a      	mov	r2, r5
 800af4c:	f000 fad4 	bl	800b4f8 <_realloc_r>
 800af50:	4606      	mov	r6, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	d1e0      	bne.n	800af18 <__ssputs_r+0x5c>
 800af56:	6921      	ldr	r1, [r4, #16]
 800af58:	4650      	mov	r0, sl
 800af5a:	f7ff feb7 	bl	800accc <_free_r>
 800af5e:	230c      	movs	r3, #12
 800af60:	f8ca 3000 	str.w	r3, [sl]
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	e7e9      	b.n	800af46 <__ssputs_r+0x8a>
	...

0800af74 <_svfiprintf_r>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4698      	mov	r8, r3
 800af7a:	898b      	ldrh	r3, [r1, #12]
 800af7c:	061b      	lsls	r3, r3, #24
 800af7e:	b09d      	sub	sp, #116	@ 0x74
 800af80:	4607      	mov	r7, r0
 800af82:	460d      	mov	r5, r1
 800af84:	4614      	mov	r4, r2
 800af86:	d510      	bpl.n	800afaa <_svfiprintf_r+0x36>
 800af88:	690b      	ldr	r3, [r1, #16]
 800af8a:	b973      	cbnz	r3, 800afaa <_svfiprintf_r+0x36>
 800af8c:	2140      	movs	r1, #64	@ 0x40
 800af8e:	f7ff ff09 	bl	800ada4 <_malloc_r>
 800af92:	6028      	str	r0, [r5, #0]
 800af94:	6128      	str	r0, [r5, #16]
 800af96:	b930      	cbnz	r0, 800afa6 <_svfiprintf_r+0x32>
 800af98:	230c      	movs	r3, #12
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	f04f 30ff 	mov.w	r0, #4294967295
 800afa0:	b01d      	add	sp, #116	@ 0x74
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	2340      	movs	r3, #64	@ 0x40
 800afa8:	616b      	str	r3, [r5, #20]
 800afaa:	2300      	movs	r3, #0
 800afac:	9309      	str	r3, [sp, #36]	@ 0x24
 800afae:	2320      	movs	r3, #32
 800afb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb8:	2330      	movs	r3, #48	@ 0x30
 800afba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b158 <_svfiprintf_r+0x1e4>
 800afbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afc2:	f04f 0901 	mov.w	r9, #1
 800afc6:	4623      	mov	r3, r4
 800afc8:	469a      	mov	sl, r3
 800afca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afce:	b10a      	cbz	r2, 800afd4 <_svfiprintf_r+0x60>
 800afd0:	2a25      	cmp	r2, #37	@ 0x25
 800afd2:	d1f9      	bne.n	800afc8 <_svfiprintf_r+0x54>
 800afd4:	ebba 0b04 	subs.w	fp, sl, r4
 800afd8:	d00b      	beq.n	800aff2 <_svfiprintf_r+0x7e>
 800afda:	465b      	mov	r3, fp
 800afdc:	4622      	mov	r2, r4
 800afde:	4629      	mov	r1, r5
 800afe0:	4638      	mov	r0, r7
 800afe2:	f7ff ff6b 	bl	800aebc <__ssputs_r>
 800afe6:	3001      	adds	r0, #1
 800afe8:	f000 80a7 	beq.w	800b13a <_svfiprintf_r+0x1c6>
 800afec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afee:	445a      	add	r2, fp
 800aff0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aff2:	f89a 3000 	ldrb.w	r3, [sl]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 809f 	beq.w	800b13a <_svfiprintf_r+0x1c6>
 800affc:	2300      	movs	r3, #0
 800affe:	f04f 32ff 	mov.w	r2, #4294967295
 800b002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b006:	f10a 0a01 	add.w	sl, sl, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	9307      	str	r3, [sp, #28]
 800b00e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b012:	931a      	str	r3, [sp, #104]	@ 0x68
 800b014:	4654      	mov	r4, sl
 800b016:	2205      	movs	r2, #5
 800b018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01c:	484e      	ldr	r0, [pc, #312]	@ (800b158 <_svfiprintf_r+0x1e4>)
 800b01e:	f7f5 f967 	bl	80002f0 <memchr>
 800b022:	9a04      	ldr	r2, [sp, #16]
 800b024:	b9d8      	cbnz	r0, 800b05e <_svfiprintf_r+0xea>
 800b026:	06d0      	lsls	r0, r2, #27
 800b028:	bf44      	itt	mi
 800b02a:	2320      	movmi	r3, #32
 800b02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b030:	0711      	lsls	r1, r2, #28
 800b032:	bf44      	itt	mi
 800b034:	232b      	movmi	r3, #43	@ 0x2b
 800b036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b03a:	f89a 3000 	ldrb.w	r3, [sl]
 800b03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b040:	d015      	beq.n	800b06e <_svfiprintf_r+0xfa>
 800b042:	9a07      	ldr	r2, [sp, #28]
 800b044:	4654      	mov	r4, sl
 800b046:	2000      	movs	r0, #0
 800b048:	f04f 0c0a 	mov.w	ip, #10
 800b04c:	4621      	mov	r1, r4
 800b04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b052:	3b30      	subs	r3, #48	@ 0x30
 800b054:	2b09      	cmp	r3, #9
 800b056:	d94b      	bls.n	800b0f0 <_svfiprintf_r+0x17c>
 800b058:	b1b0      	cbz	r0, 800b088 <_svfiprintf_r+0x114>
 800b05a:	9207      	str	r2, [sp, #28]
 800b05c:	e014      	b.n	800b088 <_svfiprintf_r+0x114>
 800b05e:	eba0 0308 	sub.w	r3, r0, r8
 800b062:	fa09 f303 	lsl.w	r3, r9, r3
 800b066:	4313      	orrs	r3, r2
 800b068:	9304      	str	r3, [sp, #16]
 800b06a:	46a2      	mov	sl, r4
 800b06c:	e7d2      	b.n	800b014 <_svfiprintf_r+0xa0>
 800b06e:	9b03      	ldr	r3, [sp, #12]
 800b070:	1d19      	adds	r1, r3, #4
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	9103      	str	r1, [sp, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	bfbb      	ittet	lt
 800b07a:	425b      	neglt	r3, r3
 800b07c:	f042 0202 	orrlt.w	r2, r2, #2
 800b080:	9307      	strge	r3, [sp, #28]
 800b082:	9307      	strlt	r3, [sp, #28]
 800b084:	bfb8      	it	lt
 800b086:	9204      	strlt	r2, [sp, #16]
 800b088:	7823      	ldrb	r3, [r4, #0]
 800b08a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b08c:	d10a      	bne.n	800b0a4 <_svfiprintf_r+0x130>
 800b08e:	7863      	ldrb	r3, [r4, #1]
 800b090:	2b2a      	cmp	r3, #42	@ 0x2a
 800b092:	d132      	bne.n	800b0fa <_svfiprintf_r+0x186>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	1d1a      	adds	r2, r3, #4
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	9203      	str	r2, [sp, #12]
 800b09c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0a0:	3402      	adds	r4, #2
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b168 <_svfiprintf_r+0x1f4>
 800b0a8:	7821      	ldrb	r1, [r4, #0]
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	4650      	mov	r0, sl
 800b0ae:	f7f5 f91f 	bl	80002f0 <memchr>
 800b0b2:	b138      	cbz	r0, 800b0c4 <_svfiprintf_r+0x150>
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	eba0 000a 	sub.w	r0, r0, sl
 800b0ba:	2240      	movs	r2, #64	@ 0x40
 800b0bc:	4082      	lsls	r2, r0
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	3401      	adds	r4, #1
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	4824      	ldr	r0, [pc, #144]	@ (800b15c <_svfiprintf_r+0x1e8>)
 800b0ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0ce:	2206      	movs	r2, #6
 800b0d0:	f7f5 f90e 	bl	80002f0 <memchr>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d036      	beq.n	800b146 <_svfiprintf_r+0x1d2>
 800b0d8:	4b21      	ldr	r3, [pc, #132]	@ (800b160 <_svfiprintf_r+0x1ec>)
 800b0da:	bb1b      	cbnz	r3, 800b124 <_svfiprintf_r+0x1b0>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	3307      	adds	r3, #7
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ea:	4433      	add	r3, r6
 800b0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0ee:	e76a      	b.n	800afc6 <_svfiprintf_r+0x52>
 800b0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7a8      	b.n	800b04c <_svfiprintf_r+0xd8>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	4619      	mov	r1, r3
 800b102:	f04f 0c0a 	mov.w	ip, #10
 800b106:	4620      	mov	r0, r4
 800b108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b10c:	3a30      	subs	r2, #48	@ 0x30
 800b10e:	2a09      	cmp	r2, #9
 800b110:	d903      	bls.n	800b11a <_svfiprintf_r+0x1a6>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0c6      	beq.n	800b0a4 <_svfiprintf_r+0x130>
 800b116:	9105      	str	r1, [sp, #20]
 800b118:	e7c4      	b.n	800b0a4 <_svfiprintf_r+0x130>
 800b11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b11e:	4604      	mov	r4, r0
 800b120:	2301      	movs	r3, #1
 800b122:	e7f0      	b.n	800b106 <_svfiprintf_r+0x192>
 800b124:	ab03      	add	r3, sp, #12
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	462a      	mov	r2, r5
 800b12a:	4b0e      	ldr	r3, [pc, #56]	@ (800b164 <_svfiprintf_r+0x1f0>)
 800b12c:	a904      	add	r1, sp, #16
 800b12e:	4638      	mov	r0, r7
 800b130:	f3af 8000 	nop.w
 800b134:	1c42      	adds	r2, r0, #1
 800b136:	4606      	mov	r6, r0
 800b138:	d1d6      	bne.n	800b0e8 <_svfiprintf_r+0x174>
 800b13a:	89ab      	ldrh	r3, [r5, #12]
 800b13c:	065b      	lsls	r3, r3, #25
 800b13e:	f53f af2d 	bmi.w	800af9c <_svfiprintf_r+0x28>
 800b142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b144:	e72c      	b.n	800afa0 <_svfiprintf_r+0x2c>
 800b146:	ab03      	add	r3, sp, #12
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <_svfiprintf_r+0x1f0>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	4638      	mov	r0, r7
 800b152:	f000 f879 	bl	800b248 <_printf_i>
 800b156:	e7ed      	b.n	800b134 <_svfiprintf_r+0x1c0>
 800b158:	0800b61c 	.word	0x0800b61c
 800b15c:	0800b626 	.word	0x0800b626
 800b160:	00000000 	.word	0x00000000
 800b164:	0800aebd 	.word	0x0800aebd
 800b168:	0800b622 	.word	0x0800b622

0800b16c <_printf_common>:
 800b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b170:	4616      	mov	r6, r2
 800b172:	4698      	mov	r8, r3
 800b174:	688a      	ldr	r2, [r1, #8]
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bfb8      	it	lt
 800b180:	4613      	movlt	r3, r2
 800b182:	6033      	str	r3, [r6, #0]
 800b184:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b188:	4607      	mov	r7, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	b10a      	cbz	r2, 800b192 <_printf_common+0x26>
 800b18e:	3301      	adds	r3, #1
 800b190:	6033      	str	r3, [r6, #0]
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	0699      	lsls	r1, r3, #26
 800b196:	bf42      	ittt	mi
 800b198:	6833      	ldrmi	r3, [r6, #0]
 800b19a:	3302      	addmi	r3, #2
 800b19c:	6033      	strmi	r3, [r6, #0]
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	f015 0506 	ands.w	r5, r5, #6
 800b1a4:	d106      	bne.n	800b1b4 <_printf_common+0x48>
 800b1a6:	f104 0a19 	add.w	sl, r4, #25
 800b1aa:	68e3      	ldr	r3, [r4, #12]
 800b1ac:	6832      	ldr	r2, [r6, #0]
 800b1ae:	1a9b      	subs	r3, r3, r2
 800b1b0:	42ab      	cmp	r3, r5
 800b1b2:	dc26      	bgt.n	800b202 <_printf_common+0x96>
 800b1b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1b8:	6822      	ldr	r2, [r4, #0]
 800b1ba:	3b00      	subs	r3, #0
 800b1bc:	bf18      	it	ne
 800b1be:	2301      	movne	r3, #1
 800b1c0:	0692      	lsls	r2, r2, #26
 800b1c2:	d42b      	bmi.n	800b21c <_printf_common+0xb0>
 800b1c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1c8:	4641      	mov	r1, r8
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	47c8      	blx	r9
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d01e      	beq.n	800b210 <_printf_common+0xa4>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	6922      	ldr	r2, [r4, #16]
 800b1d6:	f003 0306 	and.w	r3, r3, #6
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	bf02      	ittt	eq
 800b1de:	68e5      	ldreq	r5, [r4, #12]
 800b1e0:	6833      	ldreq	r3, [r6, #0]
 800b1e2:	1aed      	subeq	r5, r5, r3
 800b1e4:	68a3      	ldr	r3, [r4, #8]
 800b1e6:	bf0c      	ite	eq
 800b1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1ec:	2500      	movne	r5, #0
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	bfc4      	itt	gt
 800b1f2:	1a9b      	subgt	r3, r3, r2
 800b1f4:	18ed      	addgt	r5, r5, r3
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	341a      	adds	r4, #26
 800b1fa:	42b5      	cmp	r5, r6
 800b1fc:	d11a      	bne.n	800b234 <_printf_common+0xc8>
 800b1fe:	2000      	movs	r0, #0
 800b200:	e008      	b.n	800b214 <_printf_common+0xa8>
 800b202:	2301      	movs	r3, #1
 800b204:	4652      	mov	r2, sl
 800b206:	4641      	mov	r1, r8
 800b208:	4638      	mov	r0, r7
 800b20a:	47c8      	blx	r9
 800b20c:	3001      	adds	r0, #1
 800b20e:	d103      	bne.n	800b218 <_printf_common+0xac>
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	3501      	adds	r5, #1
 800b21a:	e7c6      	b.n	800b1aa <_printf_common+0x3e>
 800b21c:	18e1      	adds	r1, r4, r3
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	2030      	movs	r0, #48	@ 0x30
 800b222:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b226:	4422      	add	r2, r4
 800b228:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b22c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b230:	3302      	adds	r3, #2
 800b232:	e7c7      	b.n	800b1c4 <_printf_common+0x58>
 800b234:	2301      	movs	r3, #1
 800b236:	4622      	mov	r2, r4
 800b238:	4641      	mov	r1, r8
 800b23a:	4638      	mov	r0, r7
 800b23c:	47c8      	blx	r9
 800b23e:	3001      	adds	r0, #1
 800b240:	d0e6      	beq.n	800b210 <_printf_common+0xa4>
 800b242:	3601      	adds	r6, #1
 800b244:	e7d9      	b.n	800b1fa <_printf_common+0x8e>
	...

0800b248 <_printf_i>:
 800b248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	7e0f      	ldrb	r7, [r1, #24]
 800b24e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b250:	2f78      	cmp	r7, #120	@ 0x78
 800b252:	4691      	mov	r9, r2
 800b254:	4680      	mov	r8, r0
 800b256:	460c      	mov	r4, r1
 800b258:	469a      	mov	sl, r3
 800b25a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b25e:	d807      	bhi.n	800b270 <_printf_i+0x28>
 800b260:	2f62      	cmp	r7, #98	@ 0x62
 800b262:	d80a      	bhi.n	800b27a <_printf_i+0x32>
 800b264:	2f00      	cmp	r7, #0
 800b266:	f000 80d2 	beq.w	800b40e <_printf_i+0x1c6>
 800b26a:	2f58      	cmp	r7, #88	@ 0x58
 800b26c:	f000 80b9 	beq.w	800b3e2 <_printf_i+0x19a>
 800b270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b278:	e03a      	b.n	800b2f0 <_printf_i+0xa8>
 800b27a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b27e:	2b15      	cmp	r3, #21
 800b280:	d8f6      	bhi.n	800b270 <_printf_i+0x28>
 800b282:	a101      	add	r1, pc, #4	@ (adr r1, 800b288 <_printf_i+0x40>)
 800b284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b2f5 	.word	0x0800b2f5
 800b290:	0800b271 	.word	0x0800b271
 800b294:	0800b271 	.word	0x0800b271
 800b298:	0800b271 	.word	0x0800b271
 800b29c:	0800b271 	.word	0x0800b271
 800b2a0:	0800b2f5 	.word	0x0800b2f5
 800b2a4:	0800b271 	.word	0x0800b271
 800b2a8:	0800b271 	.word	0x0800b271
 800b2ac:	0800b271 	.word	0x0800b271
 800b2b0:	0800b271 	.word	0x0800b271
 800b2b4:	0800b3f5 	.word	0x0800b3f5
 800b2b8:	0800b31f 	.word	0x0800b31f
 800b2bc:	0800b3af 	.word	0x0800b3af
 800b2c0:	0800b271 	.word	0x0800b271
 800b2c4:	0800b271 	.word	0x0800b271
 800b2c8:	0800b417 	.word	0x0800b417
 800b2cc:	0800b271 	.word	0x0800b271
 800b2d0:	0800b31f 	.word	0x0800b31f
 800b2d4:	0800b271 	.word	0x0800b271
 800b2d8:	0800b271 	.word	0x0800b271
 800b2dc:	0800b3b7 	.word	0x0800b3b7
 800b2e0:	6833      	ldr	r3, [r6, #0]
 800b2e2:	1d1a      	adds	r2, r3, #4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6032      	str	r2, [r6, #0]
 800b2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e09d      	b.n	800b430 <_printf_i+0x1e8>
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	6820      	ldr	r0, [r4, #0]
 800b2f8:	1d19      	adds	r1, r3, #4
 800b2fa:	6031      	str	r1, [r6, #0]
 800b2fc:	0606      	lsls	r6, r0, #24
 800b2fe:	d501      	bpl.n	800b304 <_printf_i+0xbc>
 800b300:	681d      	ldr	r5, [r3, #0]
 800b302:	e003      	b.n	800b30c <_printf_i+0xc4>
 800b304:	0645      	lsls	r5, r0, #25
 800b306:	d5fb      	bpl.n	800b300 <_printf_i+0xb8>
 800b308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	da03      	bge.n	800b318 <_printf_i+0xd0>
 800b310:	232d      	movs	r3, #45	@ 0x2d
 800b312:	426d      	negs	r5, r5
 800b314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b318:	4859      	ldr	r0, [pc, #356]	@ (800b480 <_printf_i+0x238>)
 800b31a:	230a      	movs	r3, #10
 800b31c:	e011      	b.n	800b342 <_printf_i+0xfa>
 800b31e:	6821      	ldr	r1, [r4, #0]
 800b320:	6833      	ldr	r3, [r6, #0]
 800b322:	0608      	lsls	r0, r1, #24
 800b324:	f853 5b04 	ldr.w	r5, [r3], #4
 800b328:	d402      	bmi.n	800b330 <_printf_i+0xe8>
 800b32a:	0649      	lsls	r1, r1, #25
 800b32c:	bf48      	it	mi
 800b32e:	b2ad      	uxthmi	r5, r5
 800b330:	2f6f      	cmp	r7, #111	@ 0x6f
 800b332:	4853      	ldr	r0, [pc, #332]	@ (800b480 <_printf_i+0x238>)
 800b334:	6033      	str	r3, [r6, #0]
 800b336:	bf14      	ite	ne
 800b338:	230a      	movne	r3, #10
 800b33a:	2308      	moveq	r3, #8
 800b33c:	2100      	movs	r1, #0
 800b33e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b342:	6866      	ldr	r6, [r4, #4]
 800b344:	60a6      	str	r6, [r4, #8]
 800b346:	2e00      	cmp	r6, #0
 800b348:	bfa2      	ittt	ge
 800b34a:	6821      	ldrge	r1, [r4, #0]
 800b34c:	f021 0104 	bicge.w	r1, r1, #4
 800b350:	6021      	strge	r1, [r4, #0]
 800b352:	b90d      	cbnz	r5, 800b358 <_printf_i+0x110>
 800b354:	2e00      	cmp	r6, #0
 800b356:	d04b      	beq.n	800b3f0 <_printf_i+0x1a8>
 800b358:	4616      	mov	r6, r2
 800b35a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b35e:	fb03 5711 	mls	r7, r3, r1, r5
 800b362:	5dc7      	ldrb	r7, [r0, r7]
 800b364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b368:	462f      	mov	r7, r5
 800b36a:	42bb      	cmp	r3, r7
 800b36c:	460d      	mov	r5, r1
 800b36e:	d9f4      	bls.n	800b35a <_printf_i+0x112>
 800b370:	2b08      	cmp	r3, #8
 800b372:	d10b      	bne.n	800b38c <_printf_i+0x144>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	07df      	lsls	r7, r3, #31
 800b378:	d508      	bpl.n	800b38c <_printf_i+0x144>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	6861      	ldr	r1, [r4, #4]
 800b37e:	4299      	cmp	r1, r3
 800b380:	bfde      	ittt	le
 800b382:	2330      	movle	r3, #48	@ 0x30
 800b384:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b388:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b38c:	1b92      	subs	r2, r2, r6
 800b38e:	6122      	str	r2, [r4, #16]
 800b390:	f8cd a000 	str.w	sl, [sp]
 800b394:	464b      	mov	r3, r9
 800b396:	aa03      	add	r2, sp, #12
 800b398:	4621      	mov	r1, r4
 800b39a:	4640      	mov	r0, r8
 800b39c:	f7ff fee6 	bl	800b16c <_printf_common>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d14a      	bne.n	800b43a <_printf_i+0x1f2>
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a8:	b004      	add	sp, #16
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	f043 0320 	orr.w	r3, r3, #32
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	4833      	ldr	r0, [pc, #204]	@ (800b484 <_printf_i+0x23c>)
 800b3b8:	2778      	movs	r7, #120	@ 0x78
 800b3ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	6831      	ldr	r1, [r6, #0]
 800b3c2:	061f      	lsls	r7, r3, #24
 800b3c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3c8:	d402      	bmi.n	800b3d0 <_printf_i+0x188>
 800b3ca:	065f      	lsls	r7, r3, #25
 800b3cc:	bf48      	it	mi
 800b3ce:	b2ad      	uxthmi	r5, r5
 800b3d0:	6031      	str	r1, [r6, #0]
 800b3d2:	07d9      	lsls	r1, r3, #31
 800b3d4:	bf44      	itt	mi
 800b3d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b3da:	6023      	strmi	r3, [r4, #0]
 800b3dc:	b11d      	cbz	r5, 800b3e6 <_printf_i+0x19e>
 800b3de:	2310      	movs	r3, #16
 800b3e0:	e7ac      	b.n	800b33c <_printf_i+0xf4>
 800b3e2:	4827      	ldr	r0, [pc, #156]	@ (800b480 <_printf_i+0x238>)
 800b3e4:	e7e9      	b.n	800b3ba <_printf_i+0x172>
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	f023 0320 	bic.w	r3, r3, #32
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	e7f6      	b.n	800b3de <_printf_i+0x196>
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	e7bd      	b.n	800b370 <_printf_i+0x128>
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	6825      	ldr	r5, [r4, #0]
 800b3f8:	6961      	ldr	r1, [r4, #20]
 800b3fa:	1d18      	adds	r0, r3, #4
 800b3fc:	6030      	str	r0, [r6, #0]
 800b3fe:	062e      	lsls	r6, r5, #24
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	d501      	bpl.n	800b408 <_printf_i+0x1c0>
 800b404:	6019      	str	r1, [r3, #0]
 800b406:	e002      	b.n	800b40e <_printf_i+0x1c6>
 800b408:	0668      	lsls	r0, r5, #25
 800b40a:	d5fb      	bpl.n	800b404 <_printf_i+0x1bc>
 800b40c:	8019      	strh	r1, [r3, #0]
 800b40e:	2300      	movs	r3, #0
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	4616      	mov	r6, r2
 800b414:	e7bc      	b.n	800b390 <_printf_i+0x148>
 800b416:	6833      	ldr	r3, [r6, #0]
 800b418:	1d1a      	adds	r2, r3, #4
 800b41a:	6032      	str	r2, [r6, #0]
 800b41c:	681e      	ldr	r6, [r3, #0]
 800b41e:	6862      	ldr	r2, [r4, #4]
 800b420:	2100      	movs	r1, #0
 800b422:	4630      	mov	r0, r6
 800b424:	f7f4 ff64 	bl	80002f0 <memchr>
 800b428:	b108      	cbz	r0, 800b42e <_printf_i+0x1e6>
 800b42a:	1b80      	subs	r0, r0, r6
 800b42c:	6060      	str	r0, [r4, #4]
 800b42e:	6863      	ldr	r3, [r4, #4]
 800b430:	6123      	str	r3, [r4, #16]
 800b432:	2300      	movs	r3, #0
 800b434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b438:	e7aa      	b.n	800b390 <_printf_i+0x148>
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	4632      	mov	r2, r6
 800b43e:	4649      	mov	r1, r9
 800b440:	4640      	mov	r0, r8
 800b442:	47d0      	blx	sl
 800b444:	3001      	adds	r0, #1
 800b446:	d0ad      	beq.n	800b3a4 <_printf_i+0x15c>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	079b      	lsls	r3, r3, #30
 800b44c:	d413      	bmi.n	800b476 <_printf_i+0x22e>
 800b44e:	68e0      	ldr	r0, [r4, #12]
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	4298      	cmp	r0, r3
 800b454:	bfb8      	it	lt
 800b456:	4618      	movlt	r0, r3
 800b458:	e7a6      	b.n	800b3a8 <_printf_i+0x160>
 800b45a:	2301      	movs	r3, #1
 800b45c:	4632      	mov	r2, r6
 800b45e:	4649      	mov	r1, r9
 800b460:	4640      	mov	r0, r8
 800b462:	47d0      	blx	sl
 800b464:	3001      	adds	r0, #1
 800b466:	d09d      	beq.n	800b3a4 <_printf_i+0x15c>
 800b468:	3501      	adds	r5, #1
 800b46a:	68e3      	ldr	r3, [r4, #12]
 800b46c:	9903      	ldr	r1, [sp, #12]
 800b46e:	1a5b      	subs	r3, r3, r1
 800b470:	42ab      	cmp	r3, r5
 800b472:	dcf2      	bgt.n	800b45a <_printf_i+0x212>
 800b474:	e7eb      	b.n	800b44e <_printf_i+0x206>
 800b476:	2500      	movs	r5, #0
 800b478:	f104 0619 	add.w	r6, r4, #25
 800b47c:	e7f5      	b.n	800b46a <_printf_i+0x222>
 800b47e:	bf00      	nop
 800b480:	0800b62d 	.word	0x0800b62d
 800b484:	0800b63e 	.word	0x0800b63e

0800b488 <memmove>:
 800b488:	4288      	cmp	r0, r1
 800b48a:	b510      	push	{r4, lr}
 800b48c:	eb01 0402 	add.w	r4, r1, r2
 800b490:	d902      	bls.n	800b498 <memmove+0x10>
 800b492:	4284      	cmp	r4, r0
 800b494:	4623      	mov	r3, r4
 800b496:	d807      	bhi.n	800b4a8 <memmove+0x20>
 800b498:	1e43      	subs	r3, r0, #1
 800b49a:	42a1      	cmp	r1, r4
 800b49c:	d008      	beq.n	800b4b0 <memmove+0x28>
 800b49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4a6:	e7f8      	b.n	800b49a <memmove+0x12>
 800b4a8:	4402      	add	r2, r0
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	d100      	bne.n	800b4b2 <memmove+0x2a>
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ba:	e7f7      	b.n	800b4ac <memmove+0x24>

0800b4bc <_sbrk_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d06      	ldr	r5, [pc, #24]	@ (800b4d8 <_sbrk_r+0x1c>)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	602b      	str	r3, [r5, #0]
 800b4c8:	f7f5 ffa0 	bl	800140c <_sbrk>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_sbrk_r+0x1a>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_sbrk_r+0x1a>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	2400095c 	.word	0x2400095c

0800b4dc <memcpy>:
 800b4dc:	440a      	add	r2, r1
 800b4de:	4291      	cmp	r1, r2
 800b4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4e4:	d100      	bne.n	800b4e8 <memcpy+0xc>
 800b4e6:	4770      	bx	lr
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	d1f9      	bne.n	800b4ea <memcpy+0xe>
 800b4f6:	bd10      	pop	{r4, pc}

0800b4f8 <_realloc_r>:
 800b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4615      	mov	r5, r2
 800b500:	460c      	mov	r4, r1
 800b502:	b921      	cbnz	r1, 800b50e <_realloc_r+0x16>
 800b504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	4611      	mov	r1, r2
 800b50a:	f7ff bc4b 	b.w	800ada4 <_malloc_r>
 800b50e:	b92a      	cbnz	r2, 800b51c <_realloc_r+0x24>
 800b510:	f7ff fbdc 	bl	800accc <_free_r>
 800b514:	2400      	movs	r4, #0
 800b516:	4620      	mov	r0, r4
 800b518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51c:	f000 f81a 	bl	800b554 <_malloc_usable_size_r>
 800b520:	4285      	cmp	r5, r0
 800b522:	4606      	mov	r6, r0
 800b524:	d802      	bhi.n	800b52c <_realloc_r+0x34>
 800b526:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b52a:	d8f4      	bhi.n	800b516 <_realloc_r+0x1e>
 800b52c:	4629      	mov	r1, r5
 800b52e:	4640      	mov	r0, r8
 800b530:	f7ff fc38 	bl	800ada4 <_malloc_r>
 800b534:	4607      	mov	r7, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d0ec      	beq.n	800b514 <_realloc_r+0x1c>
 800b53a:	42b5      	cmp	r5, r6
 800b53c:	462a      	mov	r2, r5
 800b53e:	4621      	mov	r1, r4
 800b540:	bf28      	it	cs
 800b542:	4632      	movcs	r2, r6
 800b544:	f7ff ffca 	bl	800b4dc <memcpy>
 800b548:	4621      	mov	r1, r4
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7ff fbbe 	bl	800accc <_free_r>
 800b550:	463c      	mov	r4, r7
 800b552:	e7e0      	b.n	800b516 <_realloc_r+0x1e>

0800b554 <_malloc_usable_size_r>:
 800b554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b558:	1f18      	subs	r0, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfbc      	itt	lt
 800b55e:	580b      	ldrlt	r3, [r1, r0]
 800b560:	18c0      	addlt	r0, r0, r3
 800b562:	4770      	bx	lr

0800b564 <_init>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr

0800b570 <_fini>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	bf00      	nop
 800b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b576:	bc08      	pop	{r3}
 800b578:	469e      	mov	lr, r3
 800b57a:	4770      	bx	lr
