
Projeto9_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b144  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800b3e4  0800b3e4  0000c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b4a8  0800b4a8  0000c4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b4b0  0800b4b0  0000c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800b4b8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800b51c  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b57c  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  24000124  0800b5dc  0000d124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000958  0800b5dc  0000d958  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1ba  00000000  00000000  0000d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003179  00000000  00000000  0002a30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1f  00000000  00000000  0002e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385d6  00000000  00000000  0002f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da15  00000000  00000000  00067cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001627dd  00000000  00000000  000856f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e7ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005860  00000000  00000000  001e7f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001ed774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b3cc 	.word	0x0800b3cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800b3cc 	.word	0x0800b3cc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 ff6c 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f90e 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fa96 	bl	8000bbc <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 f98a 	bl	80009a8 <MX_ETH_Init>
  MX_I2C1_Init();
 8000694:	f000 f9d4 	bl	8000a40 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fa12 	bl	8000ac0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069c:	f000 fa5c 	bl	8000b58 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006a0:	2209      	movs	r2, #9
 80006a2:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <main+0x34>)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <main+0x38>)
 80006a6:	f007 f9d1 	bl	8007a4c <HAL_UART_Receive_IT>

  	  ExecuteProgram();
 80006aa:	f000 f807 	bl	80006bc <ExecuteProgram>
  {
 80006ae:	bf00      	nop
 80006b0:	e7f6      	b.n	80006a0 <main+0x20>
 80006b2:	bf00      	nop
 80006b4:	240007f4 	.word	0x240007f4
 80006b8:	2400027c 	.word	0x2400027c

080006bc <ExecuteProgram>:
  }
  /* USER CODE END 3 */
}

void ExecuteProgram()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if(execute_flag == '1'){
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ExecuteProgram+0x40>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b31      	cmp	r3, #49	@ 0x31
 80006c6:	d102      	bne.n	80006ce <ExecuteProgram+0x12>
		Read_LDR();
 80006c8:	f000 f81a 	bl	8000700 <Read_LDR>
	}
	else if(execute_flag == '4'){
		Write_DAC();
	}

}
 80006cc:	e013      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '2'){
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <ExecuteProgram+0x40>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b32      	cmp	r3, #50	@ 0x32
 80006d4:	d102      	bne.n	80006dc <ExecuteProgram+0x20>
		Read_Temp();
 80006d6:	f000 f857 	bl	8000788 <Read_Temp>
}
 80006da:	e00c      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '3'){
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <ExecuteProgram+0x40>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b33      	cmp	r3, #51	@ 0x33
 80006e2:	d102      	bne.n	80006ea <ExecuteProgram+0x2e>
		Read_Pot();
 80006e4:	f000 f894 	bl	8000810 <Read_Pot>
}
 80006e8:	e005      	b.n	80006f6 <ExecuteProgram+0x3a>
	else if(execute_flag == '4'){
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <ExecuteProgram+0x40>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b34      	cmp	r3, #52	@ 0x34
 80006f0:	d101      	bne.n	80006f6 <ExecuteProgram+0x3a>
		Write_DAC();
 80006f2:	f000 f8d1 	bl	8000898 <Write_DAC>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000000 	.word	0x24000000

08000700 <Read_LDR>:

void Read_LDR(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	 // Read analog data from A0 (channel 0) of the PCF8591
		  uint8_t LDR = PCF8591_ReadAnalog(0);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fb34 	bl	8000d74 <PCF8591_ReadAnalog>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 ffb7 	bl	8001684 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN0: ");
 8000716:	1d38      	adds	r0, r7, #4
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <Read_LDR+0x74>)
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <Read_LDR+0x78>)
 800071c:	2108      	movs	r1, #8
 800071e:	f00a f98f 	bl	800aa40 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fddb 	bl	80002e0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4812      	ldr	r0, [pc, #72]	@ (800077c <Read_LDR+0x7c>)
 8000734:	f007 f8f6 	bl	8007924 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 ffa3 	bl	8001684 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", LDR);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	1d38      	adds	r0, r7, #4
 8000742:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <Read_LDR+0x80>)
 8000744:	2104      	movs	r1, #4
 8000746:	f00a f97b 	bl	800aa40 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fdc7 	bl	80002e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4808      	ldr	r0, [pc, #32]	@ (800077c <Read_LDR+0x7c>)
 800075c:	f007 f8e2 	bl	8007924 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f000 ff8f 	bl	8001684 <HAL_Delay>
		  execute_flag = '0';
 8000766:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <Read_LDR+0x84>)
 8000768:	2230      	movs	r2, #48	@ 0x30
 800076a:	701a      	strb	r2, [r3, #0]


}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800b3e4 	.word	0x0800b3e4
 8000778:	0800b3ec 	.word	0x0800b3ec
 800077c:	2400027c 	.word	0x2400027c
 8000780:	0800b3f4 	.word	0x0800b3f4
 8000784:	24000000 	.word	0x24000000

08000788 <Read_Temp>:

void Read_Temp(){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
	 // Read analog data from A1 (channel 1) of the PCF8591
		  uint8_t Temp = PCF8591_ReadAnalog(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 faf0 	bl	8000d74 <PCF8591_ReadAnalog>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
		  HAL_Delay(100); // Wait before next reading
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f000 ff73 	bl	8001684 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN1: ");
 800079e:	1d38      	adds	r0, r7, #4
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <Read_Temp+0x74>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <Read_Temp+0x78>)
 80007a4:	2108      	movs	r1, #8
 80007a6:	f00a f94b 	bl	800aa40 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd97 	bl	80002e0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4812      	ldr	r0, [pc, #72]	@ (8000804 <Read_Temp+0x7c>)
 80007bc:	f007 f8b2 	bl	8007924 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f000 ff5f 	bl	8001684 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Temp);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	1d38      	adds	r0, r7, #4
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <Read_Temp+0x80>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	f00a f937 	bl	800aa40 <sniprintf>
  		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd83 	bl	80002e0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4808      	ldr	r0, [pc, #32]	@ (8000804 <Read_Temp+0x7c>)
 80007e4:	f007 f89e 	bl	8007924 <HAL_UART_Transmit_IT>
  		  HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f000 ff4b 	bl	8001684 <HAL_Delay>
  		  execute_flag = '0';
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <Read_Temp+0x84>)
 80007f0:	2230      	movs	r2, #48	@ 0x30
 80007f2:	701a      	strb	r2, [r3, #0]

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800b3fc 	.word	0x0800b3fc
 8000800:	0800b3ec 	.word	0x0800b3ec
 8000804:	2400027c 	.word	0x2400027c
 8000808:	0800b3f4 	.word	0x0800b3f4
 800080c:	24000000 	.word	0x24000000

08000810 <Read_Pot>:

void Read_Pot(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
	 uint8_t Pot = PCF8591_ReadAnalog(3);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 faac 	bl	8000d74 <PCF8591_ReadAnalog>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
		  // Process the analog_value or send it over UART/Display it
		  HAL_Delay(100); // Wait for 1 second before next reading
 8000820:	2064      	movs	r0, #100	@ 0x64
 8000822:	f000 ff2f 	bl	8001684 <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN3: ");
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <Read_Pot+0x74>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <Read_Pot+0x78>)
 800082c:	2108      	movs	r1, #8
 800082e:	f00a f907 	bl	800aa40 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd53 	bl	80002e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	@ (800088c <Read_Pot+0x7c>)
 8000844:	f007 f86e 	bl	8007924 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f000 ff1b 	bl	8001684 <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", Pot);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	1d38      	adds	r0, r7, #4
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <Read_Pot+0x80>)
 8000854:	2104      	movs	r1, #4
 8000856:	f00a f8f3 	bl	800aa40 <sniprintf>
   		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <Read_Pot+0x7c>)
 800086c:	f007 f85a 	bl	8007924 <HAL_UART_Transmit_IT>
     	  HAL_Delay(100);
 8000870:	2064      	movs	r0, #100	@ 0x64
 8000872:	f000 ff07 	bl	8001684 <HAL_Delay>
   		  execute_flag = '0';
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <Read_Pot+0x84>)
 8000878:	2230      	movs	r2, #48	@ 0x30
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0800b404 	.word	0x0800b404
 8000888:	0800b3ec 	.word	0x0800b3ec
 800088c:	2400027c 	.word	0x2400027c
 8000890:	0800b3f4 	.word	0x0800b3f4
 8000894:	24000000 	.word	0x24000000

08000898 <Write_DAC>:

void Write_DAC(){
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0



}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	@ 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	224c      	movs	r2, #76	@ 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00a f8f6 	bl	800aaa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f00a f8f0 	bl	800aaa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f004 f97f 	bl	8004bcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <SystemClock_Config+0xf8>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <SystemClock_Config+0xf8>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <SystemClock_Config+0xf8>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <SystemClock_Config+0xfc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a2c      	ldr	r2, [pc, #176]	@ (80009a4 <SystemClock_Config+0xfc>)
 80008f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <SystemClock_Config+0xfc>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <SystemClock_Config+0xfc>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000914:	2303      	movs	r3, #3
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000918:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800091e:	2301      	movs	r3, #1
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000922:	2340      	movs	r3, #64	@ 0x40
 8000924:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000932:	2318      	movs	r3, #24
 8000934:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093a:	2304      	movs	r3, #4
 800093c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000942:	230c      	movs	r3, #12
 8000944:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000946:	2300      	movs	r3, #0
 8000948:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f984 	bl	8004c60 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800095e:	f000 fa73 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	233f      	movs	r3, #63	@ 0x3f
 8000964:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2101      	movs	r1, #1
 8000986:	4618      	mov	r0, r3
 8000988:	f004 fdc4 	bl	8005514 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000992:	f000 fa59 	bl	8000e48 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3770      	adds	r7, #112	@ 0x70
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58000400 	.word	0x58000400
 80009a4:	58024800 	.word	0x58024800

080009a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009ae:	4a1f      	ldr	r2, [pc, #124]	@ (8000a2c <MX_ETH_Init+0x84>)
 80009b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009c0:	22e1      	movs	r2, #225	@ 0xe1
 80009c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009d8:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_ETH_Init+0x88>)
 80009da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009de:	2201      	movs	r2, #1
 80009e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <MX_ETH_Init+0x8c>)
 80009e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <MX_ETH_Init+0x90>)
 80009ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009f0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <MX_ETH_Init+0x80>)
 80009f8:	f001 fd0a 	bl	8002410 <HAL_ETH_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a02:	f000 fa21 	bl	8000e48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a06:	2238      	movs	r2, #56	@ 0x38
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a0c:	f00a f84c 	bl	800aaa8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a12:	2221      	movs	r2, #33	@ 0x21
 8000a14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a18:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_ETH_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000178 	.word	0x24000178
 8000a2c:	40028000 	.word	0x40028000
 8000a30:	24000800 	.word	0x24000800
 8000a34:	240000c4 	.word	0x240000c4
 8000a38:	24000064 	.word	0x24000064
 8000a3c:	24000140 	.word	0x24000140

08000a40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <MX_I2C1_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <MX_I2C1_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a7c:	f002 fac6 	bl	800300c <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 f9df 	bl	8000e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000a8e:	f003 fed5 	bl	800483c <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 f9d6 	bl	8000e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_I2C1_Init+0x74>)
 8000aa0:	f003 ff17 	bl	80048d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 f9cd 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000228 	.word	0x24000228
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	10707dbc 	.word	0x10707dbc

08000ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ac6:	4a23      	ldr	r2, [pc, #140]	@ (8000b54 <MX_USART3_UART_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b0a:	f006 febb 	bl	8007884 <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f998 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b1c:	f009 fbbd 	bl	800a29a <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 f98f 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b2e:	f009 fbf2 	bl	800a316 <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f986 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f009 fb73 	bl	800a228 <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f97e 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2400027c 	.word	0x2400027c
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	4a16      	ldr	r2, [pc, #88]	@ (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2209      	movs	r2, #9
 8000b66:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba0:	f003 fee3 	bl	800496a <HAL_PCD_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000baa:	f000 f94d 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000310 	.word	0x24000310
 8000bb8:	40080000 	.word	0x40080000

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b62      	ldr	r3, [pc, #392]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a60      	ldr	r2, [pc, #384]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	4a59      	ldr	r2, [pc, #356]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c00:	4b56      	ldr	r3, [pc, #344]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b53      	ldr	r3, [pc, #332]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	4a51      	ldr	r2, [pc, #324]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	4a4a      	ldr	r2, [pc, #296]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3c:	4b47      	ldr	r3, [pc, #284]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	4b44      	ldr	r3, [pc, #272]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a42      	ldr	r2, [pc, #264]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b40      	ldr	r3, [pc, #256]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c68:	4b3c      	ldr	r3, [pc, #240]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a33      	ldr	r2, [pc, #204]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <MX_GPIO_Init+0x1a0>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000caa:	482d      	ldr	r0, [pc, #180]	@ (8000d60 <MX_GPIO_Init+0x1a4>)
 8000cac:	f002 f994 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb6:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <MX_GPIO_Init+0x1a8>)
 8000cb8:	f002 f98e 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <MX_GPIO_Init+0x1ac>)
 8000cc2:	f002 f989 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4824      	ldr	r0, [pc, #144]	@ (8000d6c <MX_GPIO_Init+0x1b0>)
 8000cdc:	f001 ffcc 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4819      	ldr	r0, [pc, #100]	@ (8000d60 <MX_GPIO_Init+0x1a4>)
 8000cfa:	f001 ffbd 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <MX_GPIO_Init+0x1a8>)
 8000d18:	f001 ffae 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <MX_GPIO_Init+0x1b4>)
 8000d32:	f001 ffa1 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_GPIO_Init+0x1ac>)
 8000d4e:	f001 ff93 	bl	8002c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	bf00      	nop
 8000d54:	3730      	adds	r7, #48	@ 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020400 	.word	0x58020400
 8000d64:	58020c00 	.word	0x58020c00
 8000d68:	58021000 	.word	0x58021000
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58021800 	.word	0x58021800

08000d74 <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */

//Função de leitura no modulo sensor
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000d92:	f107 020f 	add.w	r2, r7, #15
 8000d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	2190      	movs	r1, #144	@ 0x90
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <PCF8591_ReadAnalog+0x50>)
 8000da2:	f002 f9cf 	bl	8003144 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2302      	movs	r3, #2
 8000db2:	2190      	movs	r1, #144	@ 0x90
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <PCF8591_ReadAnalog+0x50>)
 8000db6:	f002 fadd 	bl	8003374 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 8000dba:	7b7b      	ldrb	r3, [r7, #13]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000228 	.word	0x24000228

08000dc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  if (strncmp(rx_buffer, "Read_AIN0", 9) == 0) {
 8000dd0:	2209      	movs	r2, #9
 8000dd2:	4917      	ldr	r1, [pc, #92]	@ (8000e30 <HAL_UART_RxCpltCallback+0x68>)
 8000dd4:	4817      	ldr	r0, [pc, #92]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000dd6:	f009 fe6f 	bl	800aab8 <strncmp>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <HAL_UART_RxCpltCallback+0x1e>
	  execute_flag = '1';
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000de2:	2231      	movs	r2, #49	@ 0x31
 8000de4:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN1", 9) == 0) {
 8000de6:	2209      	movs	r2, #9
 8000de8:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <HAL_UART_RxCpltCallback+0x74>)
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000dec:	f009 fe64 	bl	800aab8 <strncmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_UART_RxCpltCallback+0x34>
	  execute_flag = '2';
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000df8:	2232      	movs	r2, #50	@ 0x32
 8000dfa:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN3", 9) == 0) {
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	4910      	ldr	r1, [pc, #64]	@ (8000e40 <HAL_UART_RxCpltCallback+0x78>)
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000e02:	f009 fe59 	bl	800aab8 <strncmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <HAL_UART_RxCpltCallback+0x4a>
	  execute_flag = '3';
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000e0e:	2233      	movs	r2, #51	@ 0x33
 8000e10:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Set_DAC_255", 11) == 0) {
 8000e12:	220b      	movs	r2, #11
 8000e14:	490b      	ldr	r1, [pc, #44]	@ (8000e44 <HAL_UART_RxCpltCallback+0x7c>)
 8000e16:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <HAL_UART_RxCpltCallback+0x6c>)
 8000e18:	f009 fe4e 	bl	800aab8 <strncmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x60>
	  execute_flag = '4';
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_UART_RxCpltCallback+0x70>)
 8000e24:	2234      	movs	r2, #52	@ 0x34
 8000e26:	701a      	strb	r2, [r3, #0]
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	0800b40c 	.word	0x0800b40c
 8000e34:	240007f4 	.word	0x240007f4
 8000e38:	24000000 	.word	0x24000000
 8000e3c:	0800b418 	.word	0x0800b418
 8000e40:	0800b424 	.word	0x0800b424
 8000e44:	0800b430 	.word	0x0800b430

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e60:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x30>)
 8000e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	58024400 	.word	0x58024400

08000e88 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a59      	ldr	r2, [pc, #356]	@ (800100c <HAL_ETH_MspInit+0x184>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	f040 80ab 	bne.w	8001002 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000eac:	4b58      	ldr	r3, [pc, #352]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb2:	4a57      	ldr	r2, [pc, #348]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ebc:	4b54      	ldr	r3, [pc, #336]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eca:	4b51      	ldr	r3, [pc, #324]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eda:	4b4d      	ldr	r3, [pc, #308]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000edc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ee8:	4b49      	ldr	r3, [pc, #292]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eee:	4a48      	ldr	r2, [pc, #288]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ef8:	4b45      	ldr	r3, [pc, #276]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b42      	ldr	r3, [pc, #264]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	4a40      	ldr	r2, [pc, #256]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f16:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	4a39      	ldr	r2, [pc, #228]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f34:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	4a31      	ldr	r2, [pc, #196]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f52:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	4a2a      	ldr	r2, [pc, #168]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f70:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <HAL_ETH_MspInit+0x188>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f7e:	2332      	movs	r3, #50	@ 0x32
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	481e      	ldr	r0, [pc, #120]	@ (8001014 <HAL_ETH_MspInit+0x18c>)
 8000f9a:	f001 fe6d 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f9e:	2386      	movs	r3, #134	@ 0x86
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fae:	230b      	movs	r3, #11
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4817      	ldr	r0, [pc, #92]	@ (8001018 <HAL_ETH_MspInit+0x190>)
 8000fba:	f001 fe5d 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4810      	ldr	r0, [pc, #64]	@ (800101c <HAL_ETH_MspInit+0x194>)
 8000fdc:	f001 fe4c 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fe0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4808      	ldr	r0, [pc, #32]	@ (8001020 <HAL_ETH_MspInit+0x198>)
 8000ffe:	f001 fe3b 	bl	8002c78 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	@ 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40028000 	.word	0x40028000
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020000 	.word	0x58020000
 800101c:	58020400 	.word	0x58020400
 8001020:	58021800 	.word	0x58021800

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ba      	sub	sp, #232	@ 0xe8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	22c0      	movs	r2, #192	@ 0xc0
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f009 fd2f 	bl	800aaa8 <memset>
  if(hi2c->Instance==I2C1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <HAL_I2C_MspInit+0xe8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d156      	bne.n	8001102 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001054:	f04f 0208 	mov.w	r2, #8
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fdde 	bl	8005c2c <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001076:	f7ff fee7 	bl	8000e48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001098:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800109c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b2:	2304      	movs	r3, #4
 80010b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010bc:	4619      	mov	r1, r3
 80010be:	4815      	ldr	r0, [pc, #84]	@ (8001114 <HAL_I2C_MspInit+0xf0>)
 80010c0:	f001 fdda 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 80010cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_I2C_MspInit+0xec>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	201f      	movs	r0, #31
 80010e8:	f000 fbeb 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ec:	201f      	movs	r0, #31
 80010ee:	f000 fc02 	bl	80018f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2020      	movs	r0, #32
 80010f8:	f000 fbe3 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010fc:	2020      	movs	r0, #32
 80010fe:	f000 fbfa 	bl	80018f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	37e8      	adds	r7, #232	@ 0xe8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40005400 	.word	0x40005400
 8001110:	58024400 	.word	0x58024400
 8001114:	58020400 	.word	0x58020400

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ba      	sub	sp, #232	@ 0xe8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	22c0      	movs	r2, #192	@ 0xc0
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f009 fcb5 	bl	800aaa8 <memset>
  if(huart->Instance==USART3)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a2b      	ldr	r2, [pc, #172]	@ (80011f0 <HAL_UART_MspInit+0xd8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d14e      	bne.n	80011e6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001148:	f04f 0202 	mov.w	r2, #2
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fd64 	bl	8005c2c <HAL_RCCEx_PeriphCLKConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800116a:	f7ff fe6d 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116e:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <HAL_UART_MspInit+0xdc>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001174:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <HAL_UART_MspInit+0xdc>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HAL_UART_MspInit+0xdc>)
 8001180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_UART_MspInit+0xdc>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a18      	ldr	r2, [pc, #96]	@ (80011f4 <HAL_UART_MspInit+0xdc>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_UART_MspInit+0xdc>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <HAL_UART_MspInit+0xe0>)
 80011d2:	f001 fd51 	bl	8002c78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2027      	movs	r0, #39	@ 0x27
 80011dc:	f000 fb71 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e0:	2027      	movs	r0, #39	@ 0x27
 80011e2:	f000 fb88 	bl	80018f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011e6:	bf00      	nop
 80011e8:	37e8      	adds	r7, #232	@ 0xe8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40004800 	.word	0x40004800
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020c00 	.word	0x58020c00

080011fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	22c0      	movs	r2, #192	@ 0xc0
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f009 fc43 	bl	800aaa8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a30      	ldr	r2, [pc, #192]	@ (80012e8 <HAL_PCD_MspInit+0xec>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d159      	bne.n	80012e0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800122c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001238:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800123c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fcf1 	bl	8005c2c <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001250:	f7ff fdfa 	bl	8000e48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001254:	f003 fcf4 	bl	8004c40 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <HAL_PCD_MspInit+0xf0>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	4a23      	ldr	r2, [pc, #140]	@ (80012ec <HAL_PCD_MspInit+0xf0>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <HAL_PCD_MspInit+0xf0>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001276:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800127a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001290:	230a      	movs	r3, #10
 8001292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800129a:	4619      	mov	r1, r3
 800129c:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <HAL_PCD_MspInit+0xf4>)
 800129e:	f001 fceb 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <HAL_PCD_MspInit+0xf4>)
 80012be:	f001 fcdb 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_PCD_MspInit+0xf0>)
 80012c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_PCD_MspInit+0xf0>)
 80012ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_PCD_MspInit+0xf0>)
 80012d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80012e0:	bf00      	nop
 80012e2:	37e8      	adds	r7, #232	@ 0xe8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40080000 	.word	0x40080000
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020000 	.word	0x58020000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <UsageFault_Handler+0x4>

0800131c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f97b 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <I2C1_EV_IRQHandler+0x10>)
 800135a:	f002 f901 	bl	8003560 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	24000228 	.word	0x24000228

08001368 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <I2C1_ER_IRQHandler+0x10>)
 800136e:	f002 f911 	bl	8003594 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	24000228 	.word	0x24000228

0800137c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <USART3_IRQHandler+0x10>)
 8001382:	f006 fbaf 	bl	8007ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400027c 	.word	0x2400027c

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f009 fb8c 	bl	800aadc <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24080000 	.word	0x24080000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	24000808 	.word	0x24000808
 80013f8:	24000958 	.word	0x24000958

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001400:	f000 f826 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	@ (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f009 fb5d 	bl	800aae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f927 	bl	8000680 <main>
  bx  lr
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001438:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800143c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001440:	0800b4b8 	.word	0x0800b4b8
  ldr r2, =_sbss
 8001444:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001448:	24000958 	.word	0x24000958

0800144c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC3_IRQHandler>
	...

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001454:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <SystemInit+0xe4>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a36      	ldr	r2, [pc, #216]	@ (8001534 <SystemInit+0xe4>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001464:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <SystemInit+0xe8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	2b06      	cmp	r3, #6
 800146e:	d807      	bhi.n	8001480 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001470:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <SystemInit+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 030f 	bic.w	r3, r3, #15
 8001478:	4a2f      	ldr	r2, [pc, #188]	@ (8001538 <SystemInit+0xe8>)
 800147a:	f043 0307 	orr.w	r3, r3, #7
 800147e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001480:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <SystemInit+0xec>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a2d      	ldr	r2, [pc, #180]	@ (800153c <SystemInit+0xec>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <SystemInit+0xec>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001492:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <SystemInit+0xec>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4929      	ldr	r1, [pc, #164]	@ (800153c <SystemInit+0xec>)
 8001498:	4b29      	ldr	r3, [pc, #164]	@ (8001540 <SystemInit+0xf0>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <SystemInit+0xe8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014aa:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <SystemInit+0xe8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 030f 	bic.w	r3, r3, #15
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <SystemInit+0xe8>)
 80014b4:	f043 0307 	orr.w	r3, r3, #7
 80014b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <SystemInit+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <SystemInit+0xec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <SystemInit+0xec>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <SystemInit+0xec>)
 80014ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001544 <SystemInit+0xf4>)
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <SystemInit+0xec>)
 80014d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <SystemInit+0xf8>)
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014d8:	4b18      	ldr	r3, [pc, #96]	@ (800153c <SystemInit+0xec>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	@ (800154c <SystemInit+0xfc>)
 80014dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <SystemInit+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <SystemInit+0xec>)
 80014e6:	4a19      	ldr	r2, [pc, #100]	@ (800154c <SystemInit+0xfc>)
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <SystemInit+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <SystemInit+0xec>)
 80014f2:	4a16      	ldr	r2, [pc, #88]	@ (800154c <SystemInit+0xfc>)
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <SystemInit+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <SystemInit+0xec>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <SystemInit+0xec>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001506:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <SystemInit+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <SystemInit+0x100>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <SystemInit+0x104>)
 8001514:	4013      	ands	r3, r2
 8001516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800151a:	d202      	bcs.n	8001522 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <SystemInit+0x108>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <SystemInit+0x10c>)
 8001524:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001528:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	52002000 	.word	0x52002000
 800153c:	58024400 	.word	0x58024400
 8001540:	eaf6ed7f 	.word	0xeaf6ed7f
 8001544:	02020200 	.word	0x02020200
 8001548:	01ff0000 	.word	0x01ff0000
 800154c:	01010280 	.word	0x01010280
 8001550:	5c001000 	.word	0x5c001000
 8001554:	ffff0000 	.word	0xffff0000
 8001558:	51008108 	.word	0x51008108
 800155c:	52004000 	.word	0x52004000

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001566:	2003      	movs	r0, #3
 8001568:	f000 f9a0 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800156c:	f004 f988 	bl	8005880 <HAL_RCC_GetSysClockFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_Init+0x68>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	4913      	ldr	r1, [pc, #76]	@ (80015cc <HAL_Init+0x6c>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_Init+0x68>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <HAL_Init+0x6c>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_Init+0x70>)
 80015a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <HAL_Init+0x74>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f814 	bl	80015d8 <HAL_InitTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e002      	b.n	80015c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ba:	f7ff fc4b 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	58024400 	.word	0x58024400
 80015cc:	0800b43c 	.word	0x0800b43c
 80015d0:	24000008 	.word	0x24000008
 80015d4:	24000004 	.word	0x24000004

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_InitTick+0x60>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e021      	b.n	8001630 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <HAL_InitTick+0x64>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_InitTick+0x60>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f985 	bl	8001912 <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f94f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x68>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24000010 	.word	0x24000010
 800163c:	24000004 	.word	0x24000004
 8001640:	2400000c 	.word	0x2400000c

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	24000010 	.word	0x24000010
 8001668:	2400080c 	.word	0x2400080c

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2400080c 	.word	0x2400080c

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	24000010 	.word	0x24000010

080016cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_GetREVID+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0c1b      	lsrs	r3, r3, #16
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	5c001000 	.word	0x5c001000

080016e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80016f4:	4904      	ldr	r1, [pc, #16]	@ (8001708 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	58000400 	.word	0x58000400

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <__NVIC_SetPriorityGrouping+0x40>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	4313      	orrs	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x40>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00
 8001750:	05fa0000 	.word	0x05fa0000

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	@ (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	@ (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	@ 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff40 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff90 	bl	8001800 <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5f 	bl	80017ac <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff33 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffa4 	bl	8001868 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fe9a 	bl	800166c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e2dc      	b.n	8001efe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2280      	movs	r2, #128	@ 0x80
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e2cd      	b.n	8001efe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a76      	ldr	r2, [pc, #472]	@ (8001b40 <HAL_DMA_Abort+0x214>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04a      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a74      	ldr	r2, [pc, #464]	@ (8001b44 <HAL_DMA_Abort+0x218>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d045      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a73      	ldr	r2, [pc, #460]	@ (8001b48 <HAL_DMA_Abort+0x21c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d040      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a71      	ldr	r2, [pc, #452]	@ (8001b4c <HAL_DMA_Abort+0x220>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d03b      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a70      	ldr	r2, [pc, #448]	@ (8001b50 <HAL_DMA_Abort+0x224>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d036      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6e      	ldr	r2, [pc, #440]	@ (8001b54 <HAL_DMA_Abort+0x228>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d031      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001b58 <HAL_DMA_Abort+0x22c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d02c      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6b      	ldr	r2, [pc, #428]	@ (8001b5c <HAL_DMA_Abort+0x230>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001b60 <HAL_DMA_Abort+0x234>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d022      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a68      	ldr	r2, [pc, #416]	@ (8001b64 <HAL_DMA_Abort+0x238>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a67      	ldr	r2, [pc, #412]	@ (8001b68 <HAL_DMA_Abort+0x23c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a65      	ldr	r2, [pc, #404]	@ (8001b6c <HAL_DMA_Abort+0x240>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a64      	ldr	r2, [pc, #400]	@ (8001b70 <HAL_DMA_Abort+0x244>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a62      	ldr	r2, [pc, #392]	@ (8001b74 <HAL_DMA_Abort+0x248>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a61      	ldr	r2, [pc, #388]	@ (8001b78 <HAL_DMA_Abort+0x24c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d004      	beq.n	8001a02 <HAL_DMA_Abort+0xd6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5f      	ldr	r2, [pc, #380]	@ (8001b7c <HAL_DMA_Abort+0x250>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Abort+0xda>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_DMA_Abort+0xdc>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 021e 	bic.w	r2, r2, #30
 8001a1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e00a      	b.n	8001a4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020e 	bic.w	r2, r2, #14
 8001a42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b40 <HAL_DMA_Abort+0x214>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d072      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a3a      	ldr	r2, [pc, #232]	@ (8001b44 <HAL_DMA_Abort+0x218>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d06d      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a39      	ldr	r2, [pc, #228]	@ (8001b48 <HAL_DMA_Abort+0x21c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d068      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a37      	ldr	r2, [pc, #220]	@ (8001b4c <HAL_DMA_Abort+0x220>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d063      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a36      	ldr	r2, [pc, #216]	@ (8001b50 <HAL_DMA_Abort+0x224>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d05e      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a34      	ldr	r2, [pc, #208]	@ (8001b54 <HAL_DMA_Abort+0x228>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d059      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <HAL_DMA_Abort+0x22c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d054      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a31      	ldr	r2, [pc, #196]	@ (8001b5c <HAL_DMA_Abort+0x230>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d04f      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a30      	ldr	r2, [pc, #192]	@ (8001b60 <HAL_DMA_Abort+0x234>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <HAL_DMA_Abort+0x238>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b68 <HAL_DMA_Abort+0x23c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b6c <HAL_DMA_Abort+0x240>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b70 <HAL_DMA_Abort+0x244>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	@ (8001b74 <HAL_DMA_Abort+0x248>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <HAL_DMA_Abort+0x24c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	@ (8001b7c <HAL_DMA_Abort+0x250>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a24      	ldr	r2, [pc, #144]	@ (8001b80 <HAL_DMA_Abort+0x254>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a22      	ldr	r2, [pc, #136]	@ (8001b84 <HAL_DMA_Abort+0x258>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <HAL_DMA_Abort+0x25c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <HAL_DMA_Abort+0x260>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1e      	ldr	r2, [pc, #120]	@ (8001b90 <HAL_DMA_Abort+0x264>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	@ (8001b94 <HAL_DMA_Abort+0x268>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b98 <HAL_DMA_Abort+0x26c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort+0x20e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <HAL_DMA_Abort+0x270>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d132      	bne.n	8001ba0 <HAL_DMA_Abort+0x274>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e031      	b.n	8001ba2 <HAL_DMA_Abort+0x276>
 8001b3e:	bf00      	nop
 8001b40:	40020010 	.word	0x40020010
 8001b44:	40020028 	.word	0x40020028
 8001b48:	40020040 	.word	0x40020040
 8001b4c:	40020058 	.word	0x40020058
 8001b50:	40020070 	.word	0x40020070
 8001b54:	40020088 	.word	0x40020088
 8001b58:	400200a0 	.word	0x400200a0
 8001b5c:	400200b8 	.word	0x400200b8
 8001b60:	40020410 	.word	0x40020410
 8001b64:	40020428 	.word	0x40020428
 8001b68:	40020440 	.word	0x40020440
 8001b6c:	40020458 	.word	0x40020458
 8001b70:	40020470 	.word	0x40020470
 8001b74:	40020488 	.word	0x40020488
 8001b78:	400204a0 	.word	0x400204a0
 8001b7c:	400204b8 	.word	0x400204b8
 8001b80:	58025408 	.word	0x58025408
 8001b84:	5802541c 	.word	0x5802541c
 8001b88:	58025430 	.word	0x58025430
 8001b8c:	58025444 	.word	0x58025444
 8001b90:	58025458 	.word	0x58025458
 8001b94:	5802546c 	.word	0x5802546c
 8001b98:	58025480 	.word	0x58025480
 8001b9c:	58025494 	.word	0x58025494
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6d      	ldr	r2, [pc, #436]	@ (8001d70 <HAL_DMA_Abort+0x444>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d04a      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d74 <HAL_DMA_Abort+0x448>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d045      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6a      	ldr	r2, [pc, #424]	@ (8001d78 <HAL_DMA_Abort+0x44c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d040      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a68      	ldr	r2, [pc, #416]	@ (8001d7c <HAL_DMA_Abort+0x450>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d03b      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a67      	ldr	r2, [pc, #412]	@ (8001d80 <HAL_DMA_Abort+0x454>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d036      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_DMA_Abort+0x458>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a64      	ldr	r2, [pc, #400]	@ (8001d88 <HAL_DMA_Abort+0x45c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d02c      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a62      	ldr	r2, [pc, #392]	@ (8001d8c <HAL_DMA_Abort+0x460>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d027      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a61      	ldr	r2, [pc, #388]	@ (8001d90 <HAL_DMA_Abort+0x464>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5f      	ldr	r2, [pc, #380]	@ (8001d94 <HAL_DMA_Abort+0x468>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d01d      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d98 <HAL_DMA_Abort+0x46c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d018      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5c      	ldr	r2, [pc, #368]	@ (8001d9c <HAL_DMA_Abort+0x470>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5b      	ldr	r2, [pc, #364]	@ (8001da0 <HAL_DMA_Abort+0x474>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00e      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a59      	ldr	r2, [pc, #356]	@ (8001da4 <HAL_DMA_Abort+0x478>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <HAL_DMA_Abort+0x47c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d004      	beq.n	8001c56 <HAL_DMA_Abort+0x32a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a56      	ldr	r2, [pc, #344]	@ (8001dac <HAL_DMA_Abort+0x480>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d108      	bne.n	8001c68 <HAL_DMA_Abort+0x33c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e007      	b.n	8001c78 <HAL_DMA_Abort+0x34c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c78:	e013      	b.n	8001ca2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fcf7 	bl	800166c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d90c      	bls.n	8001ca2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e12d      	b.n	8001efe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1e5      	bne.n	8001c7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d70 <HAL_DMA_Abort+0x444>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d04a      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8001d74 <HAL_DMA_Abort+0x448>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d045      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d78 <HAL_DMA_Abort+0x44c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d040      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d7c <HAL_DMA_Abort+0x450>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d03b      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a29      	ldr	r2, [pc, #164]	@ (8001d80 <HAL_DMA_Abort+0x454>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d036      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a27      	ldr	r2, [pc, #156]	@ (8001d84 <HAL_DMA_Abort+0x458>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <HAL_DMA_Abort+0x45c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d02c      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a24      	ldr	r2, [pc, #144]	@ (8001d8c <HAL_DMA_Abort+0x460>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d027      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_DMA_Abort+0x464>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <HAL_DMA_Abort+0x468>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01d      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a20      	ldr	r2, [pc, #128]	@ (8001d98 <HAL_DMA_Abort+0x46c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d018      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1e      	ldr	r2, [pc, #120]	@ (8001d9c <HAL_DMA_Abort+0x470>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001da0 <HAL_DMA_Abort+0x474>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1b      	ldr	r2, [pc, #108]	@ (8001da4 <HAL_DMA_Abort+0x478>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <HAL_DMA_Abort+0x47c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Abort+0x422>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <HAL_DMA_Abort+0x480>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Abort+0x426>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_Abort+0x428>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d02b      	beq.n	8001db0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	223f      	movs	r2, #63	@ 0x3f
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	e02a      	b.n	8001dc6 <HAL_DMA_Abort+0x49a>
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a4f      	ldr	r2, [pc, #316]	@ (8001f08 <HAL_DMA_Abort+0x5dc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d072      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f0c <HAL_DMA_Abort+0x5e0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d06d      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4c      	ldr	r2, [pc, #304]	@ (8001f10 <HAL_DMA_Abort+0x5e4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d068      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4a      	ldr	r2, [pc, #296]	@ (8001f14 <HAL_DMA_Abort+0x5e8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d063      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a49      	ldr	r2, [pc, #292]	@ (8001f18 <HAL_DMA_Abort+0x5ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a47      	ldr	r2, [pc, #284]	@ (8001f1c <HAL_DMA_Abort+0x5f0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d059      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a46      	ldr	r2, [pc, #280]	@ (8001f20 <HAL_DMA_Abort+0x5f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d054      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a44      	ldr	r2, [pc, #272]	@ (8001f24 <HAL_DMA_Abort+0x5f8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d04f      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a43      	ldr	r2, [pc, #268]	@ (8001f28 <HAL_DMA_Abort+0x5fc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d04a      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a41      	ldr	r2, [pc, #260]	@ (8001f2c <HAL_DMA_Abort+0x600>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d045      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	@ (8001f30 <HAL_DMA_Abort+0x604>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d040      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3e      	ldr	r2, [pc, #248]	@ (8001f34 <HAL_DMA_Abort+0x608>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d03b      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a3d      	ldr	r2, [pc, #244]	@ (8001f38 <HAL_DMA_Abort+0x60c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d036      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f3c <HAL_DMA_Abort+0x610>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d031      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	@ (8001f40 <HAL_DMA_Abort+0x614>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d02c      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a38      	ldr	r2, [pc, #224]	@ (8001f44 <HAL_DMA_Abort+0x618>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d027      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a37      	ldr	r2, [pc, #220]	@ (8001f48 <HAL_DMA_Abort+0x61c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d022      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <HAL_DMA_Abort+0x620>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01d      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a34      	ldr	r2, [pc, #208]	@ (8001f50 <HAL_DMA_Abort+0x624>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d018      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a32      	ldr	r2, [pc, #200]	@ (8001f54 <HAL_DMA_Abort+0x628>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <HAL_DMA_Abort+0x62c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00e      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f5c <HAL_DMA_Abort+0x630>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f60 <HAL_DMA_Abort+0x634>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_DMA_Abort+0x58a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <HAL_DMA_Abort+0x638>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Abort+0x58e>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_DMA_Abort+0x590>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d015      	beq.n	8001eec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ec8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001eea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40020010 	.word	0x40020010
 8001f0c:	40020028 	.word	0x40020028
 8001f10:	40020040 	.word	0x40020040
 8001f14:	40020058 	.word	0x40020058
 8001f18:	40020070 	.word	0x40020070
 8001f1c:	40020088 	.word	0x40020088
 8001f20:	400200a0 	.word	0x400200a0
 8001f24:	400200b8 	.word	0x400200b8
 8001f28:	40020410 	.word	0x40020410
 8001f2c:	40020428 	.word	0x40020428
 8001f30:	40020440 	.word	0x40020440
 8001f34:	40020458 	.word	0x40020458
 8001f38:	40020470 	.word	0x40020470
 8001f3c:	40020488 	.word	0x40020488
 8001f40:	400204a0 	.word	0x400204a0
 8001f44:	400204b8 	.word	0x400204b8
 8001f48:	58025408 	.word	0x58025408
 8001f4c:	5802541c 	.word	0x5802541c
 8001f50:	58025430 	.word	0x58025430
 8001f54:	58025444 	.word	0x58025444
 8001f58:	58025458 	.word	0x58025458
 8001f5c:	5802546c 	.word	0x5802546c
 8001f60:	58025480 	.word	0x58025480
 8001f64:	58025494 	.word	0x58025494

08001f68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e237      	b.n	80023ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e22c      	b.n	80023ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5c      	ldr	r2, [pc, #368]	@ (8002108 <HAL_DMA_Abort_IT+0x1a0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04a      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_DMA_Abort_IT+0x1a4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d045      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a59      	ldr	r2, [pc, #356]	@ (8002110 <HAL_DMA_Abort_IT+0x1a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a58      	ldr	r2, [pc, #352]	@ (8002114 <HAL_DMA_Abort_IT+0x1ac>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d03b      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a56      	ldr	r2, [pc, #344]	@ (8002118 <HAL_DMA_Abort_IT+0x1b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d036      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a55      	ldr	r2, [pc, #340]	@ (800211c <HAL_DMA_Abort_IT+0x1b4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a53      	ldr	r2, [pc, #332]	@ (8002120 <HAL_DMA_Abort_IT+0x1b8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02c      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_DMA_Abort_IT+0x1bc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d027      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a50      	ldr	r2, [pc, #320]	@ (8002128 <HAL_DMA_Abort_IT+0x1c0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d022      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a4f      	ldr	r2, [pc, #316]	@ (800212c <HAL_DMA_Abort_IT+0x1c4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d01d      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8002130 <HAL_DMA_Abort_IT+0x1c8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <HAL_DMA_Abort_IT+0x1cc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a4a      	ldr	r2, [pc, #296]	@ (8002138 <HAL_DMA_Abort_IT+0x1d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00e      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a49      	ldr	r2, [pc, #292]	@ (800213c <HAL_DMA_Abort_IT+0x1d4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a47      	ldr	r2, [pc, #284]	@ (8002140 <HAL_DMA_Abort_IT+0x1d8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a46      	ldr	r2, [pc, #280]	@ (8002144 <HAL_DMA_Abort_IT+0x1dc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Abort_IT+0xcc>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_DMA_Abort_IT+0xce>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8086 	beq.w	8002148 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2204      	movs	r2, #4
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2f      	ldr	r2, [pc, #188]	@ (8002108 <HAL_DMA_Abort_IT+0x1a0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04a      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a2e      	ldr	r2, [pc, #184]	@ (800210c <HAL_DMA_Abort_IT+0x1a4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d045      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2c      	ldr	r2, [pc, #176]	@ (8002110 <HAL_DMA_Abort_IT+0x1a8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d040      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2b      	ldr	r2, [pc, #172]	@ (8002114 <HAL_DMA_Abort_IT+0x1ac>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d03b      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a29      	ldr	r2, [pc, #164]	@ (8002118 <HAL_DMA_Abort_IT+0x1b0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a28      	ldr	r2, [pc, #160]	@ (800211c <HAL_DMA_Abort_IT+0x1b4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d031      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a26      	ldr	r2, [pc, #152]	@ (8002120 <HAL_DMA_Abort_IT+0x1b8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02c      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a25      	ldr	r2, [pc, #148]	@ (8002124 <HAL_DMA_Abort_IT+0x1bc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d027      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a23      	ldr	r2, [pc, #140]	@ (8002128 <HAL_DMA_Abort_IT+0x1c0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d022      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a22      	ldr	r2, [pc, #136]	@ (800212c <HAL_DMA_Abort_IT+0x1c4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01d      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a20      	ldr	r2, [pc, #128]	@ (8002130 <HAL_DMA_Abort_IT+0x1c8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d018      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002134 <HAL_DMA_Abort_IT+0x1cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002138 <HAL_DMA_Abort_IT+0x1d0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00e      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <HAL_DMA_Abort_IT+0x1d4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002140 <HAL_DMA_Abort_IT+0x1d8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x17c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a19      	ldr	r2, [pc, #100]	@ (8002144 <HAL_DMA_Abort_IT+0x1dc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d108      	bne.n	80020f6 <HAL_DMA_Abort_IT+0x18e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e178      	b.n	80023e8 <HAL_DMA_Abort_IT+0x480>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e16f      	b.n	80023e8 <HAL_DMA_Abort_IT+0x480>
 8002108:	40020010 	.word	0x40020010
 800210c:	40020028 	.word	0x40020028
 8002110:	40020040 	.word	0x40020040
 8002114:	40020058 	.word	0x40020058
 8002118:	40020070 	.word	0x40020070
 800211c:	40020088 	.word	0x40020088
 8002120:	400200a0 	.word	0x400200a0
 8002124:	400200b8 	.word	0x400200b8
 8002128:	40020410 	.word	0x40020410
 800212c:	40020428 	.word	0x40020428
 8002130:	40020440 	.word	0x40020440
 8002134:	40020458 	.word	0x40020458
 8002138:	40020470 	.word	0x40020470
 800213c:	40020488 	.word	0x40020488
 8002140:	400204a0 	.word	0x400204a0
 8002144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 020e 	bic.w	r2, r2, #14
 8002156:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6c      	ldr	r2, [pc, #432]	@ (8002310 <HAL_DMA_Abort_IT+0x3a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d04a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6b      	ldr	r2, [pc, #428]	@ (8002314 <HAL_DMA_Abort_IT+0x3ac>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d045      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a69      	ldr	r2, [pc, #420]	@ (8002318 <HAL_DMA_Abort_IT+0x3b0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d040      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a68      	ldr	r2, [pc, #416]	@ (800231c <HAL_DMA_Abort_IT+0x3b4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d03b      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a66      	ldr	r2, [pc, #408]	@ (8002320 <HAL_DMA_Abort_IT+0x3b8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d036      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a65      	ldr	r2, [pc, #404]	@ (8002324 <HAL_DMA_Abort_IT+0x3bc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a63      	ldr	r2, [pc, #396]	@ (8002328 <HAL_DMA_Abort_IT+0x3c0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02c      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a62      	ldr	r2, [pc, #392]	@ (800232c <HAL_DMA_Abort_IT+0x3c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a60      	ldr	r2, [pc, #384]	@ (8002330 <HAL_DMA_Abort_IT+0x3c8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002334 <HAL_DMA_Abort_IT+0x3cc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d01d      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <HAL_DMA_Abort_IT+0x3d0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5c      	ldr	r2, [pc, #368]	@ (800233c <HAL_DMA_Abort_IT+0x3d4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002340 <HAL_DMA_Abort_IT+0x3d8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a59      	ldr	r2, [pc, #356]	@ (8002344 <HAL_DMA_Abort_IT+0x3dc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a57      	ldr	r2, [pc, #348]	@ (8002348 <HAL_DMA_Abort_IT+0x3e0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x290>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a56      	ldr	r2, [pc, #344]	@ (800234c <HAL_DMA_Abort_IT+0x3e4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <HAL_DMA_Abort_IT+0x2a2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e007      	b.n	800221a <HAL_DMA_Abort_IT+0x2b2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HAL_DMA_Abort_IT+0x3a8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d072      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3a      	ldr	r2, [pc, #232]	@ (8002314 <HAL_DMA_Abort_IT+0x3ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d06d      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a39      	ldr	r2, [pc, #228]	@ (8002318 <HAL_DMA_Abort_IT+0x3b0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d068      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a37      	ldr	r2, [pc, #220]	@ (800231c <HAL_DMA_Abort_IT+0x3b4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d063      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a36      	ldr	r2, [pc, #216]	@ (8002320 <HAL_DMA_Abort_IT+0x3b8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d05e      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a34      	ldr	r2, [pc, #208]	@ (8002324 <HAL_DMA_Abort_IT+0x3bc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d059      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a33      	ldr	r2, [pc, #204]	@ (8002328 <HAL_DMA_Abort_IT+0x3c0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d054      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a31      	ldr	r2, [pc, #196]	@ (800232c <HAL_DMA_Abort_IT+0x3c4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04f      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a30      	ldr	r2, [pc, #192]	@ (8002330 <HAL_DMA_Abort_IT+0x3c8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04a      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2e      	ldr	r2, [pc, #184]	@ (8002334 <HAL_DMA_Abort_IT+0x3cc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d045      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a2d      	ldr	r2, [pc, #180]	@ (8002338 <HAL_DMA_Abort_IT+0x3d0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d040      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <HAL_DMA_Abort_IT+0x3d4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03b      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <HAL_DMA_Abort_IT+0x3d8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d036      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a28      	ldr	r2, [pc, #160]	@ (8002344 <HAL_DMA_Abort_IT+0x3dc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a27      	ldr	r2, [pc, #156]	@ (8002348 <HAL_DMA_Abort_IT+0x3e0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a25      	ldr	r2, [pc, #148]	@ (800234c <HAL_DMA_Abort_IT+0x3e4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d027      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <HAL_DMA_Abort_IT+0x3e8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a22      	ldr	r2, [pc, #136]	@ (8002354 <HAL_DMA_Abort_IT+0x3ec>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01d      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <HAL_DMA_Abort_IT+0x3f0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d018      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_DMA_Abort_IT+0x3f4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002360 <HAL_DMA_Abort_IT+0x3f8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <HAL_DMA_Abort_IT+0x3fc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <HAL_DMA_Abort_IT+0x400>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_Abort_IT+0x3a2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	@ (800236c <HAL_DMA_Abort_IT+0x404>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d132      	bne.n	8002370 <HAL_DMA_Abort_IT+0x408>
 800230a:	2301      	movs	r3, #1
 800230c:	e031      	b.n	8002372 <HAL_DMA_Abort_IT+0x40a>
 800230e:	bf00      	nop
 8002310:	40020010 	.word	0x40020010
 8002314:	40020028 	.word	0x40020028
 8002318:	40020040 	.word	0x40020040
 800231c:	40020058 	.word	0x40020058
 8002320:	40020070 	.word	0x40020070
 8002324:	40020088 	.word	0x40020088
 8002328:	400200a0 	.word	0x400200a0
 800232c:	400200b8 	.word	0x400200b8
 8002330:	40020410 	.word	0x40020410
 8002334:	40020428 	.word	0x40020428
 8002338:	40020440 	.word	0x40020440
 800233c:	40020458 	.word	0x40020458
 8002340:	40020470 	.word	0x40020470
 8002344:	40020488 	.word	0x40020488
 8002348:	400204a0 	.word	0x400204a0
 800234c:	400204b8 	.word	0x400204b8
 8002350:	58025408 	.word	0x58025408
 8002354:	5802541c 	.word	0x5802541c
 8002358:	58025430 	.word	0x58025430
 800235c:	58025444 	.word	0x58025444
 8002360:	58025458 	.word	0x58025458
 8002364:	5802546c 	.word	0x5802546c
 8002368:	58025480 	.word	0x58025480
 800236c:	58025494 	.word	0x58025494
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002384:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2201      	movs	r2, #1
 8002396:	409a      	lsls	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop

080023f4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002402:	b2db      	uxtb	r3, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0e3      	b.n	80025ea <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2223      	movs	r2, #35	@ 0x23
 8002430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7fe fd27 	bl	8000e88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	4b6e      	ldr	r3, [pc, #440]	@ (80025f4 <HAL_ETH_Init+0x1e4>)
 800243c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002440:	4a6c      	ldr	r2, [pc, #432]	@ (80025f4 <HAL_ETH_Init+0x1e4>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_ETH_Init+0x1e4>)
 800244c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7a1b      	ldrb	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d103      	bne.n	8002468 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff f93f 	bl	80016e4 <HAL_SYSCFG_ETHInterfaceSelect>
 8002466:	e003      	b.n	8002470 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002468:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800246c:	f7ff f93a 	bl	80016e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002470:	4b61      	ldr	r3, [pc, #388]	@ (80025f8 <HAL_ETH_Init+0x1e8>)
 8002472:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800248a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248c:	f7ff f8ee 	bl	800166c <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002492:	e011      	b.n	80024b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002494:	f7ff f8ea 	bl	800166c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024a2:	d909      	bls.n	80024b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	22e0      	movs	r2, #224	@ 0xe0
 80024b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e098      	b.n	80025ea <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e4      	bne.n	8002494 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f89e 	bl	800260c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024d0:	f003 fb50 	bl	8005b74 <HAL_RCC_GetHCLKFreq>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a49      	ldr	r2, [pc, #292]	@ (80025fc <HAL_ETH_Init+0x1ec>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3a01      	subs	r2, #1
 80024e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fa81 	bl	80029f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80024fa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002506:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800250a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	22e0      	movs	r2, #224	@ 0xe0
 8002526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e05d      	b.n	80025ea <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002536:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800253a:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <HAL_ETH_Init+0x1f0>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6952      	ldr	r2, [r2, #20]
 8002542:	0051      	lsls	r1, r2, #1
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800254e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fae9 	bl	8002b2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fb2f 	bl	8002bbc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	3305      	adds	r3, #5
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	3303      	adds	r3, #3
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	061a      	lsls	r2, r3, #24
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	3302      	adds	r3, #2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800259c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80025aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80025ac:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_ETH_Init+0x1f4>)
 80025be:	430b      	orrs	r3, r1
 80025c0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_ETH_Init+0x1f8>)
 80025d2:	430b      	orrs	r3, r1
 80025d4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2210      	movs	r2, #16
 80025e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	58024400 	.word	0x58024400
 80025f8:	58000400 	.word	0x58000400
 80025fc:	431bde83 	.word	0x431bde83
 8002600:	ffff8001 	.word	0xffff8001
 8002604:	0c020060 	.word	0x0c020060
 8002608:	0c20c000 	.word	0x0c20c000

0800260c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800261c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002624:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002626:	f003 faa5 	bl	8005b74 <HAL_RCC_GetHCLKFreq>
 800262a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4a1a      	ldr	r2, [pc, #104]	@ (8002698 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d804      	bhi.n	800263e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e022      	b.n	8002684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4a16      	ldr	r2, [pc, #88]	@ (800269c <HAL_ETH_SetMDIOClockRange+0x90>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d204      	bcs.n	8002650 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e019      	b.n	8002684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4a13      	ldr	r2, [pc, #76]	@ (80026a0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d915      	bls.n	8002684 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4a12      	ldr	r2, [pc, #72]	@ (80026a4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d804      	bhi.n	800266a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e00c      	b.n	8002684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d804      	bhi.n	800267c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	e003      	b.n	8002684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002682:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	02160ebf 	.word	0x02160ebf
 800269c:	03938700 	.word	0x03938700
 80026a0:	05f5e0ff 	.word	0x05f5e0ff
 80026a4:	08f0d17f 	.word	0x08f0d17f
 80026a8:	0ee6b27f 	.word	0x0ee6b27f

080026ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80026be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	791b      	ldrb	r3, [r3, #4]
 80026c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80026c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7b1b      	ldrb	r3, [r3, #12]
 80026cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80026ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7b5b      	ldrb	r3, [r3, #13]
 80026d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80026d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	7b9b      	ldrb	r3, [r3, #14]
 80026dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80026de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	7bdb      	ldrb	r3, [r3, #15]
 80026e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80026e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	7c12      	ldrb	r2, [r2, #16]
 80026ec:	2a00      	cmp	r2, #0
 80026ee:	d102      	bne.n	80026f6 <ETH_SetMACConfig+0x4a>
 80026f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026f4:	e000      	b.n	80026f8 <ETH_SetMACConfig+0x4c>
 80026f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	7c52      	ldrb	r2, [r2, #17]
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d102      	bne.n	8002708 <ETH_SetMACConfig+0x5c>
 8002702:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002706:	e000      	b.n	800270a <ETH_SetMACConfig+0x5e>
 8002708:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800270a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	7c9b      	ldrb	r3, [r3, #18]
 8002710:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002712:	431a      	orrs	r2, r3
               macconf->Speed |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002718:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800271e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	7f1b      	ldrb	r3, [r3, #28]
 8002724:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002726:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7f5b      	ldrb	r3, [r3, #29]
 800272c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800272e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	7f92      	ldrb	r2, [r2, #30]
 8002734:	2a00      	cmp	r2, #0
 8002736:	d102      	bne.n	800273e <ETH_SetMACConfig+0x92>
 8002738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800273c:	e000      	b.n	8002740 <ETH_SetMACConfig+0x94>
 800273e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002740:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7fdb      	ldrb	r3, [r3, #31]
 8002746:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002748:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002750:	2a00      	cmp	r2, #0
 8002752:	d102      	bne.n	800275a <ETH_SetMACConfig+0xae>
 8002754:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002758:	e000      	b.n	800275c <ETH_SetMACConfig+0xb0>
 800275a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800275c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800276a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800276c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b56      	ldr	r3, [pc, #344]	@ (80028d8 <ETH_SetMACConfig+0x22c>)
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	430b      	orrs	r3, r1
 8002788:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002796:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002798:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80027a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80027aa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80027ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d102      	bne.n	80027be <ETH_SetMACConfig+0x112>
 80027b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027bc:	e000      	b.n	80027c0 <ETH_SetMACConfig+0x114>
 80027be:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80027c0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4b42      	ldr	r3, [pc, #264]	@ (80028dc <ETH_SetMACConfig+0x230>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	430b      	orrs	r3, r1
 80027dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b3a      	ldr	r3, [pc, #232]	@ (80028e0 <ETH_SetMACConfig+0x234>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	430b      	orrs	r3, r1
 8002800:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002808:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800280e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002816:	2a00      	cmp	r2, #0
 8002818:	d101      	bne.n	800281e <ETH_SetMACConfig+0x172>
 800281a:	2280      	movs	r2, #128	@ 0x80
 800281c:	e000      	b.n	8002820 <ETH_SetMACConfig+0x174>
 800281e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002820:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002826:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002832:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	430b      	orrs	r3, r1
 8002840:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002848:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002850:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f023 0103 	bic.w	r1, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	430a      	orrs	r2, r1
 800286a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002876:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002892:	2a00      	cmp	r2, #0
 8002894:	d101      	bne.n	800289a <ETH_SetMACConfig+0x1ee>
 8002896:	2240      	movs	r2, #64	@ 0x40
 8002898:	e000      	b.n	800289c <ETH_SetMACConfig+0x1f0>
 800289a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800289c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80028a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80028a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80028ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80028bc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	00048083 	.word	0x00048083
 80028dc:	c0f88000 	.word	0xc0f88000
 80028e0:	fffffef0 	.word	0xfffffef0

080028e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b38      	ldr	r3, [pc, #224]	@ (80029dc <ETH_SetDMAConfig+0xf8>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	6811      	ldr	r1, [r2, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	430b      	orrs	r3, r1
 8002906:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800290a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	791b      	ldrb	r3, [r3, #4]
 8002910:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002916:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	7b1b      	ldrb	r3, [r3, #12]
 800291c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4b2c      	ldr	r3, [pc, #176]	@ (80029e0 <ETH_SetDMAConfig+0xfc>)
 800292e:	4013      	ands	r3, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	430b      	orrs	r3, r1
 8002938:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800293c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7b5b      	ldrb	r3, [r3, #13]
 8002942:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002954:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <ETH_SetDMAConfig+0x100>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	430b      	orrs	r3, r1
 8002964:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002968:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7d1b      	ldrb	r3, [r3, #20]
 8002974:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002976:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	7f5b      	ldrb	r3, [r3, #29]
 800297c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800298a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800298e:	4b16      	ldr	r3, [pc, #88]	@ (80029e8 <ETH_SetDMAConfig+0x104>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	430b      	orrs	r3, r1
 800299a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800299e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7f1b      	ldrb	r3, [r3, #28]
 80029a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <ETH_SetDMAConfig+0x108>)
 80029be:	4013      	ands	r3, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	430b      	orrs	r3, r1
 80029c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029cc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	ffff87fd 	.word	0xffff87fd
 80029e0:	ffff2ffe 	.word	0xffff2ffe
 80029e4:	fffec000 	.word	0xfffec000
 80029e8:	ffc0efef 	.word	0xffc0efef
 80029ec:	7fc0ffff 	.word	0x7fc0ffff

080029f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0a4      	sub	sp, #144	@ 0x90
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029fe:	2300      	movs	r3, #0
 8002a00:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a30:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002a48:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002a4c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a72:	2300      	movs	r3, #0
 8002a74:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a9a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002aa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002aca:	2300      	movs	r3, #0
 8002acc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ad4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fde6 	bl	80026ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002afa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002afe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002b10:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fee1 	bl	80028e4 <ETH_SetDMAConfig>
}
 8002b22:	bf00      	nop
 8002b24:	3790      	adds	r7, #144	@ 0x90
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e01d      	b.n	8002b74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68d9      	ldr	r1, [r3, #12]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	3206      	adds	r2, #6
 8002b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d9de      	bls.n	8002b38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bac:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e023      	b.n	8002c12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	3212      	adds	r2, #18
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d9d8      	bls.n	8002bca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2303      	movs	r3, #3
 8002c42:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c52:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c66:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	@ 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c86:	4b89      	ldr	r3, [pc, #548]	@ (8002eac <HAL_GPIO_Init+0x234>)
 8002c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c8a:	e194      	b.n	8002fb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8186 	beq.w	8002fb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d005      	beq.n	8002cbc <HAL_GPIO_Init+0x44>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d130      	bne.n	8002d1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0201 	and.w	r2, r3, #1
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d017      	beq.n	8002d5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2203      	movs	r2, #3
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d123      	bne.n	8002dae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80e0 	beq.w	8002fb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df0:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <HAL_GPIO_Init+0x238>)
 8002df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002df6:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb0 <HAL_GPIO_Init+0x238>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e00:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb0 <HAL_GPIO_Init+0x238>)
 8002e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0e:	4a29      	ldr	r2, [pc, #164]	@ (8002eb4 <HAL_GPIO_Init+0x23c>)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a20      	ldr	r2, [pc, #128]	@ (8002eb8 <HAL_GPIO_Init+0x240>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d052      	beq.n	8002ee0 <HAL_GPIO_Init+0x268>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_GPIO_Init+0x244>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d031      	beq.n	8002ea6 <HAL_GPIO_Init+0x22e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_GPIO_Init+0x248>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02b      	beq.n	8002ea2 <HAL_GPIO_Init+0x22a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_GPIO_Init+0x24c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d025      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec8 <HAL_GPIO_Init+0x250>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01f      	beq.n	8002e9a <HAL_GPIO_Init+0x222>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ecc <HAL_GPIO_Init+0x254>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <HAL_GPIO_Init+0x21e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed0 <HAL_GPIO_Init+0x258>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x21a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	@ (8002ed4 <HAL_GPIO_Init+0x25c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x216>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a18      	ldr	r2, [pc, #96]	@ (8002ed8 <HAL_GPIO_Init+0x260>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x212>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <HAL_GPIO_Init+0x264>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x20e>
 8002e82:	2309      	movs	r3, #9
 8002e84:	e02d      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e86:	230a      	movs	r3, #10
 8002e88:	e02b      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	e029      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e027      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e92:	2306      	movs	r3, #6
 8002e94:	e025      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e023      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e021      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e01f      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e01d      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e01b      	b.n	8002ee2 <HAL_GPIO_Init+0x26a>
 8002eaa:	bf00      	nop
 8002eac:	58000080 	.word	0x58000080
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58000400 	.word	0x58000400
 8002eb8:	58020000 	.word	0x58020000
 8002ebc:	58020400 	.word	0x58020400
 8002ec0:	58020800 	.word	0x58020800
 8002ec4:	58020c00 	.word	0x58020c00
 8002ec8:	58021000 	.word	0x58021000
 8002ecc:	58021400 	.word	0x58021400
 8002ed0:	58021800 	.word	0x58021800
 8002ed4:	58021c00 	.word	0x58021c00
 8002ed8:	58022000 	.word	0x58022000
 8002edc:	58022400 	.word	0x58022400
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f002 0203 	and.w	r2, r2, #3
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	4093      	lsls	r3, r2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef2:	4938      	ldr	r1, [pc, #224]	@ (8002fd4 <HAL_GPIO_Init+0x35c>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae63 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	3724      	adds	r7, #36	@ 0x24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	58000400 	.word	0x58000400

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ff4:	e003      	b.n	8002ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	041a      	lsls	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e08b      	b.n	8003136 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fff6 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	@ 0x24
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800305c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800306c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	e006      	b.n	8003094 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003092:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d108      	bne.n	80030ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	e007      	b.n	80030be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <HAL_I2C_Init+0x134>)
 80030ca:	430b      	orrs	r3, r1
 80030cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69d9      	ldr	r1, [r3, #28]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	02008000 	.word	0x02008000

08003144 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b20      	cmp	r3, #32
 8003162:	f040 80fd 	bne.w	8003360 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_I2C_Master_Transmit+0x30>
 8003170:	2302      	movs	r3, #2
 8003172:	e0f6      	b.n	8003362 <HAL_I2C_Master_Transmit+0x21e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800317c:	f7fe fa76 	bl	800166c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2319      	movs	r3, #25
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f001 f875 	bl	800427e <I2C_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0e1      	b.n	8003362 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2221      	movs	r2, #33	@ 0x21
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2210      	movs	r2, #16
 80031aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	893a      	ldrh	r2, [r7, #8]
 80031be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2bff      	cmp	r3, #255	@ 0xff
 80031ce:	d906      	bls.n	80031de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	22ff      	movs	r2, #255	@ 0xff
 80031d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80031d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e007      	b.n	80031ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d024      	beq.n	8003240 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	b2db      	uxtb	r3, r3
 800322c:	3301      	adds	r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	4b4e      	ldr	r3, [pc, #312]	@ (800336c <HAL_I2C_Master_Transmit+0x228>)
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f001 fa6f 	bl	800471c <I2C_TransferConfig>
 800323e:	e066      	b.n	800330e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	4b48      	ldr	r3, [pc, #288]	@ (800336c <HAL_I2C_Master_Transmit+0x228>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f001 fa64 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003254:	e05b      	b.n	800330e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	6a39      	ldr	r1, [r7, #32]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f001 f868 	bl	8004330 <I2C_WaitOnTXISFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07b      	b.n	8003362 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d034      	beq.n	800330e <HAL_I2C_Master_Transmit+0x1ca>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d130      	bne.n	800330e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2200      	movs	r2, #0
 80032b4:	2180      	movs	r1, #128	@ 0x80
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 ffe1 	bl	800427e <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e04d      	b.n	8003362 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2bff      	cmp	r3, #255	@ 0xff
 80032ce:	d90e      	bls.n	80032ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	@ 0xff
 80032d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	2300      	movs	r3, #0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f001 fa18 	bl	800471c <I2C_TransferConfig>
 80032ec:	e00f      	b.n	800330e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	2300      	movs	r3, #0
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f001 fa07 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d19e      	bne.n	8003256 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	6a39      	ldr	r1, [r7, #32]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f001 f84e 	bl	80043be <I2C_WaitOnSTOPFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01a      	b.n	8003362 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2220      	movs	r2, #32
 8003332:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_I2C_Master_Transmit+0x22c>)
 8003340:	400b      	ands	r3, r1
 8003342:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	80002000 	.word	0x80002000
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	460b      	mov	r3, r1
 8003382:	817b      	strh	r3, [r7, #10]
 8003384:	4613      	mov	r3, r2
 8003386:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b20      	cmp	r3, #32
 8003392:	f040 80db 	bne.w	800354c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_I2C_Master_Receive+0x30>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0d4      	b.n	800354e <HAL_I2C_Master_Receive+0x1da>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ac:	f7fe f95e 	bl	800166c <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2319      	movs	r3, #25
 80033b8:	2201      	movs	r2, #1
 80033ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 ff5d 	bl	800427e <I2C_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0bf      	b.n	800354e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2222      	movs	r2, #34	@ 0x22
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2210      	movs	r2, #16
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	893a      	ldrh	r2, [r7, #8]
 80033ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2bff      	cmp	r3, #255	@ 0xff
 80033fe:	d90e      	bls.n	800341e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	22ff      	movs	r2, #255	@ 0xff
 8003404:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340a:	b2da      	uxtb	r2, r3
 800340c:	8979      	ldrh	r1, [r7, #10]
 800340e:	4b52      	ldr	r3, [pc, #328]	@ (8003558 <HAL_I2C_Master_Receive+0x1e4>)
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f001 f980 	bl	800471c <I2C_TransferConfig>
 800341c:	e06d      	b.n	80034fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342c:	b2da      	uxtb	r2, r3
 800342e:	8979      	ldrh	r1, [r7, #10]
 8003430:	4b49      	ldr	r3, [pc, #292]	@ (8003558 <HAL_I2C_Master_Receive+0x1e4>)
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f001 f96f 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800343e:	e05c      	b.n	80034fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fffd 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e07c      	b.n	800354e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d034      	beq.n	80034fa <HAL_I2C_Master_Receive+0x186>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d130      	bne.n	80034fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2200      	movs	r2, #0
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 feeb 	bl	800427e <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e04d      	b.n	800354e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2bff      	cmp	r3, #255	@ 0xff
 80034ba:	d90e      	bls.n	80034da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	22ff      	movs	r2, #255	@ 0xff
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	8979      	ldrh	r1, [r7, #10]
 80034ca:	2300      	movs	r3, #0
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f001 f922 	bl	800471c <I2C_TransferConfig>
 80034d8:	e00f      	b.n	80034fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	8979      	ldrh	r1, [r7, #10]
 80034ec:	2300      	movs	r3, #0
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f001 f911 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d19d      	bne.n	8003440 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6a39      	ldr	r1, [r7, #32]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 ff58 	bl	80043be <I2C_WaitOnSTOPFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01a      	b.n	800354e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2220      	movs	r2, #32
 800351e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <HAL_I2C_Master_Receive+0x1e8>)
 800352c:	400b      	ands	r3, r1
 800352e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	80002400 	.word	0x80002400
 800355c:	fe00e800 	.word	0xfe00e800

08003560 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
  }
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00f      	beq.n	80035d6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00f      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0208 	orr.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00f      	beq.n	800362a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003618:	f043 0202 	orr.w	r2, r3, #2
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003628:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 030b 	and.w	r3, r3, #11
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fcc5 	bl	8003fcc <I2C_ITError>
  }
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
 800367e:	4613      	mov	r3, r2
 8003680:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <I2C_Slave_ISR_IT+0x24>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0e2      	b.n	80038b4 <I2C_Slave_ISR_IT+0x1ea>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800370a:	6939      	ldr	r1, [r7, #16]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f9b5 	bl	8003a7c <I2C_ITSlaveCplt>
 8003712:	e0ca      	b.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04b      	beq.n	80037b6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003724:	2b00      	cmp	r3, #0
 8003726:	d046      	beq.n	80037b6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d128      	bne.n	8003784 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b28      	cmp	r3, #40	@ 0x28
 800373c:	d108      	bne.n	8003750 <I2C_Slave_ISR_IT+0x86>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003744:	d104      	bne.n	8003750 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003746:	6939      	ldr	r1, [r7, #16]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fbeb 	bl	8003f24 <I2C_ITListenCplt>
 800374e:	e031      	b.n	80037b4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b29      	cmp	r3, #41	@ 0x29
 800375a:	d10e      	bne.n	800377a <I2C_Slave_ISR_IT+0xb0>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003762:	d00a      	beq.n	800377a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2210      	movs	r2, #16
 800376a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fd44 	bl	80041fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f926 	bl	80039c4 <I2C_ITSlaveSeqCplt>
 8003778:	e01c      	b.n	80037b4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003782:	e08f      	b.n	80038a4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2210      	movs	r2, #16
 800378a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <I2C_Slave_ISR_IT+0xdc>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a4:	d17e      	bne.n	80038a4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	4619      	mov	r1, r3
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fc0d 	bl	8003fcc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037b2:	e077      	b.n	80038a4 <I2C_Slave_ISR_IT+0x1da>
 80037b4:	e076      	b.n	80038a4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02f      	beq.n	8003820 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02a      	beq.n	8003820 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d14b      	bne.n	80038a8 <I2C_Slave_ISR_IT+0x1de>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003816:	d047      	beq.n	80038a8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f8d3 	bl	80039c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800381e:	e043      	b.n	80038a8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003834:	6939      	ldr	r1, [r7, #16]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f840 	bl	80038bc <I2C_ITAddrCplt>
 800383c:	e035      	b.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d030      	beq.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02b      	beq.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d018      	beq.n	800388e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800388c:	e00d      	b.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003894:	d002      	beq.n	800389c <I2C_Slave_ISR_IT+0x1d2>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f891 	bl	80039c4 <I2C_ITSlaveSeqCplt>
 80038a2:	e002      	b.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80038a8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038d2:	2b28      	cmp	r3, #40	@ 0x28
 80038d4:	d16a      	bne.n	80039ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80038f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003902:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003910:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d138      	bne.n	800398c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	09db      	lsrs	r3, r3, #7
 800391e:	b29a      	uxth	r2, r3
 8003920:	89bb      	ldrh	r3, [r7, #12]
 8003922:	4053      	eors	r3, r2
 8003924:	b29b      	uxth	r3, r3
 8003926:	f003 0306 	and.w	r3, r3, #6
 800392a:	2b00      	cmp	r3, #0
 800392c:	d11c      	bne.n	8003968 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003940:	2b02      	cmp	r3, #2
 8003942:	d13b      	bne.n	80039bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2208      	movs	r2, #8
 8003950:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800395a:	89ba      	ldrh	r2, [r7, #12]
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fe86 	bl	8003672 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003966:	e029      	b.n	80039bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800396c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 ff05 	bl	8004780 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800397e:	89ba      	ldrh	r2, [r7, #12]
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fe74 	bl	8003672 <HAL_I2C_AddrCallback>
}
 800398a:	e017      	b.n	80039bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800398c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fef5 	bl	8004780 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800399e:	89ba      	ldrh	r2, [r7, #12]
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff fe64 	bl	8003672 <HAL_I2C_AddrCallback>
}
 80039aa:	e007      	b.n	80039bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2208      	movs	r2, #8
 80039b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e00c      	b.n	8003a12 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b29      	cmp	r3, #41	@ 0x29
 8003a1c:	d112      	bne.n	8003a44 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2228      	movs	r2, #40	@ 0x28
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2221      	movs	r2, #33	@ 0x21
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fea6 	bl	8004780 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fe04 	bl	800364a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a42:	e017      	b.n	8003a74 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a4e:	d111      	bne.n	8003a74 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2228      	movs	r2, #40	@ 0x28
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2222      	movs	r2, #34	@ 0x22
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a5e:	2102      	movs	r1, #2
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fe8d 	bl	8004780 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fdf5 	bl	800365e <HAL_I2C_SlaveRxCpltCallback>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aa8:	7afb      	ldrb	r3, [r7, #11]
 8003aaa:	2b21      	cmp	r3, #33	@ 0x21
 8003aac:	d002      	beq.n	8003ab4 <I2C_ITSlaveCplt+0x38>
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	2b29      	cmp	r3, #41	@ 0x29
 8003ab2:	d108      	bne.n	8003ac6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ab4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fe61 	bl	8004780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2221      	movs	r2, #33	@ 0x21
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ac4:	e019      	b.n	8003afa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	2b22      	cmp	r3, #34	@ 0x22
 8003aca:	d002      	beq.n	8003ad2 <I2C_ITSlaveCplt+0x56>
 8003acc:	7afb      	ldrb	r3, [r7, #11]
 8003ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ad0:	d108      	bne.n	8003ae4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ad2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fe52 	bl	8004780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2222      	movs	r2, #34	@ 0x22
 8003ae0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ae2:	e00a      	b.n	8003afa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	2b28      	cmp	r3, #40	@ 0x28
 8003ae8:	d107      	bne.n	8003afa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003aea:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fe46 	bl	8004780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b08:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b7f      	ldr	r3, [pc, #508]	@ (8003d14 <I2C_ITSlaveCplt+0x298>)
 8003b16:	400b      	ands	r3, r1
 8003b18:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fb6d 	bl	80041fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d07a      	beq.n	8003c20 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8111 	beq.w	8003d66 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	@ (8003d18 <I2C_ITSlaveCplt+0x29c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d059      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a71      	ldr	r2, [pc, #452]	@ (8003d1c <I2C_ITSlaveCplt+0x2a0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d053      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6f      	ldr	r2, [pc, #444]	@ (8003d20 <I2C_ITSlaveCplt+0x2a4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d04d      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d24 <I2C_ITSlaveCplt+0x2a8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d047      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8003d28 <I2C_ITSlaveCplt+0x2ac>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d041      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a69      	ldr	r2, [pc, #420]	@ (8003d2c <I2C_ITSlaveCplt+0x2b0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d03b      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a67      	ldr	r2, [pc, #412]	@ (8003d30 <I2C_ITSlaveCplt+0x2b4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d035      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a65      	ldr	r2, [pc, #404]	@ (8003d34 <I2C_ITSlaveCplt+0x2b8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d02f      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a63      	ldr	r2, [pc, #396]	@ (8003d38 <I2C_ITSlaveCplt+0x2bc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d029      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a61      	ldr	r2, [pc, #388]	@ (8003d3c <I2C_ITSlaveCplt+0x2c0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d023      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5f      	ldr	r2, [pc, #380]	@ (8003d40 <I2C_ITSlaveCplt+0x2c4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d01d      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5d      	ldr	r2, [pc, #372]	@ (8003d44 <I2C_ITSlaveCplt+0x2c8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d017      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5b      	ldr	r2, [pc, #364]	@ (8003d48 <I2C_ITSlaveCplt+0x2cc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d011      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a59      	ldr	r2, [pc, #356]	@ (8003d4c <I2C_ITSlaveCplt+0x2d0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a57      	ldr	r2, [pc, #348]	@ (8003d50 <I2C_ITSlaveCplt+0x2d4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d005      	beq.n	8003c04 <I2C_ITSlaveCplt+0x188>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a55      	ldr	r2, [pc, #340]	@ (8003d54 <I2C_ITSlaveCplt+0x2d8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d105      	bne.n	8003c10 <I2C_ITSlaveCplt+0x194>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	e004      	b.n	8003c1a <I2C_ITSlaveCplt+0x19e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003c1e:	e0a2      	b.n	8003d66 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 809d 	beq.w	8003d66 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8090 	beq.w	8003d66 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <I2C_ITSlaveCplt+0x29c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d059      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a30      	ldr	r2, [pc, #192]	@ (8003d1c <I2C_ITSlaveCplt+0x2a0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d053      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2e      	ldr	r2, [pc, #184]	@ (8003d20 <I2C_ITSlaveCplt+0x2a4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d04d      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2c      	ldr	r2, [pc, #176]	@ (8003d24 <I2C_ITSlaveCplt+0x2a8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d047      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d28 <I2C_ITSlaveCplt+0x2ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d041      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a28      	ldr	r2, [pc, #160]	@ (8003d2c <I2C_ITSlaveCplt+0x2b0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a26      	ldr	r2, [pc, #152]	@ (8003d30 <I2C_ITSlaveCplt+0x2b4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d035      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <I2C_ITSlaveCplt+0x2b8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02f      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <I2C_ITSlaveCplt+0x2bc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d029      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	@ (8003d3c <I2C_ITSlaveCplt+0x2c0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d023      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <I2C_ITSlaveCplt+0x2c4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <I2C_ITSlaveCplt+0x2c8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d017      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d48 <I2C_ITSlaveCplt+0x2cc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d011      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	@ (8003d4c <I2C_ITSlaveCplt+0x2d0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <I2C_ITSlaveCplt+0x2d4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d005      	beq.n	8003d06 <I2C_ITSlaveCplt+0x28a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a14      	ldr	r2, [pc, #80]	@ (8003d54 <I2C_ITSlaveCplt+0x2d8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d128      	bne.n	8003d58 <I2C_ITSlaveCplt+0x2dc>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	e027      	b.n	8003d62 <I2C_ITSlaveCplt+0x2e6>
 8003d12:	bf00      	nop
 8003d14:	fe00e800 	.word	0xfe00e800
 8003d18:	40020010 	.word	0x40020010
 8003d1c:	40020028 	.word	0x40020028
 8003d20:	40020040 	.word	0x40020040
 8003d24:	40020058 	.word	0x40020058
 8003d28:	40020070 	.word	0x40020070
 8003d2c:	40020088 	.word	0x40020088
 8003d30:	400200a0 	.word	0x400200a0
 8003d34:	400200b8 	.word	0x400200b8
 8003d38:	40020410 	.word	0x40020410
 8003d3c:	40020428 	.word	0x40020428
 8003d40:	40020440 	.word	0x40020440
 8003d44:	40020458 	.word	0x40020458
 8003d48:	40020470 	.word	0x40020470
 8003d4c:	40020488 	.word	0x40020488
 8003d50:	400204a0 	.word	0x400204a0
 8003d54:	400204b8 	.word	0x400204b8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0304 	bic.w	r3, r3, #4
 8003d76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00c      	beq.n	8003db2 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc0:	f043 0204 	orr.w	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d049      	beq.n	8003e66 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d044      	beq.n	8003e66 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d128      	bne.n	8003e38 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b28      	cmp	r3, #40	@ 0x28
 8003df0:	d108      	bne.n	8003e04 <I2C_ITSlaveCplt+0x388>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df8:	d104      	bne.n	8003e04 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f891 	bl	8003f24 <I2C_ITListenCplt>
 8003e02:	e030      	b.n	8003e66 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b29      	cmp	r3, #41	@ 0x29
 8003e0e:	d10e      	bne.n	8003e2e <I2C_ITSlaveCplt+0x3b2>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e16:	d00a      	beq.n	8003e2e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f9ea 	bl	80041fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fdcc 	bl	80039c4 <I2C_ITSlaveSeqCplt>
 8003e2c:	e01b      	b.n	8003e66 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2210      	movs	r2, #16
 8003e34:	61da      	str	r2, [r3, #28]
 8003e36:	e016      	b.n	8003e66 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	f043 0204 	orr.w	r2, r3, #4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <I2C_ITSlaveCplt+0x3de>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e58:	d105      	bne.n	8003e66 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8b3 	bl	8003fcc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8a2 	bl	8003fcc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b28      	cmp	r3, #40	@ 0x28
 8003e92:	d141      	bne.n	8003f18 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f844 	bl	8003f24 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e9c:	e03c      	b.n	8003f18 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ea6:	d014      	beq.n	8003ed2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fd8b 	bl	80039c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <I2C_ITSlaveCplt+0x4a4>)
 8003eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fbdf 	bl	800368e <HAL_I2C_ListenCpltCallback>
}
 8003ed0:	e022      	b.n	8003f18 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b22      	cmp	r3, #34	@ 0x22
 8003edc:	d10e      	bne.n	8003efc <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fbb2 	bl	800365e <HAL_I2C_SlaveRxCpltCallback>
}
 8003efa:	e00d      	b.n	8003f18 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fb99 	bl	800364a <HAL_I2C_SlaveTxCpltCallback>
}
 8003f18:	bf00      	nop
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a25      	ldr	r2, [pc, #148]	@ (8003fc8 <I2C_ITListenCplt+0xa4>)
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d022      	beq.n	8003fa0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fa0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fbeb 	bl	8004780 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fb67 	bl	800368e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fdc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a6d      	ldr	r2, [pc, #436]	@ (80041a0 <I2C_ITError+0x1d4>)
 8003fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b28      	cmp	r3, #40	@ 0x28
 8004002:	d005      	beq.n	8004010 <I2C_ITError+0x44>
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b29      	cmp	r3, #41	@ 0x29
 8004008:	d002      	beq.n	8004010 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b2a      	cmp	r3, #42	@ 0x2a
 800400e:	d10b      	bne.n	8004028 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004010:	2103      	movs	r1, #3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fbb4 	bl	8004780 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2228      	movs	r2, #40	@ 0x28
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a60      	ldr	r2, [pc, #384]	@ (80041a4 <I2C_ITError+0x1d8>)
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34
 8004026:	e030      	b.n	800408a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004028:	f248 0103 	movw	r1, #32771	@ 0x8003
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fba7 	bl	8004780 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8e1 	bl	80041fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b60      	cmp	r3, #96	@ 0x60
 8004042:	d01f      	beq.n	8004084 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b20      	cmp	r3, #32
 8004058:	d114      	bne.n	8004084 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d109      	bne.n	800407c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2210      	movs	r2, #16
 800406e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004074:	f043 0204 	orr.w	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2220      	movs	r2, #32
 8004082:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d039      	beq.n	800410c <I2C_ITError+0x140>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b11      	cmp	r3, #17
 800409c:	d002      	beq.n	80040a4 <I2C_ITError+0xd8>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b21      	cmp	r3, #33	@ 0x21
 80040a2:	d133      	bne.n	800410c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b2:	d107      	bne.n	80040c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe f993 	bl	80023f4 <HAL_DMA_GetState>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d017      	beq.n	8004104 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	4a33      	ldr	r2, [pc, #204]	@ (80041a8 <I2C_ITError+0x1dc>)
 80040da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd ff3d 	bl	8001f68 <HAL_DMA_Abort_IT>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d04d      	beq.n	8004190 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040fe:	4610      	mov	r0, r2
 8004100:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004102:	e045      	b.n	8004190 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f851 	bl	80041ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800410a:	e041      	b.n	8004190 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d039      	beq.n	8004188 <I2C_ITError+0x1bc>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b12      	cmp	r3, #18
 8004118:	d002      	beq.n	8004120 <I2C_ITError+0x154>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b22      	cmp	r3, #34	@ 0x22
 800411e:	d133      	bne.n	8004188 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412e:	d107      	bne.n	8004140 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f955 	bl	80023f4 <HAL_DMA_GetState>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d017      	beq.n	8004180 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <I2C_ITError+0x1dc>)
 8004156:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	4618      	mov	r0, r3
 8004166:	f7fd feff 	bl	8001f68 <HAL_DMA_Abort_IT>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d011      	beq.n	8004194 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800417a:	4610      	mov	r0, r2
 800417c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800417e:	e009      	b.n	8004194 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f813 	bl	80041ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004186:	e005      	b.n	8004194 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f80f 	bl	80041ac <I2C_TreatErrorCallback>
  }
}
 800418e:	e002      	b.n	8004196 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004194:	bf00      	nop
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	ffff0000 	.word	0xffff0000
 80041a4:	080036cb 	.word	0x080036cb
 80041a8:	08004243 	.word	0x08004243

080041ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b60      	cmp	r3, #96	@ 0x60
 80041be:	d10e      	bne.n	80041de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fa6d 	bl	80036b6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041dc:	e009      	b.n	80041f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fa58 	bl	80036a2 <HAL_I2C_ErrorCallback>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d103      	bne.n	8004218 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2200      	movs	r2, #0
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d007      	beq.n	8004236 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	619a      	str	r2, [r3, #24]
  }
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	2200      	movs	r2, #0
 800425e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	2200      	movs	r2, #0
 800426e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff ff9b 	bl	80041ac <I2C_TreatErrorCallback>
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428e:	e03b      	b.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f961 	bl	800455c <I2C_IsErrorOccurred>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e041      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d02d      	beq.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ac:	f7fd f9de 	bl	800166c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d302      	bcc.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d122      	bne.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d113      	bne.n	8004308 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e00f      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	429a      	cmp	r2, r3
 8004324:	d0b4      	beq.n	8004290 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800433c:	e033      	b.n	80043a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f90a 	bl	800455c <I2C_IsErrorOccurred>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e031      	b.n	80043b6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d025      	beq.n	80043a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd f987 	bl	800166c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11a      	bne.n	80043a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d013      	beq.n	80043a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e007      	b.n	80043b6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d1c4      	bne.n	800433e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ca:	e02f      	b.n	800442c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f8c3 	bl	800455c <I2C_IsErrorOccurred>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e02d      	b.n	800443c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fd f944 	bl	800166c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11a      	bne.n	800442c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b20      	cmp	r3, #32
 8004402:	d013      	beq.n	800442c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d1c8      	bne.n	80043cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004454:	e071      	b.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f87e 	bl	800455c <I2C_IsErrorOccurred>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d13b      	bne.n	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d138      	bne.n	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d105      	bne.n	8004498 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d121      	bne.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2210      	movs	r2, #16
 80044ac:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2204      	movs	r2, #4
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2220      	movs	r2, #32
 80044ba:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80044c8:	400b      	ands	r3, r1
 80044ca:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
 80044e8:	e002      	b.n	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80044f0:	f7fd f8bc 	bl	800166c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d119      	bne.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d116      	bne.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b04      	cmp	r3, #4
 8004518:	d00f      	beq.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d002      	beq.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d083      	beq.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800454e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	@ 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d068      	beq.n	800465a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2210      	movs	r2, #16
 800458e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004590:	e049      	b.n	8004626 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d045      	beq.n	8004626 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd f867 	bl	800166c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_IsErrorOccurred+0x54>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d13a      	bne.n	8004626 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d2:	d121      	bne.n	8004618 <I2C_IsErrorOccurred+0xbc>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045da:	d01d      	beq.n	8004618 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d01a      	beq.n	8004618 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045f2:	f7fd f83b 	bl	800166c <HAL_GetTick>
 80045f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f8:	e00e      	b.n	8004618 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045fa:	f7fd f837 	bl	800166c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b19      	cmp	r3, #25
 8004606:	d907      	bls.n	8004618 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004616:	e006      	b.n	8004626 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b20      	cmp	r3, #32
 8004624:	d1e9      	bne.n	80045fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d003      	beq.n	800463c <I2C_IsErrorOccurred+0xe0>
 8004634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0aa      	beq.n	8004592 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800463c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2220      	movs	r2, #32
 800464a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800467c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800469e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff fd92 	bl	80041fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <I2C_IsErrorOccurred+0x1bc>)
 80046e2:	400b      	ands	r3, r1
 80046e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800470a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	@ 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	4613      	mov	r3, r2
 800472c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004734:	7a7b      	ldrb	r3, [r7, #9]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	4313      	orrs	r3, r2
 8004746:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800474a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	0d5b      	lsrs	r3, r3, #21
 8004756:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800475a:	4b08      	ldr	r3, [pc, #32]	@ (800477c <I2C_TransferConfig+0x60>)
 800475c:	430b      	orrs	r3, r1
 800475e:	43db      	mvns	r3, r3
 8004760:	ea02 0103 	and.w	r1, r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	03ff63ff 	.word	0x03ff63ff

08004780 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00f      	beq.n	80047ba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80047a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047ae:	2b28      	cmp	r3, #40	@ 0x28
 80047b0:	d003      	beq.n	80047ba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80047b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047ba:	887b      	ldrh	r3, [r7, #2]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00f      	beq.n	80047e4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80047ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047d8:	2b28      	cmp	r3, #40	@ 0x28
 80047da:	d003      	beq.n	80047e4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80047e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da03      	bge.n	80047f4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80047f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d103      	bne.n	8004802 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004800:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004802:	887b      	ldrh	r3, [r7, #2]
 8004804:	2b20      	cmp	r3, #32
 8004806:	d103      	bne.n	8004810 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f043 0320 	orr.w	r3, r3, #32
 800480e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004810:	887b      	ldrh	r3, [r7, #2]
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d103      	bne.n	800481e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800481c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43da      	mvns	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	400a      	ands	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b20      	cmp	r3, #32
 8004850:	d138      	bne.n	80048c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800485c:	2302      	movs	r3, #2
 800485e:	e032      	b.n	80048c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2224      	movs	r2, #36	@ 0x24
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800488e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d139      	bne.n	800495c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e033      	b.n	800495e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2224      	movs	r2, #36	@ 0x24
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af02      	add	r7, sp, #8
 8004970:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0fe      	b.n	8004b7a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fc fc33 	bl	80011fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f005 fdb6 	bl	800a514 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7c1a      	ldrb	r2, [r3, #16]
 80049b0:	f88d 2000 	strb.w	r2, [sp]
 80049b4:	3304      	adds	r3, #4
 80049b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b8:	f005 fd3a 	bl	800a430 <USB_CoreInit>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0d5      	b.n	8004b7a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f005 fdae 	bl	800a536 <USB_SetCurrentMode>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0c6      	b.n	8004b7a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
 80049f0:	e04a      	b.n	8004a88 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	3315      	adds	r3, #21
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3314      	adds	r3, #20
 8004a16:	7bfa      	ldrb	r2, [r7, #15]
 8004a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	b298      	uxth	r0, r3
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	332e      	adds	r3, #46	@ 0x2e
 8004a2e:	4602      	mov	r2, r0
 8004a30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3318      	adds	r3, #24
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	331c      	adds	r3, #28
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3320      	adds	r3, #32
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3324      	adds	r3, #36	@ 0x24
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	3301      	adds	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	791b      	ldrb	r3, [r3, #4]
 8004a8c:	7bfa      	ldrb	r2, [r7, #15]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d3af      	bcc.n	80049f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e044      	b.n	8004b22 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ac0:	7bfa      	ldrb	r2, [r7, #15]
 8004ac2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ada:	7bfa      	ldrb	r2, [r7, #15]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004af0:	7bfa      	ldrb	r2, [r7, #15]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	791b      	ldrb	r3, [r3, #4]
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3b5      	bcc.n	8004a98 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7c1a      	ldrb	r2, [r3, #16]
 8004b34:	f88d 2000 	strb.w	r2, [sp]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b3c:	f005 fd48 	bl	800a5d0 <USB_DevInit>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e013      	b.n	8004b7a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	7b1b      	ldrb	r3, [r3, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d102      	bne.n	8004b6e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f80b 	bl	8004b84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f005 ff03 	bl	800a97e <USB_DevDisconnect>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bb2:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	10000003 	.word	0x10000003

08004bcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d00a      	beq.n	8004bf6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004be0:	4b16      	ldr	r3, [pc, #88]	@ (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d001      	beq.n	8004bf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e01f      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e01d      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bf6:	4b11      	ldr	r3, [pc, #68]	@ (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	490f      	ldr	r1, [pc, #60]	@ (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c06:	f7fc fd31 	bl	800166c <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c0c:	e009      	b.n	8004c22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c0e:	f7fc fd2d 	bl	800166c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c1c:	d901      	bls.n	8004c22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e007      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_PWREx_ConfigSupply+0x70>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2e:	d1ee      	bne.n	8004c0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	58024800 	.word	0x58024800

08004c40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c4e:	60d3      	str	r3, [r2, #12]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	58024800 	.word	0x58024800

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	@ 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f000 bc48 	b.w	8005504 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8088 	beq.w	8004d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c82:	4b99      	ldr	r3, [pc, #612]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c8c:	4b96      	ldr	r3, [pc, #600]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d007      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x48>
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	2b18      	cmp	r3, #24
 8004c9c:	d111      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d06d      	beq.n	8004d90 <HAL_RCC_OscConfig+0x130>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d169      	bne.n	8004d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f000 bc21 	b.w	8005504 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x7a>
 8004ccc:	4b86      	ldr	r3, [pc, #536]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a85      	ldr	r2, [pc, #532]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x9c>
 8004ce2:	4b81      	ldr	r3, [pc, #516]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a80      	ldr	r2, [pc, #512]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d06:	4b78      	ldr	r3, [pc, #480]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a77      	ldr	r2, [pc, #476]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b75      	ldr	r3, [pc, #468]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a74      	ldr	r2, [pc, #464]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004d20:	4b71      	ldr	r3, [pc, #452]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a70      	ldr	r2, [pc, #448]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6d      	ldr	r2, [pc, #436]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fc fc94 	bl	800166c <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fc fc90 	bl	800166c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	@ 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e3d4      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc fc80 	bl	800166c <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fc fc7c 	bl	800166c <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	@ 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e3c0      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d82:	4b59      	ldr	r3, [pc, #356]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x110>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80ca 	beq.w	8004f34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da0:	4b51      	ldr	r3, [pc, #324]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004daa:	4b4f      	ldr	r3, [pc, #316]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x166>
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	2b18      	cmp	r3, #24
 8004dba:	d156      	bne.n	8004e6a <HAL_RCC_OscConfig+0x20a>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d151      	bne.n	8004e6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc6:	4b48      	ldr	r3, [pc, #288]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x17e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e392      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dde:	4b42      	ldr	r3, [pc, #264]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0219 	bic.w	r2, r3, #25
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	493f      	ldr	r1, [pc, #252]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fc fc3c 	bl	800166c <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df8:	f7fc fc38 	bl	800166c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e37c      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	f7fc fc59 	bl	80016cc <HAL_GetREVID>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d817      	bhi.n	8004e54 <HAL_RCC_OscConfig+0x1f4>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b40      	cmp	r3, #64	@ 0x40
 8004e2a:	d108      	bne.n	8004e3e <HAL_RCC_OscConfig+0x1de>
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e34:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	e07a      	b.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	031b      	lsls	r3, r3, #12
 8004e4c:	4926      	ldr	r1, [pc, #152]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e52:	e06f      	b.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b24      	ldr	r3, [pc, #144]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	4921      	ldr	r1, [pc, #132]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e68:	e064      	b.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d047      	beq.n	8004f02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 0219 	bic.w	r2, r3, #25
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	491a      	ldr	r1, [pc, #104]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fc fbf2 	bl	800166c <HAL_GetTick>
 8004e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8c:	f7fc fbee 	bl	800166c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e332      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eaa:	f7fc fc0f 	bl	80016cc <HAL_GetREVID>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d819      	bhi.n	8004eec <HAL_RCC_OscConfig+0x28c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b40      	cmp	r3, #64	@ 0x40
 8004ebe:	d108      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x272>
 8004ec0:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ec8:	4a07      	ldr	r2, [pc, #28]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ece:	6053      	str	r3, [r2, #4]
 8004ed0:	e030      	b.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
 8004ed2:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	031b      	lsls	r3, r3, #12
 8004ee0:	4901      	ldr	r1, [pc, #4]	@ (8004ee8 <HAL_RCC_OscConfig+0x288>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	604b      	str	r3, [r1, #4]
 8004ee6:	e025      	b.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	4b9a      	ldr	r3, [pc, #616]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	4997      	ldr	r1, [pc, #604]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
 8004f00:	e018      	b.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f02:	4b95      	ldr	r3, [pc, #596]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a94      	ldr	r2, [pc, #592]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fc fbad 	bl	800166c <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fc fba9 	bl	800166c <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e2ed      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f28:	4b8b      	ldr	r3, [pc, #556]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80a9 	beq.w	8005094 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f42:	4b85      	ldr	r3, [pc, #532]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f4c:	4b82      	ldr	r3, [pc, #520]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d007      	beq.n	8004f68 <HAL_RCC_OscConfig+0x308>
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b18      	cmp	r3, #24
 8004f5c:	d13a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x374>
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d135      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f68:	4b7b      	ldr	r3, [pc, #492]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_OscConfig+0x320>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e2c1      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f80:	f7fc fba4 	bl	80016cc <HAL_GetREVID>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d817      	bhi.n	8004fbe <HAL_RCC_OscConfig+0x35e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d108      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x348>
 8004f96:	4b70      	ldr	r3, [pc, #448]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004fa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fa4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fa6:	e075      	b.n	8005094 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	069b      	lsls	r3, r3, #26
 8004fb6:	4968      	ldr	r1, [pc, #416]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fbc:	e06a      	b.n	8005094 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fbe:	4b66      	ldr	r3, [pc, #408]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	4962      	ldr	r1, [pc, #392]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fd2:	e05f      	b.n	8005094 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d042      	beq.n	8005062 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fc fb40 	bl	800166c <HAL_GetTick>
 8004fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ff0:	f7fc fb3c 	bl	800166c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e280      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005002:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800500e:	f7fc fb5d 	bl	80016cc <HAL_GetREVID>
 8005012:	4603      	mov	r3, r0
 8005014:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005018:	4293      	cmp	r3, r2
 800501a:	d817      	bhi.n	800504c <HAL_RCC_OscConfig+0x3ec>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	2b20      	cmp	r3, #32
 8005022:	d108      	bne.n	8005036 <HAL_RCC_OscConfig+0x3d6>
 8005024:	4b4c      	ldr	r3, [pc, #304]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800502c:	4a4a      	ldr	r2, [pc, #296]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 800502e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005032:	6053      	str	r3, [r2, #4]
 8005034:	e02e      	b.n	8005094 <HAL_RCC_OscConfig+0x434>
 8005036:	4b48      	ldr	r3, [pc, #288]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	069b      	lsls	r3, r3, #26
 8005044:	4944      	ldr	r1, [pc, #272]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	604b      	str	r3, [r1, #4]
 800504a:	e023      	b.n	8005094 <HAL_RCC_OscConfig+0x434>
 800504c:	4b42      	ldr	r3, [pc, #264]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	493f      	ldr	r1, [pc, #252]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 800505c:	4313      	orrs	r3, r2
 800505e:	60cb      	str	r3, [r1, #12]
 8005060:	e018      	b.n	8005094 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005062:	4b3d      	ldr	r3, [pc, #244]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3c      	ldr	r2, [pc, #240]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800506c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fc fafd 	bl	800166c <HAL_GetTick>
 8005072:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005076:	f7fc faf9 	bl	800166c <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e23d      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005088:	4b33      	ldr	r3, [pc, #204]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d036      	beq.n	800510e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d019      	beq.n	80050dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fc fada 	bl	800166c <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fc fad6 	bl	800166c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e21a      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ce:	4b22      	ldr	r3, [pc, #136]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 80050d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x45c>
 80050da:	e018      	b.n	800510e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fc fac0 	bl	800166c <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f0:	f7fc fabc 	bl	800166c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e200      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d039      	beq.n	800518e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01c      	beq.n	800515c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0c      	ldr	r2, [pc, #48]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 8005128:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800512c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800512e:	f7fc fa9d 	bl	800166c <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fc fa99 	bl	800166c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e1dd      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005148:	4b03      	ldr	r3, [pc, #12]	@ (8005158 <HAL_RCC_OscConfig+0x4f8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x4d6>
 8005154:	e01b      	b.n	800518e <HAL_RCC_OscConfig+0x52e>
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800515c:	4b9b      	ldr	r3, [pc, #620]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a9a      	ldr	r2, [pc, #616]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005166:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005168:	f7fc fa80 	bl	800166c <HAL_GetTick>
 800516c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005170:	f7fc fa7c 	bl	800166c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e1c0      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005182:	4b92      	ldr	r3, [pc, #584]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8081 	beq.w	800529e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800519c:	4b8c      	ldr	r3, [pc, #560]	@ (80053d0 <HAL_RCC_OscConfig+0x770>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a8b      	ldr	r2, [pc, #556]	@ (80053d0 <HAL_RCC_OscConfig+0x770>)
 80051a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051a8:	f7fc fa60 	bl	800166c <HAL_GetTick>
 80051ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b0:	f7fc fa5c 	bl	800166c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	@ 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e1a0      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051c2:	4b83      	ldr	r3, [pc, #524]	@ (80053d0 <HAL_RCC_OscConfig+0x770>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x584>
 80051d6:	4b7d      	ldr	r3, [pc, #500]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	4a7c      	ldr	r2, [pc, #496]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e2:	e02d      	b.n	8005240 <HAL_RCC_OscConfig+0x5e0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x5a6>
 80051ec:	4b77      	ldr	r3, [pc, #476]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a76      	ldr	r2, [pc, #472]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	4b74      	ldr	r3, [pc, #464]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fc:	4a73      	ldr	r2, [pc, #460]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80051fe:	f023 0304 	bic.w	r3, r3, #4
 8005202:	6713      	str	r3, [r2, #112]	@ 0x70
 8005204:	e01c      	b.n	8005240 <HAL_RCC_OscConfig+0x5e0>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x5c8>
 800520e:	4b6f      	ldr	r3, [pc, #444]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a6e      	ldr	r2, [pc, #440]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	4b6c      	ldr	r3, [pc, #432]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521e:	4a6b      	ldr	r2, [pc, #428]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6713      	str	r3, [r2, #112]	@ 0x70
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0x5e0>
 8005228:	4b68      	ldr	r3, [pc, #416]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	4a67      	ldr	r2, [pc, #412]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	6713      	str	r3, [r2, #112]	@ 0x70
 8005234:	4b65      	ldr	r3, [pc, #404]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005238:	4a64      	ldr	r2, [pc, #400]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800523a:	f023 0304 	bic.w	r3, r3, #4
 800523e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fc fa10 	bl	800166c <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800524e:	e00a      	b.n	8005266 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7fc fa0c 	bl	800166c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e14e      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005266:	4b59      	ldr	r3, [pc, #356]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ee      	beq.n	8005250 <HAL_RCC_OscConfig+0x5f0>
 8005272:	e014      	b.n	800529e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fc f9fa 	bl	800166c <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800527a:	e00a      	b.n	8005292 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7fc f9f6 	bl	800166c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e138      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005292:	4b4e      	ldr	r3, [pc, #312]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ee      	bne.n	800527c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 812d 	beq.w	8005502 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052a8:	4b48      	ldr	r3, [pc, #288]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052b0:	2b18      	cmp	r3, #24
 80052b2:	f000 80bd 	beq.w	8005430 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	f040 809e 	bne.w	80053fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c0:	4b42      	ldr	r3, [pc, #264]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a41      	ldr	r2, [pc, #260]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80052c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc f9ce 	bl	800166c <HAL_GetTick>
 80052d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fc f9ca 	bl	800166c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e10e      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052e6:	4b39      	ldr	r3, [pc, #228]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f2:	4b36      	ldr	r3, [pc, #216]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80052f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052f6:	4b37      	ldr	r3, [pc, #220]	@ (80053d4 <HAL_RCC_OscConfig+0x774>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005302:	0112      	lsls	r2, r2, #4
 8005304:	430a      	orrs	r2, r1
 8005306:	4931      	ldr	r1, [pc, #196]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005308:	4313      	orrs	r3, r2
 800530a:	628b      	str	r3, [r1, #40]	@ 0x28
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005310:	3b01      	subs	r3, #1
 8005312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531a:	3b01      	subs	r3, #1
 800531c:	025b      	lsls	r3, r3, #9
 800531e:	b29b      	uxth	r3, r3
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	3b01      	subs	r3, #1
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005334:	3b01      	subs	r3, #1
 8005336:	061b      	lsls	r3, r3, #24
 8005338:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800533c:	4923      	ldr	r1, [pc, #140]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800533e:	4313      	orrs	r3, r2
 8005340:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005342:	4b22      	ldr	r3, [pc, #136]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	4a21      	ldr	r2, [pc, #132]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800534e:	4b1f      	ldr	r3, [pc, #124]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005352:	4b21      	ldr	r3, [pc, #132]	@ (80053d8 <HAL_RCC_OscConfig+0x778>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800535a:	00d2      	lsls	r2, r2, #3
 800535c:	491b      	ldr	r1, [pc, #108]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005362:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	f023 020c 	bic.w	r2, r3, #12
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	4917      	ldr	r1, [pc, #92]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005374:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	f023 0202 	bic.w	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005380:	4912      	ldr	r1, [pc, #72]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005386:	4b11      	ldr	r3, [pc, #68]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4a10      	ldr	r2, [pc, #64]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005392:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	4a0d      	ldr	r2, [pc, #52]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800539c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800539e:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	4a0a      	ldr	r2, [pc, #40]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053aa:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	4a07      	ldr	r2, [pc, #28]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a04      	ldr	r2, [pc, #16]	@ (80053cc <HAL_RCC_OscConfig+0x76c>)
 80053bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c2:	f7fc f953 	bl	800166c <HAL_GetTick>
 80053c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053c8:	e011      	b.n	80053ee <HAL_RCC_OscConfig+0x78e>
 80053ca:	bf00      	nop
 80053cc:	58024400 	.word	0x58024400
 80053d0:	58024800 	.word	0x58024800
 80053d4:	fffffc0c 	.word	0xfffffc0c
 80053d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc f946 	bl	800166c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e08a      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ee:	4b47      	ldr	r3, [pc, #284]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x77c>
 80053fa:	e082      	b.n	8005502 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4b43      	ldr	r3, [pc, #268]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a42      	ldr	r2, [pc, #264]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 8005402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fc f930 	bl	800166c <HAL_GetTick>
 800540c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc f92c 	bl	800166c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e070      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005422:	4b3a      	ldr	r3, [pc, #232]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x7b0>
 800542e:	e068      	b.n	8005502 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005430:	4b36      	ldr	r3, [pc, #216]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005436:	4b35      	ldr	r3, [pc, #212]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	2b01      	cmp	r3, #1
 8005442:	d031      	beq.n	80054a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d12a      	bne.n	80054a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d122      	bne.n	80054a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d11a      	bne.n	80054a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d111      	bne.n	80054a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d108      	bne.n	80054a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	0e1b      	lsrs	r3, r3, #24
 800549a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e02b      	b.n	8005504 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d01f      	beq.n	8005502 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	4a11      	ldr	r2, [pc, #68]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ce:	f7fc f8cd 	bl	800166c <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054d4:	bf00      	nop
 80054d6:	f7fc f8c9 	bl	800166c <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	4293      	cmp	r3, r2
 80054e0:	d0f9      	beq.n	80054d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005510 <HAL_RCC_OscConfig+0x8b0>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054ee:	00d2      	lsls	r2, r2, #3
 80054f0:	4906      	ldr	r1, [pc, #24]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4a04      	ldr	r2, [pc, #16]	@ (800550c <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3730      	adds	r7, #48	@ 0x30
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	58024400 	.word	0x58024400
 8005510:	ffff0007 	.word	0xffff0007

08005514 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e19c      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005528:	4b8a      	ldr	r3, [pc, #552]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d910      	bls.n	8005558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b87      	ldr	r3, [pc, #540]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 020f 	bic.w	r2, r3, #15
 800553e:	4985      	ldr	r1, [pc, #532]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b83      	ldr	r3, [pc, #524]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e184      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	4b7b      	ldr	r3, [pc, #492]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005570:	429a      	cmp	r2, r3
 8005572:	d908      	bls.n	8005586 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005574:	4b78      	ldr	r3, [pc, #480]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	4975      	ldr	r1, [pc, #468]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005582:	4313      	orrs	r3, r2
 8005584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d010      	beq.n	80055b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	4b70      	ldr	r3, [pc, #448]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800559e:	429a      	cmp	r2, r3
 80055a0:	d908      	bls.n	80055b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	496a      	ldr	r1, [pc, #424]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	4b64      	ldr	r3, [pc, #400]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d908      	bls.n	80055e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055d0:	4b61      	ldr	r3, [pc, #388]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	495e      	ldr	r1, [pc, #376]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	4b59      	ldr	r3, [pc, #356]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d908      	bls.n	8005610 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055fe:	4b56      	ldr	r3, [pc, #344]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4953      	ldr	r1, [pc, #332]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 800560c:	4313      	orrs	r3, r2
 800560e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d010      	beq.n	800563e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	4b4d      	ldr	r3, [pc, #308]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	429a      	cmp	r2, r3
 800562a:	d908      	bls.n	800563e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562c:	4b4a      	ldr	r3, [pc, #296]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f023 020f 	bic.w	r2, r3, #15
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4947      	ldr	r1, [pc, #284]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 800563a:	4313      	orrs	r3, r2
 800563c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d055      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800564a:	4b43      	ldr	r3, [pc, #268]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	4940      	ldr	r1, [pc, #256]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005658:	4313      	orrs	r3, r2
 800565a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d107      	bne.n	8005674 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005664:	4b3c      	ldr	r3, [pc, #240]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d121      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0f6      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d107      	bne.n	800568c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800567c:	4b36      	ldr	r3, [pc, #216]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d115      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0ea      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005694:	4b30      	ldr	r3, [pc, #192]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0de      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0d6      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056b4:	4b28      	ldr	r3, [pc, #160]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f023 0207 	bic.w	r2, r3, #7
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4925      	ldr	r1, [pc, #148]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c6:	f7fb ffd1 	bl	800166c <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ce:	f7fb ffcd 	bl	800166c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e0be      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d1eb      	bne.n	80056ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d010      	beq.n	8005724 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	429a      	cmp	r2, r3
 8005710:	d208      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005712:	4b11      	ldr	r3, [pc, #68]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f023 020f 	bic.w	r2, r3, #15
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	490e      	ldr	r1, [pc, #56]	@ (8005758 <HAL_RCC_ClockConfig+0x244>)
 8005720:	4313      	orrs	r3, r2
 8005722:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005724:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d214      	bcs.n	800575c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b08      	ldr	r3, [pc, #32]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	4906      	ldr	r1, [pc, #24]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <HAL_RCC_ClockConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e086      	b.n	8005862 <HAL_RCC_ClockConfig+0x34e>
 8005754:	52002000 	.word	0x52002000
 8005758:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	4b3f      	ldr	r3, [pc, #252]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005774:	429a      	cmp	r2, r3
 8005776:	d208      	bcs.n	800578a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005778:	4b3c      	ldr	r3, [pc, #240]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	4939      	ldr	r1, [pc, #228]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 8005786:	4313      	orrs	r3, r2
 8005788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d010      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	4b34      	ldr	r3, [pc, #208]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d208      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057a6:	4b31      	ldr	r3, [pc, #196]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	492e      	ldr	r1, [pc, #184]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d010      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d208      	bcs.n	80057e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057d4:	4b25      	ldr	r3, [pc, #148]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	4922      	ldr	r1, [pc, #136]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057fe:	429a      	cmp	r2, r3
 8005800:	d208      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005802:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	4917      	ldr	r1, [pc, #92]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 8005810:	4313      	orrs	r3, r2
 8005812:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005814:	f000 f834 	bl	8005880 <HAL_RCC_GetSysClockFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b14      	ldr	r3, [pc, #80]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	4912      	ldr	r1, [pc, #72]	@ (8005870 <HAL_RCC_ClockConfig+0x35c>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
 8005830:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <HAL_RCC_ClockConfig+0x358>)
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	4a0d      	ldr	r2, [pc, #52]	@ (8005870 <HAL_RCC_ClockConfig+0x35c>)
 800583c:	5cd3      	ldrb	r3, [r2, r3]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
 8005848:	4a0a      	ldr	r2, [pc, #40]	@ (8005874 <HAL_RCC_ClockConfig+0x360>)
 800584a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800584c:	4a0a      	ldr	r2, [pc, #40]	@ (8005878 <HAL_RCC_ClockConfig+0x364>)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005852:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <HAL_RCC_ClockConfig+0x368>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fb febe 	bl	80015d8 <HAL_InitTick>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	58024400 	.word	0x58024400
 8005870:	0800b43c 	.word	0x0800b43c
 8005874:	24000008 	.word	0x24000008
 8005878:	24000004 	.word	0x24000004
 800587c:	2400000c 	.word	0x2400000c

08005880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005880:	b480      	push	{r7}
 8005882:	b089      	sub	sp, #36	@ 0x24
 8005884:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005886:	4bb3      	ldr	r3, [pc, #716]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588e:	2b18      	cmp	r3, #24
 8005890:	f200 8155 	bhi.w	8005b3e <HAL_RCC_GetSysClockFreq+0x2be>
 8005894:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	08005901 	.word	0x08005901
 80058a0:	08005b3f 	.word	0x08005b3f
 80058a4:	08005b3f 	.word	0x08005b3f
 80058a8:	08005b3f 	.word	0x08005b3f
 80058ac:	08005b3f 	.word	0x08005b3f
 80058b0:	08005b3f 	.word	0x08005b3f
 80058b4:	08005b3f 	.word	0x08005b3f
 80058b8:	08005b3f 	.word	0x08005b3f
 80058bc:	08005927 	.word	0x08005927
 80058c0:	08005b3f 	.word	0x08005b3f
 80058c4:	08005b3f 	.word	0x08005b3f
 80058c8:	08005b3f 	.word	0x08005b3f
 80058cc:	08005b3f 	.word	0x08005b3f
 80058d0:	08005b3f 	.word	0x08005b3f
 80058d4:	08005b3f 	.word	0x08005b3f
 80058d8:	08005b3f 	.word	0x08005b3f
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	08005b3f 	.word	0x08005b3f
 80058e4:	08005b3f 	.word	0x08005b3f
 80058e8:	08005b3f 	.word	0x08005b3f
 80058ec:	08005b3f 	.word	0x08005b3f
 80058f0:	08005b3f 	.word	0x08005b3f
 80058f4:	08005b3f 	.word	0x08005b3f
 80058f8:	08005b3f 	.word	0x08005b3f
 80058fc:	08005933 	.word	0x08005933
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005900:	4b94      	ldr	r3, [pc, #592]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800590c:	4b91      	ldr	r3, [pc, #580]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	4a90      	ldr	r2, [pc, #576]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
 800591c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800591e:	e111      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005920:	4b8d      	ldr	r3, [pc, #564]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005922:	61bb      	str	r3, [r7, #24]
      break;
 8005924:	e10e      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005926:	4b8d      	ldr	r3, [pc, #564]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005928:	61bb      	str	r3, [r7, #24]
      break;
 800592a:	e10b      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800592c:	4b8c      	ldr	r3, [pc, #560]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800592e:	61bb      	str	r3, [r7, #24]
      break;
 8005930:	e108      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005932:	4b88      	ldr	r3, [pc, #544]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800593c:	4b85      	ldr	r3, [pc, #532]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005946:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005948:	4b82      	ldr	r3, [pc, #520]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005952:	4b80      	ldr	r3, [pc, #512]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005956:	08db      	lsrs	r3, r3, #3
 8005958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80e1 	beq.w	8005b38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b02      	cmp	r3, #2
 800597a:	f000 8083 	beq.w	8005a84 <HAL_RCC_GetSysClockFreq+0x204>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b02      	cmp	r3, #2
 8005982:	f200 80a1 	bhi.w	8005ac8 <HAL_RCC_GetSysClockFreq+0x248>
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x114>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d056      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005992:	e099      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005994:	4b6f      	ldr	r3, [pc, #444]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d02d      	beq.n	80059fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	08db      	lsrs	r3, r3, #3
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	4a6b      	ldr	r2, [pc, #428]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
 80059b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ca:	4b62      	ldr	r3, [pc, #392]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059da:	ed97 6a02 	vldr	s12, [r7, #8]
 80059de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059fa:	e087      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0e:	4b51      	ldr	r3, [pc, #324]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a3e:	e065      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a52:	4b40      	ldr	r3, [pc, #256]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a82:	e043      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aaa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ac6:	e021      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b1e      	ldr	r3, [pc, #120]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b0c:	4b11      	ldr	r3, [pc, #68]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b10:	0a5b      	lsrs	r3, r3, #9
 8005b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b16:	3301      	adds	r3, #1
 8005b18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b30:	ee17 3a90 	vmov	r3, s15
 8005b34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b36:	e005      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
      break;
 8005b3c:	e002      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b3e:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b40:	61bb      	str	r3, [r7, #24]
      break;
 8005b42:	bf00      	nop
  }

  return sysclockfreq;
 8005b44:	69bb      	ldr	r3, [r7, #24]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3724      	adds	r7, #36	@ 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	58024400 	.word	0x58024400
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	003d0900 	.word	0x003d0900
 8005b60:	007a1200 	.word	0x007a1200
 8005b64:	46000000 	.word	0x46000000
 8005b68:	4c742400 	.word	0x4c742400
 8005b6c:	4a742400 	.word	0x4a742400
 8005b70:	4af42400 	.word	0x4af42400

08005b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b7a:	f7ff fe81 	bl	8005880 <HAL_RCC_GetSysClockFreq>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	490f      	ldr	r1, [pc, #60]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b8c:	5ccb      	ldrb	r3, [r1, r3]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	fa22 f303 	lsr.w	r3, r2, r3
 8005b96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b98:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	4a09      	ldr	r2, [pc, #36]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	4a07      	ldr	r2, [pc, #28]	@ (8005bcc <HAL_RCC_GetHCLKFreq+0x58>)
 8005bb0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bb2:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bb8:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <HAL_RCC_GetHCLKFreq+0x58>)
 8005bba:	681b      	ldr	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	58024400 	.word	0x58024400
 8005bc8:	0800b43c 	.word	0x0800b43c
 8005bcc:	24000008 	.word	0x24000008
 8005bd0:	24000004 	.word	0x24000004

08005bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bd8:	f7ff ffcc 	bl	8005b74 <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4904      	ldr	r1, [pc, #16]	@ (8005bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	0800b43c 	.word	0x0800b43c

08005c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c04:	f7ff ffb6 	bl	8005b74 <HAL_RCC_GetHCLKFreq>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	0a1b      	lsrs	r3, r3, #8
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	4904      	ldr	r1, [pc, #16]	@ (8005c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c16:	5ccb      	ldrb	r3, [r1, r3]
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	58024400 	.word	0x58024400
 8005c28:	0800b43c 	.word	0x0800b43c

08005c2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b0ca      	sub	sp, #296	@ 0x128
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c50:	2500      	movs	r5, #0
 8005c52:	ea54 0305 	orrs.w	r3, r4, r5
 8005c56:	d049      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c62:	d02f      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c68:	d828      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c6e:	d01a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c74:	d822      	bhi.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7e:	d007      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c80:	e01c      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c82:	4bb8      	ldr	r3, [pc, #736]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	4ab7      	ldr	r2, [pc, #732]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c8e:	e01a      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	3308      	adds	r3, #8
 8005c96:	2102      	movs	r1, #2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 fc8f 	bl	80075bc <RCCEx_PLL2_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ca4:	e00f      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005caa:	3328      	adds	r3, #40	@ 0x28
 8005cac:	2102      	movs	r1, #2
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fd36 	bl	8007720 <RCCEx_PLL3_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cba:	e004      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cce:	4ba5      	ldr	r3, [pc, #660]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cdc:	4aa1      	ldr	r2, [pc, #644]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005cf8:	f04f 0900 	mov.w	r9, #0
 8005cfc:	ea58 0309 	orrs.w	r3, r8, r9
 8005d00:	d047      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d82a      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d29 	.word	0x08005d29
 8005d18:	08005d37 	.word	0x08005d37
 8005d1c:	08005d4d 	.word	0x08005d4d
 8005d20:	08005d6b 	.word	0x08005d6b
 8005d24:	08005d6b 	.word	0x08005d6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d28:	4b8e      	ldr	r3, [pc, #568]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	4a8d      	ldr	r2, [pc, #564]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e01a      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fc3c 	bl	80075bc <RCCEx_PLL2_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d4a:	e00f      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	3328      	adds	r3, #40	@ 0x28
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fce3 	bl	8007720 <RCCEx_PLL3_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d60:	e004      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d74:	4b7b      	ldr	r3, [pc, #492]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d78:	f023 0107 	bic.w	r1, r3, #7
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d82:	4a78      	ldr	r2, [pc, #480]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d84:	430b      	orrs	r3, r1
 8005d86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d88:	e003      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005d9e:	f04f 0b00 	mov.w	fp, #0
 8005da2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005da6:	d04c      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db2:	d030      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db8:	d829      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dbc:	d02d      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dc0:	d825      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dc2:	2b80      	cmp	r3, #128	@ 0x80
 8005dc4:	d018      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005dc6:	2b80      	cmp	r3, #128	@ 0x80
 8005dc8:	d821      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005dce:	2b40      	cmp	r3, #64	@ 0x40
 8005dd0:	d007      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005dd2:	e01c      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4b63      	ldr	r3, [pc, #396]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	4a62      	ldr	r2, [pc, #392]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005de0:	e01c      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	3308      	adds	r3, #8
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 fbe6 	bl	80075bc <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005df6:	e011      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	3328      	adds	r3, #40	@ 0x28
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fc8d 	bl	8007720 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e24:	4b4f      	ldr	r3, [pc, #316]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e32:	4a4c      	ldr	r2, [pc, #304]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e38:	e003      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005e4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d053      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e6e:	d035      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e74:	d82e      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e7a:	d031      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e80:	d828      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e86:	d01a      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005e88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e8c:	d822      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e96:	d007      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005e98:	e01c      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9a:	4b32      	ldr	r3, [pc, #200]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	4a31      	ldr	r2, [pc, #196]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea6:	e01c      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	3308      	adds	r3, #8
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 fb83 	bl	80075bc <RCCEx_PLL2_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e011      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	3328      	adds	r3, #40	@ 0x28
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 fc2a 	bl	8007720 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed2:	e006      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eda:	e002      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005edc:	bf00      	nop
 8005ede:	e000      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005eea:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005efa:	4a1a      	ldr	r2, [pc, #104]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d056      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f36:	d038      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f3c:	d831      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f42:	d034      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f48:	d82b      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f4e:	d01d      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f54:	d825      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d006      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f60:	e01f      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f62:	bf00      	nop
 8005f64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4ba2      	ldr	r3, [pc, #648]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	4aa1      	ldr	r2, [pc, #644]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f74:	e01c      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fb1c 	bl	80075bc <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f8a:	e011      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f90:	3328      	adds	r3, #40	@ 0x28
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 fbc3 	bl	8007720 <RCCEx_PLL3_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fa0:	e006      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fc8:	4a8a      	ldr	r2, [pc, #552]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fce:	e003      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d03a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffe:	2b30      	cmp	r3, #48	@ 0x30
 8006000:	d01f      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006002:	2b30      	cmp	r3, #48	@ 0x30
 8006004:	d819      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d00c      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800600a:	2b20      	cmp	r3, #32
 800600c:	d815      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d019      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006012:	2b10      	cmp	r3, #16
 8006014:	d111      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006016:	4b77      	ldr	r3, [pc, #476]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	4a76      	ldr	r2, [pc, #472]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800601c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006022:	e011      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006028:	3308      	adds	r3, #8
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fac5 	bl	80075bc <RCCEx_PLL2_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006038:	e006      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006040:	e002      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006042:	bf00      	nop
 8006044:	e000      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006050:	4b68      	ldr	r3, [pc, #416]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006054:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800605e:	4a65      	ldr	r2, [pc, #404]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006060:	430b      	orrs	r3, r1
 8006062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006064:	e003      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800607a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006084:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d051      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006098:	d035      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800609a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609e:	d82e      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060a4:	d031      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060aa:	d828      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b0:	d01a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80060b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060b6:	d822      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80060bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c0:	d007      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80060c2:	e01c      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4b4b      	ldr	r3, [pc, #300]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	4a4a      	ldr	r2, [pc, #296]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060d0:	e01c      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	3308      	adds	r3, #8
 80060d8:	2100      	movs	r1, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 fa6e 	bl	80075bc <RCCEx_PLL2_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060e6:	e011      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	3328      	adds	r3, #40	@ 0x28
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fb15 	bl	8007720 <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060fc:	e006      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006104:	e002      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800610a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006114:	4b37      	ldr	r3, [pc, #220]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006122:	4a34      	ldr	r2, [pc, #208]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006124:	430b      	orrs	r3, r1
 8006126:	6513      	str	r3, [r2, #80]	@ 0x50
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800613e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006148:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800614c:	460b      	mov	r3, r1
 800614e:	4313      	orrs	r3, r2
 8006150:	d056      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800615c:	d033      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800615e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006162:	d82c      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006168:	d02f      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800616a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800616e:	d826      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006170:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006174:	d02b      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800617a:	d820      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800617c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006180:	d012      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006186:	d81a      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d022      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006190:	d115      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006196:	3308      	adds	r3, #8
 8006198:	2101      	movs	r1, #1
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fa0e 	bl	80075bc <RCCEx_PLL2_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061a6:	e015      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	3328      	adds	r3, #40	@ 0x28
 80061ae:	2101      	movs	r1, #1
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 fab5 	bl	8007720 <RCCEx_PLL3_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061bc:	e00a      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c4:	e006      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061c6:	bf00      	nop
 80061c8:	e004      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ca:	bf00      	nop
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ea:	4a02      	ldr	r2, [pc, #8]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061f2:	bf00      	nop
 80061f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006216:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d055      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800622c:	d033      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800622e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006232:	d82c      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006238:	d02f      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623e:	d826      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006240:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006244:	d02b      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006246:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800624a:	d820      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800624c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006250:	d012      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006256:	d81a      	bhi.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d022      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800625c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006260:	d115      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	3308      	adds	r3, #8
 8006268:	2101      	movs	r1, #1
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f9a6 	bl	80075bc <RCCEx_PLL2_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006276:	e015      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627c:	3328      	adds	r3, #40	@ 0x28
 800627e:	2101      	movs	r1, #1
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fa4d 	bl	8007720 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800628c:	e00a      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006294:	e006      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006296:	bf00      	nop
 8006298:	e004      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062ac:	4ba3      	ldr	r3, [pc, #652]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062bc:	4a9f      	ldr	r2, [pc, #636]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c2:	e003      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80062d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062dc:	2300      	movs	r3, #0
 80062de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d037      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f6:	d00e      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fc:	d816      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d018      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006306:	d111      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006308:	4b8c      	ldr	r3, [pc, #560]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	4a8b      	ldr	r2, [pc, #556]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006314:	e00f      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	3308      	adds	r3, #8
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f94c 	bl	80075bc <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800632a:	e004      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006332:	e000      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800633e:	4b7f      	ldr	r3, [pc, #508]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006342:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634c:	4a7b      	ldr	r2, [pc, #492]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800634e:	430b      	orrs	r3, r1
 8006350:	6513      	str	r3, [r2, #80]	@ 0x50
 8006352:	e003      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006372:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006376:	460b      	mov	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	d039      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006382:	2b03      	cmp	r3, #3
 8006384:	d81c      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006386:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	080063c9 	.word	0x080063c9
 8006390:	0800639d 	.word	0x0800639d
 8006394:	080063ab 	.word	0x080063ab
 8006398:	080063c9 	.word	0x080063c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4b67      	ldr	r3, [pc, #412]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	4a66      	ldr	r2, [pc, #408]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063a8:	e00f      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ae:	3308      	adds	r3, #8
 80063b0:	2102      	movs	r1, #2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 f902 	bl	80075bc <RCCEx_PLL2_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063be:	e004      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063c6:	e000      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80063c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063d2:	4b5a      	ldr	r3, [pc, #360]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d6:	f023 0103 	bic.w	r1, r3, #3
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e0:	4a56      	ldr	r2, [pc, #344]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e2:	430b      	orrs	r3, r1
 80063e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063e6:	e003      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006406:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800640a:	460b      	mov	r3, r1
 800640c:	4313      	orrs	r3, r2
 800640e:	f000 809f 	beq.w	8006550 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006412:	4b4b      	ldr	r3, [pc, #300]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4a      	ldr	r2, [pc, #296]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800641e:	f7fb f925 	bl	800166c <HAL_GetTick>
 8006422:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006426:	e00b      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006428:	f7fb f920 	bl	800166c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b64      	cmp	r3, #100	@ 0x64
 8006436:	d903      	bls.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800643e:	e005      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006440:	4b3f      	ldr	r3, [pc, #252]	@ (8006540 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0ed      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800644c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006450:	2b00      	cmp	r3, #0
 8006452:	d179      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006454:	4b39      	ldr	r3, [pc, #228]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006456:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006460:	4053      	eors	r3, r2
 8006462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d015      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800646a:	4b34      	ldr	r3, [pc, #208]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006472:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006476:	4b31      	ldr	r3, [pc, #196]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	4a30      	ldr	r2, [pc, #192]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006480:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006482:	4b2e      	ldr	r3, [pc, #184]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006486:	4a2d      	ldr	r2, [pc, #180]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800648e:	4a2b      	ldr	r2, [pc, #172]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006494:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800649e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a2:	d118      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a4:	f7fb f8e2 	bl	800166c <HAL_GetTick>
 80064a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ac:	e00d      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ae:	f7fb f8dd 	bl	800166c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064b8:	1ad2      	subs	r2, r2, r3
 80064ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064be:	429a      	cmp	r2, r3
 80064c0:	d903      	bls.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80064c8:	e005      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ca:	4b1c      	ldr	r3, [pc, #112]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0eb      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80064d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d129      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ee:	d10e      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80064f0:	4b12      	ldr	r3, [pc, #72]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006500:	091a      	lsrs	r2, r3, #4
 8006502:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006504:	4013      	ands	r3, r2
 8006506:	4a0d      	ldr	r2, [pc, #52]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6113      	str	r3, [r2, #16]
 800650c:	e005      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800650e:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	4a0a      	ldr	r2, [pc, #40]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006514:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006518:	6113      	str	r3, [r2, #16]
 800651a:	4b08      	ldr	r3, [pc, #32]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800651c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652a:	4a04      	ldr	r2, [pc, #16]	@ (800653c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800652c:	430b      	orrs	r3, r1
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006530:	e00e      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800653a:	e009      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800653c:	58024400 	.word	0x58024400
 8006540:	58024800 	.word	0x58024800
 8006544:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f002 0301 	and.w	r3, r2, #1
 800655c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006566:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	f000 8089 	beq.w	8006684 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006578:	2b28      	cmp	r3, #40	@ 0x28
 800657a:	d86b      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800657c:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	0800665d 	.word	0x0800665d
 8006588:	08006655 	.word	0x08006655
 800658c:	08006655 	.word	0x08006655
 8006590:	08006655 	.word	0x08006655
 8006594:	08006655 	.word	0x08006655
 8006598:	08006655 	.word	0x08006655
 800659c:	08006655 	.word	0x08006655
 80065a0:	08006655 	.word	0x08006655
 80065a4:	08006629 	.word	0x08006629
 80065a8:	08006655 	.word	0x08006655
 80065ac:	08006655 	.word	0x08006655
 80065b0:	08006655 	.word	0x08006655
 80065b4:	08006655 	.word	0x08006655
 80065b8:	08006655 	.word	0x08006655
 80065bc:	08006655 	.word	0x08006655
 80065c0:	08006655 	.word	0x08006655
 80065c4:	0800663f 	.word	0x0800663f
 80065c8:	08006655 	.word	0x08006655
 80065cc:	08006655 	.word	0x08006655
 80065d0:	08006655 	.word	0x08006655
 80065d4:	08006655 	.word	0x08006655
 80065d8:	08006655 	.word	0x08006655
 80065dc:	08006655 	.word	0x08006655
 80065e0:	08006655 	.word	0x08006655
 80065e4:	0800665d 	.word	0x0800665d
 80065e8:	08006655 	.word	0x08006655
 80065ec:	08006655 	.word	0x08006655
 80065f0:	08006655 	.word	0x08006655
 80065f4:	08006655 	.word	0x08006655
 80065f8:	08006655 	.word	0x08006655
 80065fc:	08006655 	.word	0x08006655
 8006600:	08006655 	.word	0x08006655
 8006604:	0800665d 	.word	0x0800665d
 8006608:	08006655 	.word	0x08006655
 800660c:	08006655 	.word	0x08006655
 8006610:	08006655 	.word	0x08006655
 8006614:	08006655 	.word	0x08006655
 8006618:	08006655 	.word	0x08006655
 800661c:	08006655 	.word	0x08006655
 8006620:	08006655 	.word	0x08006655
 8006624:	0800665d 	.word	0x0800665d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	3308      	adds	r3, #8
 800662e:	2101      	movs	r1, #1
 8006630:	4618      	mov	r0, r3
 8006632:	f000 ffc3 	bl	80075bc <RCCEx_PLL2_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800663c:	e00f      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	3328      	adds	r3, #40	@ 0x28
 8006644:	2101      	movs	r1, #1
 8006646:	4618      	mov	r0, r3
 8006648:	f001 f86a 	bl	8007720 <RCCEx_PLL3_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006652:	e004      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800665a:	e000      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800665c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006666:	4bbf      	ldr	r3, [pc, #764]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006674:	4abb      	ldr	r2, [pc, #748]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6553      	str	r3, [r2, #84]	@ 0x54
 800667a:	e003      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f002 0302 	and.w	r3, r2, #2
 8006690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800669a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800669e:	460b      	mov	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d041      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d824      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80066ae:	a201      	add	r2, pc, #4	@ (adr r2, 80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	08006701 	.word	0x08006701
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066e3 	.word	0x080066e3
 80066c0:	08006701 	.word	0x08006701
 80066c4:	08006701 	.word	0x08006701
 80066c8:	08006701 	.word	0x08006701
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d0:	3308      	adds	r3, #8
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 ff71 	bl	80075bc <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066e0:	e00f      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	3328      	adds	r3, #40	@ 0x28
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f818 	bl	8007720 <RCCEx_PLL3_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800670a:	4b96      	ldr	r3, [pc, #600]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800670c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670e:	f023 0107 	bic.w	r1, r3, #7
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006718:	4a92      	ldr	r2, [pc, #584]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800671a:	430b      	orrs	r3, r1
 800671c:	6553      	str	r3, [r2, #84]	@ 0x54
 800671e:	e003      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f002 0304 	and.w	r3, r2, #4
 8006734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800673e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d044      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006750:	2b05      	cmp	r3, #5
 8006752:	d825      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	080067a9 	.word	0x080067a9
 8006760:	08006775 	.word	0x08006775
 8006764:	0800678b 	.word	0x0800678b
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006778:	3308      	adds	r3, #8
 800677a:	2101      	movs	r1, #1
 800677c:	4618      	mov	r0, r3
 800677e:	f000 ff1d 	bl	80075bc <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006788:	e00f      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	3328      	adds	r3, #40	@ 0x28
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f000 ffc4 	bl	8007720 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b6:	f023 0107 	bic.w	r1, r3, #7
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c2:	4a68      	ldr	r2, [pc, #416]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f002 0320 	and.w	r3, r2, #32
 80067de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067e2:	2300      	movs	r3, #0
 80067e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d055      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067fe:	d033      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006804:	d82c      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680a:	d02f      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006810:	d826      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006816:	d02b      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800681c:	d820      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800681e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006822:	d012      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006828:	d81a      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d022      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800682e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006832:	d115      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006838:	3308      	adds	r3, #8
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f000 febd 	bl	80075bc <RCCEx_PLL2_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006848:	e015      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684e:	3328      	adds	r3, #40	@ 0x28
 8006850:	2102      	movs	r1, #2
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ff64 	bl	8007720 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800685e:	e00a      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006866:	e006      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006868:	bf00      	nop
 800686a:	e004      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800686c:	bf00      	nop
 800686e:	e002      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006870:	bf00      	nop
 8006872:	e000      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800687e:	4b39      	ldr	r3, [pc, #228]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006882:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688e:	4a35      	ldr	r2, [pc, #212]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006890:	430b      	orrs	r3, r1
 8006892:	6553      	str	r3, [r2, #84]	@ 0x54
 8006894:	e003      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80068aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068ae:	2300      	movs	r3, #0
 80068b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4313      	orrs	r3, r2
 80068bc:	d058      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068ca:	d033      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80068cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068d0:	d82c      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d6:	d02f      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80068d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068dc:	d826      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068e2:	d02b      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80068e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068e8:	d820      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ee:	d012      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f4:	d81a      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d022      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fe:	d115      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	3308      	adds	r3, #8
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fe57 	bl	80075bc <RCCEx_PLL2_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006914:	e015      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691a:	3328      	adds	r3, #40	@ 0x28
 800691c:	2102      	movs	r1, #2
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fefe 	bl	8007720 <RCCEx_PLL3_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800692a:	e00a      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006932:	e006      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006934:	bf00      	nop
 8006936:	e004      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10e      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800694c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800694e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800695a:	4a02      	ldr	r2, [pc, #8]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800695c:	430b      	orrs	r3, r1
 800695e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006960:	e006      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800697c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006980:	2300      	movs	r3, #0
 8006982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006986:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d055      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006998:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800699c:	d033      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800699e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069a2:	d82c      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069a8:	d02f      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80069aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ae:	d826      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069b4:	d02b      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80069b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069ba:	d820      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c0:	d012      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80069c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c6:	d81a      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d022      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d0:	d115      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	3308      	adds	r3, #8
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fdee 	bl	80075bc <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069e6:	e015      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ec:	3328      	adds	r3, #40	@ 0x28
 80069ee:	2102      	movs	r1, #2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fe95 	bl	8007720 <RCCEx_PLL3_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069fc:	e00a      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a06:	bf00      	nop
 8006a08:	e004      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a0a:	bf00      	nop
 8006a0c:	e002      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a2c:	4a9d      	ldr	r2, [pc, #628]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 0308 	and.w	r3, r2, #8
 8006a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d01e      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6e:	3328      	adds	r3, #40	@ 0x28
 8006a70:	2102      	movs	r1, #2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fe54 	bl	8007720 <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a84:	4b87      	ldr	r3, [pc, #540]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a94:	4a83      	ldr	r2, [pc, #524]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a96:	430b      	orrs	r3, r1
 8006a98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f002 0310 	and.w	r3, r2, #16
 8006aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ab0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d01e      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac6:	d10c      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	3328      	adds	r3, #40	@ 0x28
 8006ace:	2102      	movs	r1, #2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fe25 	bl	8007720 <RCCEx_PLL3_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ae2:	4b70      	ldr	r3, [pc, #448]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006af2:	4a6c      	ldr	r2, [pc, #432]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b12:	460b      	mov	r3, r1
 8006b14:	4313      	orrs	r3, r2
 8006b16:	d03e      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b24:	d022      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b2a:	d81b      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b34:	d00b      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b36:	e015      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	2100      	movs	r1, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fd3b 	bl	80075bc <RCCEx_PLL2_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b4c:	e00f      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	3328      	adds	r3, #40	@ 0x28
 8006b54:	2102      	movs	r1, #2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fde2 	bl	8007720 <RCCEx_PLL3_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b76:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b86:	4a47      	ldr	r2, [pc, #284]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b8c:	e003      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ba8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006bac:	460b      	mov	r3, r1
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	d03b      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bbe:	d01f      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bc4:	d818      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bca:	d003      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bd0:	d007      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006bd2:	e011      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd4:	4b33      	ldr	r3, [pc, #204]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	4a32      	ldr	r2, [pc, #200]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006be0:	e00f      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be6:	3328      	adds	r3, #40	@ 0x28
 8006be8:	2101      	movs	r1, #1
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fd98 	bl	8007720 <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bf6:	e004      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bfe:	e000      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c0a:	4b26      	ldr	r3, [pc, #152]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1a:	4a22      	ldr	r2, [pc, #136]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c36:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c38:	2300      	movs	r3, #0
 8006c3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c40:	460b      	mov	r3, r1
 8006c42:	4313      	orrs	r3, r2
 8006c44:	d034      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c54:	d007      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c56:	e011      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c64:	e00e      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fca4 	bl	80075bc <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c7a:	e003      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10d      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9a:	4a02      	ldr	r2, [pc, #8]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ca0:	e006      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006ca2:	bf00      	nop
 8006ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	d00c      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	3328      	adds	r3, #40	@ 0x28
 8006cd2:	2102      	movs	r1, #2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fd23 	bl	8007720 <RCCEx_PLL3_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	d038      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d0e:	d018      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d14:	d811      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d1a:	d014      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d20:	d80b      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d011      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2c:	4bc3      	ldr	r3, [pc, #780]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	4ac2      	ldr	r2, [pc, #776]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d38:	e008      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d40:	e004      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d42:	bf00      	nop
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10b      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d54:	4bb9      	ldr	r3, [pc, #740]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d64:	4ab5      	ldr	r2, [pc, #724]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d82:	2300      	movs	r3, #0
 8006d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d90:	4baa      	ldr	r3, [pc, #680]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d9e:	4aa7      	ldr	r2, [pc, #668]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006da0:	430b      	orrs	r3, r1
 8006da2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006db0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006db2:	2300      	movs	r3, #0
 8006db4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006db6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d00a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006dc0:	4b9e      	ldr	r3, [pc, #632]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006dd0:	4a9a      	ldr	r2, [pc, #616]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006de4:	2300      	movs	r3, #0
 8006de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006de8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006dec:	460b      	mov	r3, r1
 8006dee:	4313      	orrs	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006df2:	4b92      	ldr	r3, [pc, #584]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e00:	4a8e      	ldr	r2, [pc, #568]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e02:	430b      	orrs	r3, r1
 8006e04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e14:	2300      	movs	r3, #0
 8006e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	d00e      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e22:	4b86      	ldr	r3, [pc, #536]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	4a85      	ldr	r2, [pc, #532]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e2c:	6113      	str	r3, [r2, #16]
 8006e2e:	4b83      	ldr	r3, [pc, #524]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e30:	6919      	ldr	r1, [r3, #16]
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e3a:	4a80      	ldr	r2, [pc, #512]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d009      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e5c:	4b77      	ldr	r3, [pc, #476]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6a:	4a74      	ldr	r2, [pc, #464]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e9c:	4a67      	ldr	r2, [pc, #412]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d011      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fb78 	bl	80075bc <RCCEx_PLL2_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	2100      	movs	r1, #0
 8006eec:	6239      	str	r1, [r7, #32]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	d011      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f02:	3308      	adds	r3, #8
 8006f04:	2101      	movs	r1, #1
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fb58 	bl	80075bc <RCCEx_PLL2_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	61b9      	str	r1, [r7, #24]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d011      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f42:	3308      	adds	r3, #8
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fb38 	bl	80075bc <RCCEx_PLL2_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	6139      	str	r1, [r7, #16]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	d011      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f82:	3328      	adds	r3, #40	@ 0x28
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fbca 	bl	8007720 <RCCEx_PLL3_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	2100      	movs	r1, #0
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	d011      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	3328      	adds	r3, #40	@ 0x28
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fbaa 	bl	8007720 <RCCEx_PLL3_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	2100      	movs	r1, #0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	d011      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	3328      	adds	r3, #40	@ 0x28
 8007004:	2102      	movs	r1, #2
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fb8a 	bl	8007720 <RCCEx_PLL3_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007022:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	e000      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
}
 8007030:	4618      	mov	r0, r3
 8007032:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007036:	46bd      	mov	sp, r7
 8007038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703c:	58024400 	.word	0x58024400

08007040 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007044:	f7fe fd96 	bl	8005b74 <HAL_RCC_GetHCLKFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	091b      	lsrs	r3, r3, #4
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	4904      	ldr	r1, [pc, #16]	@ (8007068 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007056:	5ccb      	ldrb	r3, [r1, r3]
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	58024400 	.word	0x58024400
 8007068:	0800b43c 	.word	0x0800b43c

0800706c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007074:	4ba1      	ldr	r3, [pc, #644]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f003 0303 	and.w	r3, r3, #3
 800707c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800707e:	4b9f      	ldr	r3, [pc, #636]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007082:	0b1b      	lsrs	r3, r3, #12
 8007084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007088:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800708a:	4b9c      	ldr	r3, [pc, #624]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	091b      	lsrs	r3, r3, #4
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007096:	4b99      	ldr	r3, [pc, #612]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709a:	08db      	lsrs	r3, r3, #3
 800709c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8111 	beq.w	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	f000 8083 	beq.w	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f200 80a1 	bhi.w	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d056      	beq.n	8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070d6:	e099      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d8:	4b88      	ldr	r3, [pc, #544]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d02d      	beq.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070e4:	4b85      	ldr	r3, [pc, #532]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	08db      	lsrs	r3, r3, #3
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	4a84      	ldr	r2, [pc, #528]	@ (8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
 80070f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b7b      	ldr	r3, [pc, #492]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800713e:	e087      	b.n	8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b6a      	ldr	r3, [pc, #424]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a03 	vldr	s12, [r7, #12]
 8007166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007182:	e065      	b.n	8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b59      	ldr	r3, [pc, #356]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c6:	e043      	b.n	8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b48      	ldr	r3, [pc, #288]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720a:	e021      	b.n	8007250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800721a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721e:	4b37      	ldr	r3, [pc, #220]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800724e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007250:	4b2a      	ldr	r3, [pc, #168]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007254:	0a5b      	lsrs	r3, r3, #9
 8007256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800726a:	edd7 6a07 	vldr	s13, [r7, #28]
 800726e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007276:	ee17 2a90 	vmov	r2, s15
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800727e:	4b1f      	ldr	r3, [pc, #124]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007294:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007298:	edd7 6a07 	vldr	s13, [r7, #28]
 800729c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a4:	ee17 2a90 	vmov	r2, s15
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072ac:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b0:	0e1b      	lsrs	r3, r3, #24
 80072b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d2:	ee17 2a90 	vmov	r2, s15
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072da:	e008      	b.n	80072ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
}
 80072ee:	bf00      	nop
 80072f0:	3724      	adds	r7, #36	@ 0x24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	58024400 	.word	0x58024400
 8007300:	03d09000 	.word	0x03d09000
 8007304:	46000000 	.word	0x46000000
 8007308:	4c742400 	.word	0x4c742400
 800730c:	4a742400 	.word	0x4a742400
 8007310:	4af42400 	.word	0x4af42400

08007314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007314:	b480      	push	{r7}
 8007316:	b089      	sub	sp, #36	@ 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800731c:	4ba1      	ldr	r3, [pc, #644]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007326:	4b9f      	ldr	r3, [pc, #636]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732a:	0d1b      	lsrs	r3, r3, #20
 800732c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007330:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007332:	4b9c      	ldr	r3, [pc, #624]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800733e:	4b99      	ldr	r3, [pc, #612]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007342:	08db      	lsrs	r3, r3, #3
 8007344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8111 	beq.w	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b02      	cmp	r3, #2
 8007366:	f000 8083 	beq.w	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b02      	cmp	r3, #2
 800736e:	f200 80a1 	bhi.w	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d056      	beq.n	800742c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800737e:	e099      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007380:	4b88      	ldr	r3, [pc, #544]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d02d      	beq.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800738c:	4b85      	ldr	r3, [pc, #532]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	4a84      	ldr	r2, [pc, #528]	@ (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	ee07 3a90 	vmov	s15, r3
 80073a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b7b      	ldr	r3, [pc, #492]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073e6:	e087      	b.n	80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b6a      	ldr	r3, [pc, #424]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a03 	vldr	s12, [r7, #12]
 800740e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742a:	e065      	b.n	80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800743a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743e:	4b59      	ldr	r3, [pc, #356]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007452:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800746e:	e043      	b.n	80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b48      	ldr	r3, [pc, #288]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a03 	vldr	s12, [r7, #12]
 8007496:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b2:	e021      	b.n	80074f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c6:	4b37      	ldr	r3, [pc, #220]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80074f8:	4b2a      	ldr	r3, [pc, #168]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fc:	0a5b      	lsrs	r3, r3, #9
 80074fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800750e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007512:	edd7 6a07 	vldr	s13, [r7, #28]
 8007516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751e:	ee17 2a90 	vmov	r2, s15
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007526:	4b1f      	ldr	r3, [pc, #124]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007530:	ee07 3a90 	vmov	s15, r3
 8007534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800753c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007540:	edd7 6a07 	vldr	s13, [r7, #28]
 8007544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800754c:	ee17 2a90 	vmov	r2, s15
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007554:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007558:	0e1b      	lsrs	r3, r3, #24
 800755a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800756a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757a:	ee17 2a90 	vmov	r2, s15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007582:	e008      	b.n	8007596 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	609a      	str	r2, [r3, #8]
}
 8007596:	bf00      	nop
 8007598:	3724      	adds	r7, #36	@ 0x24
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	58024400 	.word	0x58024400
 80075a8:	03d09000 	.word	0x03d09000
 80075ac:	46000000 	.word	0x46000000
 80075b0:	4c742400 	.word	0x4c742400
 80075b4:	4a742400 	.word	0x4a742400
 80075b8:	4af42400 	.word	0x4af42400

080075bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ca:	4b53      	ldr	r3, [pc, #332]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d101      	bne.n	80075da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e099      	b.n	800770e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075da:	4b4f      	ldr	r3, [pc, #316]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a4e      	ldr	r2, [pc, #312]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80075e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e6:	f7fa f841 	bl	800166c <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075ec:	e008      	b.n	8007600 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075ee:	f7fa f83d 	bl	800166c <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e086      	b.n	800770e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007600:	4b45      	ldr	r3, [pc, #276]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f0      	bne.n	80075ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800760c:	4b42      	ldr	r3, [pc, #264]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007610:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	031b      	lsls	r3, r3, #12
 800761a:	493f      	ldr	r1, [pc, #252]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 800761c:	4313      	orrs	r3, r2
 800761e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	3b01      	subs	r3, #1
 8007626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	3b01      	subs	r3, #1
 8007630:	025b      	lsls	r3, r3, #9
 8007632:	b29b      	uxth	r3, r3
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	3b01      	subs	r3, #1
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	061b      	lsls	r3, r3, #24
 800764c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007650:	4931      	ldr	r1, [pc, #196]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007652:	4313      	orrs	r3, r2
 8007654:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007656:	4b30      	ldr	r3, [pc, #192]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	492d      	ldr	r1, [pc, #180]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007664:	4313      	orrs	r3, r2
 8007666:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007668:	4b2b      	ldr	r3, [pc, #172]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	f023 0220 	bic.w	r2, r3, #32
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	4928      	ldr	r1, [pc, #160]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800767a:	4b27      	ldr	r3, [pc, #156]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	4a26      	ldr	r2, [pc, #152]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007680:	f023 0310 	bic.w	r3, r3, #16
 8007684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007686:	4b24      	ldr	r3, [pc, #144]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800768a:	4b24      	ldr	r3, [pc, #144]	@ (800771c <RCCEx_PLL2_Config+0x160>)
 800768c:	4013      	ands	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	69d2      	ldr	r2, [r2, #28]
 8007692:	00d2      	lsls	r2, r2, #3
 8007694:	4920      	ldr	r1, [pc, #128]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007696:	4313      	orrs	r3, r2
 8007698:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800769a:	4b1f      	ldr	r3, [pc, #124]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 800769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769e:	4a1e      	ldr	r2, [pc, #120]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076a0:	f043 0310 	orr.w	r3, r3, #16
 80076a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d106      	bne.n	80076ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	4a19      	ldr	r2, [pc, #100]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076b8:	e00f      	b.n	80076da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d106      	bne.n	80076ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076c0:	4b15      	ldr	r3, [pc, #84]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	4a14      	ldr	r2, [pc, #80]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80076cc:	e005      	b.n	80076da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076ce:	4b12      	ldr	r3, [pc, #72]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	4a11      	ldr	r2, [pc, #68]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076da:	4b0f      	ldr	r3, [pc, #60]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a0e      	ldr	r2, [pc, #56]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 80076e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e6:	f7f9 ffc1 	bl	800166c <HAL_GetTick>
 80076ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076ec:	e008      	b.n	8007700 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076ee:	f7f9 ffbd 	bl	800166c <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e006      	b.n	800770e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007700:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <RCCEx_PLL2_Config+0x15c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f0      	beq.n	80076ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	58024400 	.word	0x58024400
 800771c:	ffff0007 	.word	0xffff0007

08007720 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800772e:	4b53      	ldr	r3, [pc, #332]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d101      	bne.n	800773e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e099      	b.n	8007872 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800773e:	4b4f      	ldr	r3, [pc, #316]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a4e      	ldr	r2, [pc, #312]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774a:	f7f9 ff8f 	bl	800166c <HAL_GetTick>
 800774e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007750:	e008      	b.n	8007764 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007752:	f7f9 ff8b 	bl	800166c <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e086      	b.n	8007872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007764:	4b45      	ldr	r3, [pc, #276]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f0      	bne.n	8007752 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007770:	4b42      	ldr	r3, [pc, #264]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	051b      	lsls	r3, r3, #20
 800777e:	493f      	ldr	r1, [pc, #252]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007780:	4313      	orrs	r3, r2
 8007782:	628b      	str	r3, [r1, #40]	@ 0x28
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	3b01      	subs	r3, #1
 800778a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	3b01      	subs	r3, #1
 8007794:	025b      	lsls	r3, r3, #9
 8007796:	b29b      	uxth	r3, r3
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	3b01      	subs	r3, #1
 80077a0:	041b      	lsls	r3, r3, #16
 80077a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	061b      	lsls	r3, r3, #24
 80077b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077b4:	4931      	ldr	r1, [pc, #196]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077ba:	4b30      	ldr	r3, [pc, #192]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	492d      	ldr	r1, [pc, #180]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077cc:	4b2b      	ldr	r3, [pc, #172]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	4928      	ldr	r1, [pc, #160]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077de:	4b27      	ldr	r3, [pc, #156]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e2:	4a26      	ldr	r2, [pc, #152]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077ea:	4b24      	ldr	r3, [pc, #144]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077ee:	4b24      	ldr	r3, [pc, #144]	@ (8007880 <RCCEx_PLL3_Config+0x160>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	69d2      	ldr	r2, [r2, #28]
 80077f6:	00d2      	lsls	r2, r2, #3
 80077f8:	4920      	ldr	r1, [pc, #128]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077fe:	4b1f      	ldr	r3, [pc, #124]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007810:	4b1a      	ldr	r3, [pc, #104]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	4a19      	ldr	r2, [pc, #100]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007816:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800781a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800781c:	e00f      	b.n	800783e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d106      	bne.n	8007832 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007824:	4b15      	ldr	r3, [pc, #84]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007828:	4a14      	ldr	r2, [pc, #80]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 800782a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800782e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007830:	e005      	b.n	800783e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007832:	4b12      	ldr	r3, [pc, #72]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	4a11      	ldr	r2, [pc, #68]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007838:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800783c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800783e:	4b0f      	ldr	r3, [pc, #60]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a0e      	ldr	r2, [pc, #56]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784a:	f7f9 ff0f 	bl	800166c <HAL_GetTick>
 800784e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007850:	e008      	b.n	8007864 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007852:	f7f9 ff0b 	bl	800166c <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e006      	b.n	8007872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007864:	4b05      	ldr	r3, [pc, #20]	@ (800787c <RCCEx_PLL3_Config+0x15c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	58024400 	.word	0x58024400
 8007880:	ffff0007 	.word	0xffff0007

08007884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e042      	b.n	800791c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7f9 fc35 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2224      	movs	r2, #36	@ 0x24
 80078b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 fa4a 	bl	8008d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fcdf 	bl	8008298 <UART_SetConfig>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e01b      	b.n	800791c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0201 	orr.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fac9 	bl	8008eac <UART_CheckIdleState>
 800791a:	4603      	mov	r3, r0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007924:	b480      	push	{r7}
 8007926:	b091      	sub	sp, #68	@ 0x44
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007938:	2b20      	cmp	r3, #32
 800793a:	d178      	bne.n	8007a2e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_UART_Transmit_IT+0x24>
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e071      	b.n	8007a30 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	88fa      	ldrh	r2, [r7, #6]
 800795e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2221      	movs	r2, #33	@ 0x21
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800797c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007980:	d12a      	bne.n	80079d8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800798a:	d107      	bne.n	800799c <HAL_UART_Transmit_IT+0x78>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4a29      	ldr	r2, [pc, #164]	@ (8007a3c <HAL_UART_Transmit_IT+0x118>)
 8007998:	679a      	str	r2, [r3, #120]	@ 0x78
 800799a:	e002      	b.n	80079a2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a28      	ldr	r2, [pc, #160]	@ (8007a40 <HAL_UART_Transmit_IT+0x11c>)
 80079a0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80079b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80079c4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <HAL_UART_Transmit_IT+0x7e>
 80079d6:	e028      	b.n	8007a2a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e0:	d107      	bne.n	80079f2 <HAL_UART_Transmit_IT+0xce>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a15      	ldr	r2, [pc, #84]	@ (8007a44 <HAL_UART_Transmit_IT+0x120>)
 80079ee:	679a      	str	r2, [r3, #120]	@ 0x78
 80079f0:	e002      	b.n	80079f8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a14      	ldr	r2, [pc, #80]	@ (8007a48 <HAL_UART_Transmit_IT+0x124>)
 80079f6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	613b      	str	r3, [r7, #16]
   return(result);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a16:	623b      	str	r3, [r7, #32]
 8007a18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	69f9      	ldr	r1, [r7, #28]
 8007a1c:	6a3a      	ldr	r2, [r7, #32]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e000      	b.n	8007a30 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007a2e:	2302      	movs	r3, #2
  }
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3744      	adds	r7, #68	@ 0x44
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	08009673 	.word	0x08009673
 8007a40:	08009593 	.word	0x08009593
 8007a44:	080094d1 	.word	0x080094d1
 8007a48:	08009419 	.word	0x08009419

08007a4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	@ 0x28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d137      	bne.n	8007ad4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_UART_Receive_IT+0x24>
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e030      	b.n	8007ad6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ae0 <HAL_UART_Receive_IT+0x94>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d01f      	beq.n	8007ac4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d018      	beq.n	8007ac4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	623b      	str	r3, [r7, #32]
 8007ab2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f001 fb06 	bl	80090dc <UART_Start_Receive_IT>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	e000      	b.n	8007ad6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ad4:	2302      	movs	r3, #2
  }
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3728      	adds	r7, #40	@ 0x28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	58000c00 	.word	0x58000c00

08007ae4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b0ba      	sub	sp, #232	@ 0xe8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007b0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007b12:	4013      	ands	r3, r2
 8007b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d11b      	bne.n	8007b58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d015      	beq.n	8007b58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d009      	beq.n	8007b58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8377 	beq.w	800823c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
      }
      return;
 8007b56:	e371      	b.n	800823c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8123 	beq.w	8007da8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b66:	4b8d      	ldr	r3, [pc, #564]	@ (8007d9c <HAL_UART_IRQHandler+0x2b8>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b72:	4b8b      	ldr	r3, [pc, #556]	@ (8007da0 <HAL_UART_IRQHandler+0x2bc>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 8116 	beq.w	8007da8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d011      	beq.n	8007bac <HAL_UART_IRQHandler+0xc8>
 8007b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba2:	f043 0201 	orr.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d011      	beq.n	8007bdc <HAL_UART_IRQHandler+0xf8>
 8007bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd2:	f043 0204 	orr.w	r2, r3, #4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d011      	beq.n	8007c0c <HAL_UART_IRQHandler+0x128>
 8007be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c02:	f043 0202 	orr.w	r2, r3, #2
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d017      	beq.n	8007c48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d105      	bne.n	8007c30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c28:	4b5c      	ldr	r3, [pc, #368]	@ (8007d9c <HAL_UART_IRQHandler+0x2b8>)
 8007c2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2208      	movs	r2, #8
 8007c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3e:	f043 0208 	orr.w	r2, r3, #8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d012      	beq.n	8007c7a <HAL_UART_IRQHandler+0x196>
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00c      	beq.n	8007c7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c70:	f043 0220 	orr.w	r2, r3, #32
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 82dd 	beq.w	8008240 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c8a:	f003 0320 	and.w	r3, r3, #32
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cce:	2b40      	cmp	r3, #64	@ 0x40
 8007cd0:	d005      	beq.n	8007cde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d054      	beq.n	8007d88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fb1e 	bl	8009320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cee:	2b40      	cmp	r3, #64	@ 0x40
 8007cf0:	d146      	bne.n	8007d80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1d9      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d017      	beq.n	8007d78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4e:	4a15      	ldr	r2, [pc, #84]	@ (8007da4 <HAL_UART_IRQHandler+0x2c0>)
 8007d50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fa f905 	bl	8001f68 <HAL_DMA_Abort_IT>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d019      	beq.n	8007d98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d72:	4610      	mov	r0, r2
 8007d74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d76:	e00f      	b.n	8007d98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa77 	bl	800826c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7e:	e00b      	b.n	8007d98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa73 	bl	800826c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d86:	e007      	b.n	8007d98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fa6f 	bl	800826c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d96:	e253      	b.n	8008240 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d98:	bf00      	nop
    return;
 8007d9a:	e251      	b.n	8008240 <HAL_UART_IRQHandler+0x75c>
 8007d9c:	10000001 	.word	0x10000001
 8007da0:	04000120 	.word	0x04000120
 8007da4:	080093ed 	.word	0x080093ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	f040 81e7 	bne.w	8008180 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 81e0 	beq.w	8008180 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc4:	f003 0310 	and.w	r3, r3, #16
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 81d9 	beq.w	8008180 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2210      	movs	r2, #16
 8007dd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	f040 8151 	bne.w	8008088 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a96      	ldr	r2, [pc, #600]	@ (8008048 <HAL_UART_IRQHandler+0x564>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d068      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a93      	ldr	r2, [pc, #588]	@ (800804c <HAL_UART_IRQHandler+0x568>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d061      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a91      	ldr	r2, [pc, #580]	@ (8008050 <HAL_UART_IRQHandler+0x56c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d05a      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a8e      	ldr	r2, [pc, #568]	@ (8008054 <HAL_UART_IRQHandler+0x570>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d053      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a8c      	ldr	r2, [pc, #560]	@ (8008058 <HAL_UART_IRQHandler+0x574>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d04c      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a89      	ldr	r2, [pc, #548]	@ (800805c <HAL_UART_IRQHandler+0x578>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d045      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a87      	ldr	r2, [pc, #540]	@ (8008060 <HAL_UART_IRQHandler+0x57c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d03e      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a84      	ldr	r2, [pc, #528]	@ (8008064 <HAL_UART_IRQHandler+0x580>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d037      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a82      	ldr	r2, [pc, #520]	@ (8008068 <HAL_UART_IRQHandler+0x584>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d030      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a7f      	ldr	r2, [pc, #508]	@ (800806c <HAL_UART_IRQHandler+0x588>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d029      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a7d      	ldr	r2, [pc, #500]	@ (8008070 <HAL_UART_IRQHandler+0x58c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a7a      	ldr	r2, [pc, #488]	@ (8008074 <HAL_UART_IRQHandler+0x590>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01b      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a78      	ldr	r2, [pc, #480]	@ (8008078 <HAL_UART_IRQHandler+0x594>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d014      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a75      	ldr	r2, [pc, #468]	@ (800807c <HAL_UART_IRQHandler+0x598>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00d      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a73      	ldr	r2, [pc, #460]	@ (8008080 <HAL_UART_IRQHandler+0x59c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d006      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x3e2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a70      	ldr	r2, [pc, #448]	@ (8008084 <HAL_UART_IRQHandler+0x5a0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d106      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x3f0>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	e005      	b.n	8007ee0 <HAL_UART_IRQHandler+0x3fc>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ee4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 81ab 	beq.w	8008244 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ef4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	f080 81a3 	bcs.w	8008244 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f14:	f000 8087 	beq.w	8008026 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1da      	bne.n	8007f18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e1      	bne.n	8007f62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e3      	bne.n	8007f9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff4:	f023 0310 	bic.w	r3, r3, #16
 8007ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008006:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008008:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800800c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e4      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008020:	4618      	mov	r0, r3
 8008022:	f7f9 fc83 	bl	800192c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008038:	b29b      	uxth	r3, r3
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	b29b      	uxth	r3, r3
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f91d 	bl	8008280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008046:	e0fd      	b.n	8008244 <HAL_UART_IRQHandler+0x760>
 8008048:	40020010 	.word	0x40020010
 800804c:	40020028 	.word	0x40020028
 8008050:	40020040 	.word	0x40020040
 8008054:	40020058 	.word	0x40020058
 8008058:	40020070 	.word	0x40020070
 800805c:	40020088 	.word	0x40020088
 8008060:	400200a0 	.word	0x400200a0
 8008064:	400200b8 	.word	0x400200b8
 8008068:	40020410 	.word	0x40020410
 800806c:	40020428 	.word	0x40020428
 8008070:	40020440 	.word	0x40020440
 8008074:	40020458 	.word	0x40020458
 8008078:	40020470 	.word	0x40020470
 800807c:	40020488 	.word	0x40020488
 8008080:	400204a0 	.word	0x400204a0
 8008084:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008094:	b29b      	uxth	r3, r3
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80cf 	beq.w	8008248 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80080aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 80ca 	beq.w	8008248 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e4      	bne.n	80080b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3308      	adds	r3, #8
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	623b      	str	r3, [r7, #32]
   return(result);
 80080fa:	6a3a      	ldr	r2, [r7, #32]
 80080fc:	4b55      	ldr	r3, [pc, #340]	@ (8008254 <HAL_UART_IRQHandler+0x770>)
 80080fe:	4013      	ands	r3, r2
 8008100:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800810e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800811c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e3      	bne.n	80080ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	60fb      	str	r3, [r7, #12]
   return(result);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	69b9      	ldr	r1, [r7, #24]
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	617b      	str	r3, [r7, #20]
   return(result);
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e4      	bne.n	8008136 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f881 	bl	8008280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800817e:	e063      	b.n	8008248 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00e      	beq.n	80081aa <HAL_UART_IRQHandler+0x6c6>
 800818c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80081a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f002 f822 	bl	800a1ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081a8:	e051      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d014      	beq.n	80081e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d105      	bne.n	80081ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d03a      	beq.n	800824c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
    }
    return;
 80081de:	e035      	b.n	800824c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_UART_IRQHandler+0x71c>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 faaf 	bl	800975c <UART_EndTransmit_IT>
    return;
 80081fe:	e026      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <HAL_UART_IRQHandler+0x73c>
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008210:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fffb 	bl	800a214 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800821e:	e016      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d010      	beq.n	800824e <HAL_UART_IRQHandler+0x76a>
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008230:	2b00      	cmp	r3, #0
 8008232:	da0c      	bge.n	800824e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 ffe3 	bl	800a200 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800823a:	e008      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
      return;
 800823c:	bf00      	nop
 800823e:	e006      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
    return;
 8008240:	bf00      	nop
 8008242:	e004      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
      return;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
      return;
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <HAL_UART_IRQHandler+0x76a>
    return;
 800824c:	bf00      	nop
  }
}
 800824e:	37e8      	adds	r7, #232	@ 0xe8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	effffffe 	.word	0xeffffffe

08008258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800829c:	b092      	sub	sp, #72	@ 0x48
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	431a      	orrs	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	4313      	orrs	r3, r2
 80082be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4bbe      	ldr	r3, [pc, #760]	@ (80085c0 <UART_SetConfig+0x328>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4ab3      	ldr	r2, [pc, #716]	@ (80085c4 <UART_SetConfig+0x32c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008300:	4313      	orrs	r3, r2
 8008302:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	4baf      	ldr	r3, [pc, #700]	@ (80085c8 <UART_SetConfig+0x330>)
 800830c:	4013      	ands	r3, r2
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008314:	430b      	orrs	r3, r1
 8008316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	f023 010f 	bic.w	r1, r3, #15
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4aa6      	ldr	r2, [pc, #664]	@ (80085cc <UART_SetConfig+0x334>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d177      	bne.n	8008428 <UART_SetConfig+0x190>
 8008338:	4ba5      	ldr	r3, [pc, #660]	@ (80085d0 <UART_SetConfig+0x338>)
 800833a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008340:	2b28      	cmp	r3, #40	@ 0x28
 8008342:	d86d      	bhi.n	8008420 <UART_SetConfig+0x188>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <UART_SetConfig+0xb4>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	080083f1 	.word	0x080083f1
 8008350:	08008421 	.word	0x08008421
 8008354:	08008421 	.word	0x08008421
 8008358:	08008421 	.word	0x08008421
 800835c:	08008421 	.word	0x08008421
 8008360:	08008421 	.word	0x08008421
 8008364:	08008421 	.word	0x08008421
 8008368:	08008421 	.word	0x08008421
 800836c:	080083f9 	.word	0x080083f9
 8008370:	08008421 	.word	0x08008421
 8008374:	08008421 	.word	0x08008421
 8008378:	08008421 	.word	0x08008421
 800837c:	08008421 	.word	0x08008421
 8008380:	08008421 	.word	0x08008421
 8008384:	08008421 	.word	0x08008421
 8008388:	08008421 	.word	0x08008421
 800838c:	08008401 	.word	0x08008401
 8008390:	08008421 	.word	0x08008421
 8008394:	08008421 	.word	0x08008421
 8008398:	08008421 	.word	0x08008421
 800839c:	08008421 	.word	0x08008421
 80083a0:	08008421 	.word	0x08008421
 80083a4:	08008421 	.word	0x08008421
 80083a8:	08008421 	.word	0x08008421
 80083ac:	08008409 	.word	0x08008409
 80083b0:	08008421 	.word	0x08008421
 80083b4:	08008421 	.word	0x08008421
 80083b8:	08008421 	.word	0x08008421
 80083bc:	08008421 	.word	0x08008421
 80083c0:	08008421 	.word	0x08008421
 80083c4:	08008421 	.word	0x08008421
 80083c8:	08008421 	.word	0x08008421
 80083cc:	08008411 	.word	0x08008411
 80083d0:	08008421 	.word	0x08008421
 80083d4:	08008421 	.word	0x08008421
 80083d8:	08008421 	.word	0x08008421
 80083dc:	08008421 	.word	0x08008421
 80083e0:	08008421 	.word	0x08008421
 80083e4:	08008421 	.word	0x08008421
 80083e8:	08008421 	.word	0x08008421
 80083ec:	08008419 	.word	0x08008419
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f6:	e222      	b.n	800883e <UART_SetConfig+0x5a6>
 80083f8:	2304      	movs	r3, #4
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e21e      	b.n	800883e <UART_SetConfig+0x5a6>
 8008400:	2308      	movs	r3, #8
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008406:	e21a      	b.n	800883e <UART_SetConfig+0x5a6>
 8008408:	2310      	movs	r3, #16
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e216      	b.n	800883e <UART_SetConfig+0x5a6>
 8008410:	2320      	movs	r3, #32
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e212      	b.n	800883e <UART_SetConfig+0x5a6>
 8008418:	2340      	movs	r3, #64	@ 0x40
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e20e      	b.n	800883e <UART_SetConfig+0x5a6>
 8008420:	2380      	movs	r3, #128	@ 0x80
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e20a      	b.n	800883e <UART_SetConfig+0x5a6>
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a69      	ldr	r2, [pc, #420]	@ (80085d4 <UART_SetConfig+0x33c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d130      	bne.n	8008494 <UART_SetConfig+0x1fc>
 8008432:	4b67      	ldr	r3, [pc, #412]	@ (80085d0 <UART_SetConfig+0x338>)
 8008434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	2b05      	cmp	r3, #5
 800843c:	d826      	bhi.n	800848c <UART_SetConfig+0x1f4>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <UART_SetConfig+0x1ac>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	0800845d 	.word	0x0800845d
 8008448:	08008465 	.word	0x08008465
 800844c:	0800846d 	.word	0x0800846d
 8008450:	08008475 	.word	0x08008475
 8008454:	0800847d 	.word	0x0800847d
 8008458:	08008485 	.word	0x08008485
 800845c:	2300      	movs	r3, #0
 800845e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008462:	e1ec      	b.n	800883e <UART_SetConfig+0x5a6>
 8008464:	2304      	movs	r3, #4
 8008466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846a:	e1e8      	b.n	800883e <UART_SetConfig+0x5a6>
 800846c:	2308      	movs	r3, #8
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e1e4      	b.n	800883e <UART_SetConfig+0x5a6>
 8008474:	2310      	movs	r3, #16
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e1e0      	b.n	800883e <UART_SetConfig+0x5a6>
 800847c:	2320      	movs	r3, #32
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e1dc      	b.n	800883e <UART_SetConfig+0x5a6>
 8008484:	2340      	movs	r3, #64	@ 0x40
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e1d8      	b.n	800883e <UART_SetConfig+0x5a6>
 800848c:	2380      	movs	r3, #128	@ 0x80
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e1d4      	b.n	800883e <UART_SetConfig+0x5a6>
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a4f      	ldr	r2, [pc, #316]	@ (80085d8 <UART_SetConfig+0x340>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d130      	bne.n	8008500 <UART_SetConfig+0x268>
 800849e:	4b4c      	ldr	r3, [pc, #304]	@ (80085d0 <UART_SetConfig+0x338>)
 80084a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d826      	bhi.n	80084f8 <UART_SetConfig+0x260>
 80084aa:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <UART_SetConfig+0x218>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084d1 	.word	0x080084d1
 80084b8:	080084d9 	.word	0x080084d9
 80084bc:	080084e1 	.word	0x080084e1
 80084c0:	080084e9 	.word	0x080084e9
 80084c4:	080084f1 	.word	0x080084f1
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e1b6      	b.n	800883e <UART_SetConfig+0x5a6>
 80084d0:	2304      	movs	r3, #4
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e1b2      	b.n	800883e <UART_SetConfig+0x5a6>
 80084d8:	2308      	movs	r3, #8
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e1ae      	b.n	800883e <UART_SetConfig+0x5a6>
 80084e0:	2310      	movs	r3, #16
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e1aa      	b.n	800883e <UART_SetConfig+0x5a6>
 80084e8:	2320      	movs	r3, #32
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e1a6      	b.n	800883e <UART_SetConfig+0x5a6>
 80084f0:	2340      	movs	r3, #64	@ 0x40
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e1a2      	b.n	800883e <UART_SetConfig+0x5a6>
 80084f8:	2380      	movs	r3, #128	@ 0x80
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fe:	e19e      	b.n	800883e <UART_SetConfig+0x5a6>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a35      	ldr	r2, [pc, #212]	@ (80085dc <UART_SetConfig+0x344>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d130      	bne.n	800856c <UART_SetConfig+0x2d4>
 800850a:	4b31      	ldr	r3, [pc, #196]	@ (80085d0 <UART_SetConfig+0x338>)
 800850c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b05      	cmp	r3, #5
 8008514:	d826      	bhi.n	8008564 <UART_SetConfig+0x2cc>
 8008516:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <UART_SetConfig+0x284>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008535 	.word	0x08008535
 8008520:	0800853d 	.word	0x0800853d
 8008524:	08008545 	.word	0x08008545
 8008528:	0800854d 	.word	0x0800854d
 800852c:	08008555 	.word	0x08008555
 8008530:	0800855d 	.word	0x0800855d
 8008534:	2300      	movs	r3, #0
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e180      	b.n	800883e <UART_SetConfig+0x5a6>
 800853c:	2304      	movs	r3, #4
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e17c      	b.n	800883e <UART_SetConfig+0x5a6>
 8008544:	2308      	movs	r3, #8
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e178      	b.n	800883e <UART_SetConfig+0x5a6>
 800854c:	2310      	movs	r3, #16
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e174      	b.n	800883e <UART_SetConfig+0x5a6>
 8008554:	2320      	movs	r3, #32
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e170      	b.n	800883e <UART_SetConfig+0x5a6>
 800855c:	2340      	movs	r3, #64	@ 0x40
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e16c      	b.n	800883e <UART_SetConfig+0x5a6>
 8008564:	2380      	movs	r3, #128	@ 0x80
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856a:	e168      	b.n	800883e <UART_SetConfig+0x5a6>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1b      	ldr	r2, [pc, #108]	@ (80085e0 <UART_SetConfig+0x348>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d142      	bne.n	80085fc <UART_SetConfig+0x364>
 8008576:	4b16      	ldr	r3, [pc, #88]	@ (80085d0 <UART_SetConfig+0x338>)
 8008578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	2b05      	cmp	r3, #5
 8008580:	d838      	bhi.n	80085f4 <UART_SetConfig+0x35c>
 8008582:	a201      	add	r2, pc, #4	@ (adr r2, 8008588 <UART_SetConfig+0x2f0>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085a1 	.word	0x080085a1
 800858c:	080085a9 	.word	0x080085a9
 8008590:	080085b1 	.word	0x080085b1
 8008594:	080085b9 	.word	0x080085b9
 8008598:	080085e5 	.word	0x080085e5
 800859c:	080085ed 	.word	0x080085ed
 80085a0:	2300      	movs	r3, #0
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e14a      	b.n	800883e <UART_SetConfig+0x5a6>
 80085a8:	2304      	movs	r3, #4
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e146      	b.n	800883e <UART_SetConfig+0x5a6>
 80085b0:	2308      	movs	r3, #8
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e142      	b.n	800883e <UART_SetConfig+0x5a6>
 80085b8:	2310      	movs	r3, #16
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e13e      	b.n	800883e <UART_SetConfig+0x5a6>
 80085c0:	cfff69f3 	.word	0xcfff69f3
 80085c4:	58000c00 	.word	0x58000c00
 80085c8:	11fff4ff 	.word	0x11fff4ff
 80085cc:	40011000 	.word	0x40011000
 80085d0:	58024400 	.word	0x58024400
 80085d4:	40004400 	.word	0x40004400
 80085d8:	40004800 	.word	0x40004800
 80085dc:	40004c00 	.word	0x40004c00
 80085e0:	40005000 	.word	0x40005000
 80085e4:	2320      	movs	r3, #32
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e128      	b.n	800883e <UART_SetConfig+0x5a6>
 80085ec:	2340      	movs	r3, #64	@ 0x40
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e124      	b.n	800883e <UART_SetConfig+0x5a6>
 80085f4:	2380      	movs	r3, #128	@ 0x80
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e120      	b.n	800883e <UART_SetConfig+0x5a6>
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4acb      	ldr	r2, [pc, #812]	@ (8008930 <UART_SetConfig+0x698>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d176      	bne.n	80086f4 <UART_SetConfig+0x45c>
 8008606:	4bcb      	ldr	r3, [pc, #812]	@ (8008934 <UART_SetConfig+0x69c>)
 8008608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800860e:	2b28      	cmp	r3, #40	@ 0x28
 8008610:	d86c      	bhi.n	80086ec <UART_SetConfig+0x454>
 8008612:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <UART_SetConfig+0x380>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	080086bd 	.word	0x080086bd
 800861c:	080086ed 	.word	0x080086ed
 8008620:	080086ed 	.word	0x080086ed
 8008624:	080086ed 	.word	0x080086ed
 8008628:	080086ed 	.word	0x080086ed
 800862c:	080086ed 	.word	0x080086ed
 8008630:	080086ed 	.word	0x080086ed
 8008634:	080086ed 	.word	0x080086ed
 8008638:	080086c5 	.word	0x080086c5
 800863c:	080086ed 	.word	0x080086ed
 8008640:	080086ed 	.word	0x080086ed
 8008644:	080086ed 	.word	0x080086ed
 8008648:	080086ed 	.word	0x080086ed
 800864c:	080086ed 	.word	0x080086ed
 8008650:	080086ed 	.word	0x080086ed
 8008654:	080086ed 	.word	0x080086ed
 8008658:	080086cd 	.word	0x080086cd
 800865c:	080086ed 	.word	0x080086ed
 8008660:	080086ed 	.word	0x080086ed
 8008664:	080086ed 	.word	0x080086ed
 8008668:	080086ed 	.word	0x080086ed
 800866c:	080086ed 	.word	0x080086ed
 8008670:	080086ed 	.word	0x080086ed
 8008674:	080086ed 	.word	0x080086ed
 8008678:	080086d5 	.word	0x080086d5
 800867c:	080086ed 	.word	0x080086ed
 8008680:	080086ed 	.word	0x080086ed
 8008684:	080086ed 	.word	0x080086ed
 8008688:	080086ed 	.word	0x080086ed
 800868c:	080086ed 	.word	0x080086ed
 8008690:	080086ed 	.word	0x080086ed
 8008694:	080086ed 	.word	0x080086ed
 8008698:	080086dd 	.word	0x080086dd
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	080086ed 	.word	0x080086ed
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	080086ed 	.word	0x080086ed
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086ed 	.word	0x080086ed
 80086b4:	080086ed 	.word	0x080086ed
 80086b8:	080086e5 	.word	0x080086e5
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e0bc      	b.n	800883e <UART_SetConfig+0x5a6>
 80086c4:	2304      	movs	r3, #4
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e0b8      	b.n	800883e <UART_SetConfig+0x5a6>
 80086cc:	2308      	movs	r3, #8
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e0b4      	b.n	800883e <UART_SetConfig+0x5a6>
 80086d4:	2310      	movs	r3, #16
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e0b0      	b.n	800883e <UART_SetConfig+0x5a6>
 80086dc:	2320      	movs	r3, #32
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086e2:	e0ac      	b.n	800883e <UART_SetConfig+0x5a6>
 80086e4:	2340      	movs	r3, #64	@ 0x40
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e0a8      	b.n	800883e <UART_SetConfig+0x5a6>
 80086ec:	2380      	movs	r3, #128	@ 0x80
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f2:	e0a4      	b.n	800883e <UART_SetConfig+0x5a6>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a8f      	ldr	r2, [pc, #572]	@ (8008938 <UART_SetConfig+0x6a0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d130      	bne.n	8008760 <UART_SetConfig+0x4c8>
 80086fe:	4b8d      	ldr	r3, [pc, #564]	@ (8008934 <UART_SetConfig+0x69c>)
 8008700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	2b05      	cmp	r3, #5
 8008708:	d826      	bhi.n	8008758 <UART_SetConfig+0x4c0>
 800870a:	a201      	add	r2, pc, #4	@ (adr r2, 8008710 <UART_SetConfig+0x478>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	08008729 	.word	0x08008729
 8008714:	08008731 	.word	0x08008731
 8008718:	08008739 	.word	0x08008739
 800871c:	08008741 	.word	0x08008741
 8008720:	08008749 	.word	0x08008749
 8008724:	08008751 	.word	0x08008751
 8008728:	2300      	movs	r3, #0
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e086      	b.n	800883e <UART_SetConfig+0x5a6>
 8008730:	2304      	movs	r3, #4
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e082      	b.n	800883e <UART_SetConfig+0x5a6>
 8008738:	2308      	movs	r3, #8
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e07e      	b.n	800883e <UART_SetConfig+0x5a6>
 8008740:	2310      	movs	r3, #16
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e07a      	b.n	800883e <UART_SetConfig+0x5a6>
 8008748:	2320      	movs	r3, #32
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e076      	b.n	800883e <UART_SetConfig+0x5a6>
 8008750:	2340      	movs	r3, #64	@ 0x40
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e072      	b.n	800883e <UART_SetConfig+0x5a6>
 8008758:	2380      	movs	r3, #128	@ 0x80
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e06e      	b.n	800883e <UART_SetConfig+0x5a6>
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a75      	ldr	r2, [pc, #468]	@ (800893c <UART_SetConfig+0x6a4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d130      	bne.n	80087cc <UART_SetConfig+0x534>
 800876a:	4b72      	ldr	r3, [pc, #456]	@ (8008934 <UART_SetConfig+0x69c>)
 800876c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	2b05      	cmp	r3, #5
 8008774:	d826      	bhi.n	80087c4 <UART_SetConfig+0x52c>
 8008776:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <UART_SetConfig+0x4e4>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	08008795 	.word	0x08008795
 8008780:	0800879d 	.word	0x0800879d
 8008784:	080087a5 	.word	0x080087a5
 8008788:	080087ad 	.word	0x080087ad
 800878c:	080087b5 	.word	0x080087b5
 8008790:	080087bd 	.word	0x080087bd
 8008794:	2300      	movs	r3, #0
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e050      	b.n	800883e <UART_SetConfig+0x5a6>
 800879c:	2304      	movs	r3, #4
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e04c      	b.n	800883e <UART_SetConfig+0x5a6>
 80087a4:	2308      	movs	r3, #8
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e048      	b.n	800883e <UART_SetConfig+0x5a6>
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e044      	b.n	800883e <UART_SetConfig+0x5a6>
 80087b4:	2320      	movs	r3, #32
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e040      	b.n	800883e <UART_SetConfig+0x5a6>
 80087bc:	2340      	movs	r3, #64	@ 0x40
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e03c      	b.n	800883e <UART_SetConfig+0x5a6>
 80087c4:	2380      	movs	r3, #128	@ 0x80
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ca:	e038      	b.n	800883e <UART_SetConfig+0x5a6>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a5b      	ldr	r2, [pc, #364]	@ (8008940 <UART_SetConfig+0x6a8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d130      	bne.n	8008838 <UART_SetConfig+0x5a0>
 80087d6:	4b57      	ldr	r3, [pc, #348]	@ (8008934 <UART_SetConfig+0x69c>)
 80087d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	2b05      	cmp	r3, #5
 80087e0:	d826      	bhi.n	8008830 <UART_SetConfig+0x598>
 80087e2:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <UART_SetConfig+0x550>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008801 	.word	0x08008801
 80087ec:	08008809 	.word	0x08008809
 80087f0:	08008811 	.word	0x08008811
 80087f4:	08008819 	.word	0x08008819
 80087f8:	08008821 	.word	0x08008821
 80087fc:	08008829 	.word	0x08008829
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e01a      	b.n	800883e <UART_SetConfig+0x5a6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e016      	b.n	800883e <UART_SetConfig+0x5a6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e012      	b.n	800883e <UART_SetConfig+0x5a6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e00e      	b.n	800883e <UART_SetConfig+0x5a6>
 8008820:	2320      	movs	r3, #32
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e00a      	b.n	800883e <UART_SetConfig+0x5a6>
 8008828:	2340      	movs	r3, #64	@ 0x40
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882e:	e006      	b.n	800883e <UART_SetConfig+0x5a6>
 8008830:	2380      	movs	r3, #128	@ 0x80
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008836:	e002      	b.n	800883e <UART_SetConfig+0x5a6>
 8008838:	2380      	movs	r3, #128	@ 0x80
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a3f      	ldr	r2, [pc, #252]	@ (8008940 <UART_SetConfig+0x6a8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	f040 80f8 	bne.w	8008a3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800884a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800884e:	2b20      	cmp	r3, #32
 8008850:	dc46      	bgt.n	80088e0 <UART_SetConfig+0x648>
 8008852:	2b02      	cmp	r3, #2
 8008854:	f2c0 8082 	blt.w	800895c <UART_SetConfig+0x6c4>
 8008858:	3b02      	subs	r3, #2
 800885a:	2b1e      	cmp	r3, #30
 800885c:	d87e      	bhi.n	800895c <UART_SetConfig+0x6c4>
 800885e:	a201      	add	r2, pc, #4	@ (adr r2, 8008864 <UART_SetConfig+0x5cc>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	080088e7 	.word	0x080088e7
 8008868:	0800895d 	.word	0x0800895d
 800886c:	080088ef 	.word	0x080088ef
 8008870:	0800895d 	.word	0x0800895d
 8008874:	0800895d 	.word	0x0800895d
 8008878:	0800895d 	.word	0x0800895d
 800887c:	080088ff 	.word	0x080088ff
 8008880:	0800895d 	.word	0x0800895d
 8008884:	0800895d 	.word	0x0800895d
 8008888:	0800895d 	.word	0x0800895d
 800888c:	0800895d 	.word	0x0800895d
 8008890:	0800895d 	.word	0x0800895d
 8008894:	0800895d 	.word	0x0800895d
 8008898:	0800895d 	.word	0x0800895d
 800889c:	0800890f 	.word	0x0800890f
 80088a0:	0800895d 	.word	0x0800895d
 80088a4:	0800895d 	.word	0x0800895d
 80088a8:	0800895d 	.word	0x0800895d
 80088ac:	0800895d 	.word	0x0800895d
 80088b0:	0800895d 	.word	0x0800895d
 80088b4:	0800895d 	.word	0x0800895d
 80088b8:	0800895d 	.word	0x0800895d
 80088bc:	0800895d 	.word	0x0800895d
 80088c0:	0800895d 	.word	0x0800895d
 80088c4:	0800895d 	.word	0x0800895d
 80088c8:	0800895d 	.word	0x0800895d
 80088cc:	0800895d 	.word	0x0800895d
 80088d0:	0800895d 	.word	0x0800895d
 80088d4:	0800895d 	.word	0x0800895d
 80088d8:	0800895d 	.word	0x0800895d
 80088dc:	0800894f 	.word	0x0800894f
 80088e0:	2b40      	cmp	r3, #64	@ 0x40
 80088e2:	d037      	beq.n	8008954 <UART_SetConfig+0x6bc>
 80088e4:	e03a      	b.n	800895c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088e6:	f7fe fbab 	bl	8007040 <HAL_RCCEx_GetD3PCLK1Freq>
 80088ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088ec:	e03c      	b.n	8008968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fbba 	bl	800706c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fc:	e034      	b.n	8008968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088fe:	f107 0318 	add.w	r3, r7, #24
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fd06 	bl	8007314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890c:	e02c      	b.n	8008968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800890e:	4b09      	ldr	r3, [pc, #36]	@ (8008934 <UART_SetConfig+0x69c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800891a:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <UART_SetConfig+0x69c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	08db      	lsrs	r3, r3, #3
 8008920:	f003 0303 	and.w	r3, r3, #3
 8008924:	4a07      	ldr	r2, [pc, #28]	@ (8008944 <UART_SetConfig+0x6ac>)
 8008926:	fa22 f303 	lsr.w	r3, r2, r3
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800892c:	e01c      	b.n	8008968 <UART_SetConfig+0x6d0>
 800892e:	bf00      	nop
 8008930:	40011400 	.word	0x40011400
 8008934:	58024400 	.word	0x58024400
 8008938:	40007800 	.word	0x40007800
 800893c:	40007c00 	.word	0x40007c00
 8008940:	58000c00 	.word	0x58000c00
 8008944:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008948:	4b9d      	ldr	r3, [pc, #628]	@ (8008bc0 <UART_SetConfig+0x928>)
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894c:	e00c      	b.n	8008968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800894e:	4b9d      	ldr	r3, [pc, #628]	@ (8008bc4 <UART_SetConfig+0x92c>)
 8008950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008952:	e009      	b.n	8008968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008954:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895a:	e005      	b.n	8008968 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008966:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 81de 	beq.w	8008d2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008974:	4a94      	ldr	r2, [pc, #592]	@ (8008bc8 <UART_SetConfig+0x930>)
 8008976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800897a:	461a      	mov	r2, r3
 800897c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800897e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008982:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	4613      	mov	r3, r2
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	4413      	add	r3, r2
 800898e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008990:	429a      	cmp	r2, r3
 8008992:	d305      	bcc.n	80089a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800899a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800899c:	429a      	cmp	r2, r3
 800899e:	d903      	bls.n	80089a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089a6:	e1c1      	b.n	8008d2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089aa:	2200      	movs	r2, #0
 80089ac:	60bb      	str	r3, [r7, #8]
 80089ae:	60fa      	str	r2, [r7, #12]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	4a84      	ldr	r2, [pc, #528]	@ (8008bc8 <UART_SetConfig+0x930>)
 80089b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2200      	movs	r2, #0
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089ca:	f7f7 fce1 	bl	8000390 <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4610      	mov	r0, r2
 80089d4:	4619      	mov	r1, r3
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	f04f 0300 	mov.w	r3, #0
 80089de:	020b      	lsls	r3, r1, #8
 80089e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089e4:	0202      	lsls	r2, r0, #8
 80089e6:	6979      	ldr	r1, [r7, #20]
 80089e8:	6849      	ldr	r1, [r1, #4]
 80089ea:	0849      	lsrs	r1, r1, #1
 80089ec:	2000      	movs	r0, #0
 80089ee:	460c      	mov	r4, r1
 80089f0:	4605      	mov	r5, r0
 80089f2:	eb12 0804 	adds.w	r8, r2, r4
 80089f6:	eb43 0905 	adc.w	r9, r3, r5
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	469a      	mov	sl, r3
 8008a02:	4693      	mov	fp, r2
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	f7f7 fcc0 	bl	8000390 <__aeabi_uldivmod>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4613      	mov	r3, r2
 8008a16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a1e:	d308      	bcc.n	8008a32 <UART_SetConfig+0x79a>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a26:	d204      	bcs.n	8008a32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a2e:	60da      	str	r2, [r3, #12]
 8008a30:	e17c      	b.n	8008d2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a38:	e178      	b.n	8008d2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a42:	f040 80c5 	bne.w	8008bd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	dc48      	bgt.n	8008ae0 <UART_SetConfig+0x848>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	db7b      	blt.n	8008b4a <UART_SetConfig+0x8b2>
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d879      	bhi.n	8008b4a <UART_SetConfig+0x8b2>
 8008a56:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <UART_SetConfig+0x7c4>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008ae7 	.word	0x08008ae7
 8008a60:	08008aef 	.word	0x08008aef
 8008a64:	08008b4b 	.word	0x08008b4b
 8008a68:	08008b4b 	.word	0x08008b4b
 8008a6c:	08008af7 	.word	0x08008af7
 8008a70:	08008b4b 	.word	0x08008b4b
 8008a74:	08008b4b 	.word	0x08008b4b
 8008a78:	08008b4b 	.word	0x08008b4b
 8008a7c:	08008b07 	.word	0x08008b07
 8008a80:	08008b4b 	.word	0x08008b4b
 8008a84:	08008b4b 	.word	0x08008b4b
 8008a88:	08008b4b 	.word	0x08008b4b
 8008a8c:	08008b4b 	.word	0x08008b4b
 8008a90:	08008b4b 	.word	0x08008b4b
 8008a94:	08008b4b 	.word	0x08008b4b
 8008a98:	08008b4b 	.word	0x08008b4b
 8008a9c:	08008b17 	.word	0x08008b17
 8008aa0:	08008b4b 	.word	0x08008b4b
 8008aa4:	08008b4b 	.word	0x08008b4b
 8008aa8:	08008b4b 	.word	0x08008b4b
 8008aac:	08008b4b 	.word	0x08008b4b
 8008ab0:	08008b4b 	.word	0x08008b4b
 8008ab4:	08008b4b 	.word	0x08008b4b
 8008ab8:	08008b4b 	.word	0x08008b4b
 8008abc:	08008b4b 	.word	0x08008b4b
 8008ac0:	08008b4b 	.word	0x08008b4b
 8008ac4:	08008b4b 	.word	0x08008b4b
 8008ac8:	08008b4b 	.word	0x08008b4b
 8008acc:	08008b4b 	.word	0x08008b4b
 8008ad0:	08008b4b 	.word	0x08008b4b
 8008ad4:	08008b4b 	.word	0x08008b4b
 8008ad8:	08008b4b 	.word	0x08008b4b
 8008adc:	08008b3d 	.word	0x08008b3d
 8008ae0:	2b40      	cmp	r3, #64	@ 0x40
 8008ae2:	d02e      	beq.n	8008b42 <UART_SetConfig+0x8aa>
 8008ae4:	e031      	b.n	8008b4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae6:	f7fd f875 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8008aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008aec:	e033      	b.n	8008b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aee:	f7fd f887 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 8008af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008af4:	e02f      	b.n	8008b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fab6 	bl	800706c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b04:	e027      	b.n	8008b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b06:	f107 0318 	add.w	r3, r7, #24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fc02 	bl	8007314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b14:	e01f      	b.n	8008b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b16:	4b2d      	ldr	r3, [pc, #180]	@ (8008bcc <UART_SetConfig+0x934>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b22:	4b2a      	ldr	r3, [pc, #168]	@ (8008bcc <UART_SetConfig+0x934>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	08db      	lsrs	r3, r3, #3
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	4a24      	ldr	r2, [pc, #144]	@ (8008bc0 <UART_SetConfig+0x928>)
 8008b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b34:	e00f      	b.n	8008b56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b36:	4b22      	ldr	r3, [pc, #136]	@ (8008bc0 <UART_SetConfig+0x928>)
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3a:	e00c      	b.n	8008b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b3c:	4b21      	ldr	r3, [pc, #132]	@ (8008bc4 <UART_SetConfig+0x92c>)
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e009      	b.n	8008b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b48:	e005      	b.n	8008b56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 80e7 	beq.w	8008d2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b62:	4a19      	ldr	r2, [pc, #100]	@ (8008bc8 <UART_SetConfig+0x930>)
 8008b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b70:	005a      	lsls	r2, r3, #1
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	441a      	add	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b86:	2b0f      	cmp	r3, #15
 8008b88:	d916      	bls.n	8008bb8 <UART_SetConfig+0x920>
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b90:	d212      	bcs.n	8008bb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f023 030f 	bic.w	r3, r3, #15
 8008b9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008baa:	4313      	orrs	r3, r2
 8008bac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	e0b9      	b.n	8008d2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bbe:	e0b5      	b.n	8008d2c <UART_SetConfig+0xa94>
 8008bc0:	03d09000 	.word	0x03d09000
 8008bc4:	003d0900 	.word	0x003d0900
 8008bc8:	0800b44c 	.word	0x0800b44c
 8008bcc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	dc49      	bgt.n	8008c6c <UART_SetConfig+0x9d4>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	db7c      	blt.n	8008cd6 <UART_SetConfig+0xa3e>
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d87a      	bhi.n	8008cd6 <UART_SetConfig+0xa3e>
 8008be0:	a201      	add	r2, pc, #4	@ (adr r2, 8008be8 <UART_SetConfig+0x950>)
 8008be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008c73 	.word	0x08008c73
 8008bec:	08008c7b 	.word	0x08008c7b
 8008bf0:	08008cd7 	.word	0x08008cd7
 8008bf4:	08008cd7 	.word	0x08008cd7
 8008bf8:	08008c83 	.word	0x08008c83
 8008bfc:	08008cd7 	.word	0x08008cd7
 8008c00:	08008cd7 	.word	0x08008cd7
 8008c04:	08008cd7 	.word	0x08008cd7
 8008c08:	08008c93 	.word	0x08008c93
 8008c0c:	08008cd7 	.word	0x08008cd7
 8008c10:	08008cd7 	.word	0x08008cd7
 8008c14:	08008cd7 	.word	0x08008cd7
 8008c18:	08008cd7 	.word	0x08008cd7
 8008c1c:	08008cd7 	.word	0x08008cd7
 8008c20:	08008cd7 	.word	0x08008cd7
 8008c24:	08008cd7 	.word	0x08008cd7
 8008c28:	08008ca3 	.word	0x08008ca3
 8008c2c:	08008cd7 	.word	0x08008cd7
 8008c30:	08008cd7 	.word	0x08008cd7
 8008c34:	08008cd7 	.word	0x08008cd7
 8008c38:	08008cd7 	.word	0x08008cd7
 8008c3c:	08008cd7 	.word	0x08008cd7
 8008c40:	08008cd7 	.word	0x08008cd7
 8008c44:	08008cd7 	.word	0x08008cd7
 8008c48:	08008cd7 	.word	0x08008cd7
 8008c4c:	08008cd7 	.word	0x08008cd7
 8008c50:	08008cd7 	.word	0x08008cd7
 8008c54:	08008cd7 	.word	0x08008cd7
 8008c58:	08008cd7 	.word	0x08008cd7
 8008c5c:	08008cd7 	.word	0x08008cd7
 8008c60:	08008cd7 	.word	0x08008cd7
 8008c64:	08008cd7 	.word	0x08008cd7
 8008c68:	08008cc9 	.word	0x08008cc9
 8008c6c:	2b40      	cmp	r3, #64	@ 0x40
 8008c6e:	d02e      	beq.n	8008cce <UART_SetConfig+0xa36>
 8008c70:	e031      	b.n	8008cd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c72:	f7fc ffaf 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8008c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c78:	e033      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c7a:	f7fc ffc1 	bl	8005c00 <HAL_RCC_GetPCLK2Freq>
 8008c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c80:	e02f      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe f9f0 	bl	800706c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c90:	e027      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c92:	f107 0318 	add.w	r3, r7, #24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fb3c 	bl	8007314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca0:	e01f      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8008d58 <UART_SetConfig+0xac0>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cae:	4b2a      	ldr	r3, [pc, #168]	@ (8008d58 <UART_SetConfig+0xac0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	08db      	lsrs	r3, r3, #3
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	4a28      	ldr	r2, [pc, #160]	@ (8008d5c <UART_SetConfig+0xac4>)
 8008cba:	fa22 f303 	lsr.w	r3, r2, r3
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cc0:	e00f      	b.n	8008ce2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008cc2:	4b26      	ldr	r3, [pc, #152]	@ (8008d5c <UART_SetConfig+0xac4>)
 8008cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc6:	e00c      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cc8:	4b25      	ldr	r3, [pc, #148]	@ (8008d60 <UART_SetConfig+0xac8>)
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ccc:	e009      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd4:	e005      	b.n	8008ce2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d021      	beq.n	8008d2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	4a1d      	ldr	r2, [pc, #116]	@ (8008d64 <UART_SetConfig+0xacc>)
 8008cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	441a      	add	r2, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0e:	2b0f      	cmp	r3, #15
 8008d10:	d909      	bls.n	8008d26 <UART_SetConfig+0xa8e>
 8008d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d18:	d205      	bcs.n	8008d26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60da      	str	r2, [r3, #12]
 8008d24:	e002      	b.n	8008d2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2200      	movs	r2, #0
 8008d46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3748      	adds	r7, #72	@ 0x48
 8008d50:	46bd      	mov	sp, r7
 8008d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d56:	bf00      	nop
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	03d09000 	.word	0x03d09000
 8008d60:	003d0900 	.word	0x003d0900
 8008d64:	0800b44c 	.word	0x0800b44c

08008d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01a      	beq.n	8008e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e66:	d10a      	bne.n	8008e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	605a      	str	r2, [r3, #4]
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b098      	sub	sp, #96	@ 0x60
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ebc:	f7f8 fbd6 	bl	800166c <HAL_GetTick>
 8008ec0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0308 	and.w	r3, r3, #8
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d12f      	bne.n	8008f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f88e 	bl	8009000 <UART_WaitOnFlagUntilTimeout>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d022      	beq.n	8008f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e063      	b.n	8008ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d149      	bne.n	8008fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f46:	2200      	movs	r2, #0
 8008f48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f857 	bl	8009000 <UART_WaitOnFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d03c      	beq.n	8008fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	623b      	str	r3, [r7, #32]
   return(result);
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e6      	bne.n	8008f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f023 0301 	bic.w	r3, r3, #1
 8008fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008faa:	61fa      	str	r2, [r7, #28]
 8008fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	69b9      	ldr	r1, [r7, #24]
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e5      	bne.n	8008f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e012      	b.n	8008ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3758      	adds	r7, #88	@ 0x58
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	4613      	mov	r3, r2
 800900e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009010:	e04f      	b.n	80090b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d04b      	beq.n	80090b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800901a:	f7f8 fb27 	bl	800166c <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	429a      	cmp	r2, r3
 8009028:	d302      	bcc.n	8009030 <UART_WaitOnFlagUntilTimeout+0x30>
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e04e      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	d037      	beq.n	80090b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b80      	cmp	r3, #128	@ 0x80
 8009046:	d034      	beq.n	80090b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b40      	cmp	r3, #64	@ 0x40
 800904c:	d031      	beq.n	80090b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f003 0308 	and.w	r3, r3, #8
 8009058:	2b08      	cmp	r3, #8
 800905a:	d110      	bne.n	800907e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2208      	movs	r2, #8
 8009062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f95b 	bl	8009320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2208      	movs	r2, #8
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e029      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800908c:	d111      	bne.n	80090b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 f941 	bl	8009320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e00f      	b.n	80090d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69da      	ldr	r2, [r3, #28]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4013      	ands	r3, r2
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	429a      	cmp	r2, r3
 80090c0:	bf0c      	ite	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	2300      	movne	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d0a0      	beq.n	8009012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090dc:	b480      	push	{r7}
 80090de:	b0a3      	sub	sp, #140	@ 0x8c
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	88fa      	ldrh	r2, [r7, #6]
 80090f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800910e:	d10e      	bne.n	800912e <UART_Start_Receive_IT+0x52>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <UART_Start_Receive_IT+0x48>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800911e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009122:	e02d      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	22ff      	movs	r2, #255	@ 0xff
 8009128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800912c:	e028      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <UART_Start_Receive_IT+0x76>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <UART_Start_Receive_IT+0x6c>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	22ff      	movs	r2, #255	@ 0xff
 8009142:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009146:	e01b      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	227f      	movs	r2, #127	@ 0x7f
 800914c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009150:	e016      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800915a:	d10d      	bne.n	8009178 <UART_Start_Receive_IT+0x9c>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <UART_Start_Receive_IT+0x92>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	227f      	movs	r2, #127	@ 0x7f
 8009168:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800916c:	e008      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	223f      	movs	r2, #63	@ 0x3f
 8009172:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009176:	e003      	b.n	8009180 <UART_Start_Receive_IT+0xa4>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2222      	movs	r2, #34	@ 0x22
 800918c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80091b4:	673a      	str	r2, [r7, #112]	@ 0x70
 80091b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80091ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80091c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e3      	bne.n	8009190 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091d0:	d14f      	bne.n	8009272 <UART_Start_Receive_IT+0x196>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d349      	bcc.n	8009272 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091e6:	d107      	bne.n	80091f8 <UART_Start_Receive_IT+0x11c>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a47      	ldr	r2, [pc, #284]	@ (8009310 <UART_Start_Receive_IT+0x234>)
 80091f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80091f6:	e002      	b.n	80091fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a46      	ldr	r2, [pc, #280]	@ (8009314 <UART_Start_Receive_IT+0x238>)
 80091fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01a      	beq.n	800923c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800921a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800922a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800922e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e4      	bne.n	8009206 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800925c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800925e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800926a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_Start_Receive_IT+0x160>
 8009270:	e046      	b.n	8009300 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800927a:	d107      	bne.n	800928c <UART_Start_Receive_IT+0x1b0>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4a24      	ldr	r2, [pc, #144]	@ (8009318 <UART_Start_Receive_IT+0x23c>)
 8009288:	675a      	str	r2, [r3, #116]	@ 0x74
 800928a:	e002      	b.n	8009292 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a23      	ldr	r2, [pc, #140]	@ (800931c <UART_Start_Receive_IT+0x240>)
 8009290:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d019      	beq.n	80092ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80092ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_Start_Receive_IT+0x1be>
 80092cc:	e018      	b.n	8009300 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	613b      	str	r3, [r7, #16]
   return(result);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f043 0320 	orr.w	r3, r3, #32
 80092e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092ec:	623b      	str	r3, [r7, #32]
 80092ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	69f9      	ldr	r1, [r7, #28]
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e6      	bne.n	80092ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	378c      	adds	r7, #140	@ 0x8c
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	08009e85 	.word	0x08009e85
 8009314:	08009b25 	.word	0x08009b25
 8009318:	0800996d 	.word	0x0800996d
 800931c:	080097b5 	.word	0x080097b5

08009320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b095      	sub	sp, #84	@ 0x54
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800933c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009346:	643b      	str	r3, [r7, #64]	@ 0x40
 8009348:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800934c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e6      	bne.n	8009328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	61fb      	str	r3, [r7, #28]
   return(result);
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	4b1e      	ldr	r3, [pc, #120]	@ (80093e8 <UART_EndRxTransfer+0xc8>)
 800936e:	4013      	ands	r3, r2
 8009370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800937a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800937c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e5      	bne.n	800935a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009392:	2b01      	cmp	r3, #1
 8009394:	d118      	bne.n	80093c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	f023 0310 	bic.w	r3, r3, #16
 80093aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	613b      	str	r3, [r7, #16]
   return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e6      	bne.n	8009396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2220      	movs	r2, #32
 80093cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093dc:	bf00      	nop
 80093de:	3754      	adds	r7, #84	@ 0x54
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	effffffe 	.word	0xeffffffe

080093ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7fe ff2e 	bl	800826c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009410:	bf00      	nop
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b08f      	sub	sp, #60	@ 0x3c
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009426:	2b21      	cmp	r3, #33	@ 0x21
 8009428:	d14c      	bne.n	80094c4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d132      	bne.n	800949c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	61fb      	str	r3, [r7, #28]
   return(result);
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009456:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800945a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	60bb      	str	r3, [r7, #8]
   return(result);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800947c:	633b      	str	r3, [r7, #48]	@ 0x30
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6979      	ldr	r1, [r7, #20]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	613b      	str	r3, [r7, #16]
   return(result);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e6      	bne.n	8009468 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800949a:	e013      	b.n	80094c4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80094c4:	bf00      	nop
 80094c6:	373c      	adds	r7, #60	@ 0x3c
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b091      	sub	sp, #68	@ 0x44
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094de:	2b21      	cmp	r3, #33	@ 0x21
 80094e0:	d151      	bne.n	8009586 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d132      	bne.n	8009554 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	623b      	str	r3, [r7, #32]
   return(result);
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	633b      	str	r3, [r7, #48]	@ 0x30
 800950e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	60fb      	str	r3, [r7, #12]
   return(result);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009534:	637b      	str	r3, [r7, #52]	@ 0x34
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953e:	61fb      	str	r3, [r7, #28]
 8009540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	69b9      	ldr	r1, [r7, #24]
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	617b      	str	r3, [r7, #20]
   return(result);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e6      	bne.n	8009520 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009552:	e018      	b.n	8009586 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800955a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009568:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956e:	1c9a      	adds	r2, r3, #2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009586:	bf00      	nop
 8009588:	3744      	adds	r7, #68	@ 0x44
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009592:	b480      	push	{r7}
 8009594:	b091      	sub	sp, #68	@ 0x44
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a0:	2b21      	cmp	r3, #33	@ 0x21
 80095a2:	d160      	bne.n	8009666 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80095ac:	e057      	b.n	800965e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d133      	bne.n	8009622 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3308      	adds	r3, #8
 80095c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	623b      	str	r3, [r7, #32]
   return(result);
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80095d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3308      	adds	r3, #8
 80095d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095da:	633a      	str	r2, [r7, #48]	@ 0x30
 80095dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e5      	bne.n	80095ba <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009602:	637b      	str	r3, [r7, #52]	@ 0x34
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	69b9      	ldr	r1, [r7, #24]
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	617b      	str	r3, [r7, #20]
   return(result);
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009620:	e021      	b.n	8009666 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962c:	2b00      	cmp	r3, #0
 800962e:	d013      	beq.n	8009658 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009634:	781a      	ldrb	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009658:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800965a:	3b01      	subs	r3, #1
 800965c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800965e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1a4      	bne.n	80095ae <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009664:	e7ff      	b.n	8009666 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009666:	bf00      	nop
 8009668:	3744      	adds	r7, #68	@ 0x44
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009672:	b480      	push	{r7}
 8009674:	b091      	sub	sp, #68	@ 0x44
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009680:	2b21      	cmp	r3, #33	@ 0x21
 8009682:	d165      	bne.n	8009750 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800968a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800968c:	e05c      	b.n	8009748 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d133      	bne.n	8009702 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6a3b      	ldr	r3, [r7, #32]
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e5      	bne.n	800969a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	60bb      	str	r3, [r7, #8]
   return(result);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ec:	61bb      	str	r3, [r7, #24]
 80096ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6979      	ldr	r1, [r7, #20]
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	613b      	str	r3, [r7, #16]
   return(result);
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009700:	e026      	b.n	8009750 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970c:	2b00      	cmp	r3, #0
 800970e:	d018      	beq.n	8009742 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009714:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009724:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800972a:	1c9a      	adds	r2, r3, #2
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009736:	b29b      	uxth	r3, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	b29a      	uxth	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009742:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009744:	3b01      	subs	r3, #1
 8009746:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009748:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800974a:	2b00      	cmp	r3, #0
 800974c:	d19f      	bne.n	800968e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800974e:	e7ff      	b.n	8009750 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009750:	bf00      	nop
 8009752:	3744      	adds	r7, #68	@ 0x44
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	60bb      	str	r3, [r7, #8]
   return(result);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	461a      	mov	r2, r3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6979      	ldr	r1, [r7, #20]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	613b      	str	r3, [r7, #16]
   return(result);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e6      	bne.n	8009764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7fe fd57 	bl	8008258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097aa:	bf00      	nop
 80097ac:	3720      	adds	r7, #32
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b09c      	sub	sp, #112	@ 0x70
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097cc:	2b22      	cmp	r3, #34	@ 0x22
 80097ce:	f040 80be 	bne.w	800994e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097e0:	b2d9      	uxtb	r1, r3
 80097e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ec:	400a      	ands	r2, r1
 80097ee:	b2d2      	uxtb	r2, r2
 80097f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f6:	1c5a      	adds	r2, r3, #1
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009814:	b29b      	uxth	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	f040 80a1 	bne.w	800995e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800982a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800982c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800983a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800983c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009840:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e6      	bne.n	800981c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800985e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	667b      	str	r3, [r7, #100]	@ 0x64
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3308      	adds	r3, #8
 800986c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800986e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009870:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800987c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e5      	bne.n	800984e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2220      	movs	r2, #32
 8009886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a33      	ldr	r2, [pc, #204]	@ (8009968 <UART_RxISR_8BIT+0x1b4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d01f      	beq.n	80098e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d018      	beq.n	80098e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	623b      	str	r3, [r7, #32]
   return(result);
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e6      	bne.n	80098ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d12e      	bne.n	8009946 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	e853 3f00 	ldrex	r3, [r3]
 80098fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f023 0310 	bic.w	r3, r3, #16
 8009902:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800990c:	61fb      	str	r3, [r7, #28]
 800990e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	69b9      	ldr	r1, [r7, #24]
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	617b      	str	r3, [r7, #20]
   return(result);
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e6      	bne.n	80098ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	2b10      	cmp	r3, #16
 800992c:	d103      	bne.n	8009936 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2210      	movs	r2, #16
 8009934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7fe fc9e 	bl	8008280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009944:	e00b      	b.n	800995e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7f7 fa3e 	bl	8000dc8 <HAL_UART_RxCpltCallback>
}
 800994c:	e007      	b.n	800995e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699a      	ldr	r2, [r3, #24]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0208 	orr.w	r2, r2, #8
 800995c:	619a      	str	r2, [r3, #24]
}
 800995e:	bf00      	nop
 8009960:	3770      	adds	r7, #112	@ 0x70
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	58000c00 	.word	0x58000c00

0800996c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b09c      	sub	sp, #112	@ 0x70
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800997a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009984:	2b22      	cmp	r3, #34	@ 0x22
 8009986:	f040 80be 	bne.w	8009b06 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009990:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009998:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800999a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800999e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80099a2:	4013      	ands	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ae:	1c9a      	adds	r2, r3, #2
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	3b01      	subs	r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f040 80a1 	bne.w	8009b16 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80099e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80099f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1e6      	bne.n	80099d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a18:	f023 0301 	bic.w	r3, r3, #1
 8009a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3308      	adds	r3, #8
 8009a24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a26:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e5      	bne.n	8009a06 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a33      	ldr	r2, [pc, #204]	@ (8009b20 <UART_RxISR_16BIT+0x1b4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d01f      	beq.n	8009a98 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d018      	beq.n	8009a98 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	461a      	mov	r2, r3
 8009a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e6      	bne.n	8009a66 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d12e      	bne.n	8009afe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f023 0310 	bic.w	r3, r3, #16
 8009aba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ac4:	61bb      	str	r3, [r7, #24]
 8009ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6979      	ldr	r1, [r7, #20]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e6      	bne.n	8009aa6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f003 0310 	and.w	r3, r3, #16
 8009ae2:	2b10      	cmp	r3, #16
 8009ae4:	d103      	bne.n	8009aee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2210      	movs	r2, #16
 8009aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7fe fbc2 	bl	8008280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009afc:	e00b      	b.n	8009b16 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7f7 f962 	bl	8000dc8 <HAL_UART_RxCpltCallback>
}
 8009b04:	e007      	b.n	8009b16 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	699a      	ldr	r2, [r3, #24]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f042 0208 	orr.w	r2, r2, #8
 8009b14:	619a      	str	r2, [r3, #24]
}
 8009b16:	bf00      	nop
 8009b18:	3770      	adds	r7, #112	@ 0x70
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	58000c00 	.word	0x58000c00

08009b24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b0ac      	sub	sp, #176	@ 0xb0
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b32:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b5a:	2b22      	cmp	r3, #34	@ 0x22
 8009b5c:	f040 8180 	bne.w	8009e60 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b66:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b6a:	e123      	b.n	8009db4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b72:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b76:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009b7a:	b2d9      	uxtb	r1, r3
 8009b7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b86:	400a      	ands	r2, r1
 8009b88:	b2d2      	uxtb	r2, r2
 8009b8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d053      	beq.n	8009c66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d011      	beq.n	8009bee <UART_RxISR_8BIT_FIFOEN+0xca>
 8009bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be4:	f043 0201 	orr.w	r2, r3, #1
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d011      	beq.n	8009c1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00b      	beq.n	8009c1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c14:	f043 0204 	orr.w	r2, r3, #4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d011      	beq.n	8009c4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c44:	f043 0202 	orr.w	r2, r3, #2
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d006      	beq.n	8009c66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7fe fb07 	bl	800826c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f040 80a0 	bne.w	8009db4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c98:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009c9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e4      	bne.n	8009c74 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3308      	adds	r3, #8
 8009cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009cba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cbc:	4b6e      	ldr	r3, [pc, #440]	@ (8009e78 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009cce:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009cd0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009cd4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009cd6:	e841 2300 	strex	r3, r2, [r1]
 8009cda:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009cdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e3      	bne.n	8009caa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a60      	ldr	r2, [pc, #384]	@ (8009e7c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d021      	beq.n	8009d44 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01a      	beq.n	8009d44 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d32:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e4      	bne.n	8009d0e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d130      	bne.n	8009dae <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d62:	f023 0310 	bic.w	r3, r3, #16
 8009d66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e4      	bne.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	f003 0310 	and.w	r3, r3, #16
 8009d92:	2b10      	cmp	r3, #16
 8009d94:	d103      	bne.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2210      	movs	r2, #16
 8009d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7fe fa6a 	bl	8008280 <HAL_UARTEx_RxEventCallback>
 8009dac:	e002      	b.n	8009db4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7f7 f80a 	bl	8000dc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009db4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d006      	beq.n	8009dca <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f47f aed1 	bne.w	8009b6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d049      	beq.n	8009e70 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009de2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d242      	bcs.n	8009e70 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3308      	adds	r3, #8
 8009df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e3      	bne.n	8009dea <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a16      	ldr	r2, [pc, #88]	@ (8009e80 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009e26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f043 0320 	orr.w	r3, r3, #32
 8009e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e4a:	61bb      	str	r3, [r7, #24]
 8009e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6979      	ldr	r1, [r7, #20]
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	613b      	str	r3, [r7, #16]
   return(result);
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e4      	bne.n	8009e28 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e5e:	e007      	b.n	8009e70 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0208 	orr.w	r2, r2, #8
 8009e6e:	619a      	str	r2, [r3, #24]
}
 8009e70:	bf00      	nop
 8009e72:	37b0      	adds	r7, #176	@ 0xb0
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	effffffe 	.word	0xeffffffe
 8009e7c:	58000c00 	.word	0x58000c00
 8009e80:	080097b5 	.word	0x080097b5

08009e84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b0ae      	sub	sp, #184	@ 0xb8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e92:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009eba:	2b22      	cmp	r3, #34	@ 0x22
 8009ebc:	f040 8184 	bne.w	800a1c8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ec6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eca:	e127      	b.n	800a11c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009ede:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009ee2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009eee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ef4:	1c9a      	adds	r2, r3, #2
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f1a:	f003 0307 	and.w	r3, r3, #7
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d053      	beq.n	8009fca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d011      	beq.n	8009f52 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00b      	beq.n	8009f52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f48:	f043 0201 	orr.w	r2, r3, #1
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d011      	beq.n	8009f82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f78:	f043 0204 	orr.w	r2, r3, #4
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d011      	beq.n	8009fb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00b      	beq.n	8009fb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2204      	movs	r2, #4
 8009fa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fa8:	f043 0202 	orr.w	r2, r3, #2
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d006      	beq.n	8009fca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7fe f955 	bl	800826c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f040 80a2 	bne.w	800a11c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009fe6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ffe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a002:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a00c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e2      	bne.n	8009fd8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a022:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a024:	4b6e      	ldr	r3, [pc, #440]	@ (800a1e0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a026:	4013      	ands	r3, r2
 800a028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3308      	adds	r3, #8
 800a032:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a036:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a038:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a03c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e3      	bne.n	800a012 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a60      	ldr	r2, [pc, #384]	@ (800a1e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d021      	beq.n	800a0ac <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d01a      	beq.n	800a0ac <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a07e:	e853 3f00 	ldrex	r3, [r3]
 800a082:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a086:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a08a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	461a      	mov	r2, r3
 800a094:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a098:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a09a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a09e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0a0:	e841 2300 	strex	r3, r2, [r1]
 800a0a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e4      	bne.n	800a076 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d130      	bne.n	800a116 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ca:	f023 0310 	bic.w	r3, r3, #16
 800a0ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e4      	bne.n	800a0ba <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0310 	and.w	r3, r3, #16
 800a0fa:	2b10      	cmp	r3, #16
 800a0fc:	d103      	bne.n	800a106 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7fe f8b6 	bl	8008280 <HAL_UARTEx_RxEventCallback>
 800a114:	e002      	b.n	800a11c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f6 fe56 	bl	8000dc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a11c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a120:	2b00      	cmp	r3, #0
 800a122:	d006      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a128:	f003 0320 	and.w	r3, r3, #32
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f47f aecd 	bne.w	8009ecc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a138:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a13c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a140:	2b00      	cmp	r3, #0
 800a142:	d049      	beq.n	800a1d8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a14a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a14e:	429a      	cmp	r2, r3
 800a150:	d242      	bcs.n	800a1d8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	623b      	str	r3, [r7, #32]
   return(result);
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3308      	adds	r3, #8
 800a172:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a176:	633a      	str	r2, [r7, #48]	@ 0x30
 800a178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a17c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e3      	bne.n	800a152 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a16      	ldr	r2, [pc, #88]	@ (800a1e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a18e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f043 0320 	orr.w	r3, r3, #32
 800a1a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1b2:	61fb      	str	r3, [r7, #28]
 800a1b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	69b9      	ldr	r1, [r7, #24]
 800a1b8:	69fa      	ldr	r2, [r7, #28]
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e4      	bne.n	800a190 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1c6:	e007      	b.n	800a1d8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0208 	orr.w	r2, r2, #8
 800a1d6:	619a      	str	r2, [r3, #24]
}
 800a1d8:	bf00      	nop
 800a1da:	37b8      	adds	r7, #184	@ 0xb8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	effffffe 	.word	0xeffffffe
 800a1e4:	58000c00 	.word	0x58000c00
 800a1e8:	0800996d 	.word	0x0800996d

0800a1ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a236:	2b01      	cmp	r3, #1
 800a238:	d101      	bne.n	800a23e <HAL_UARTEx_DisableFifoMode+0x16>
 800a23a:	2302      	movs	r3, #2
 800a23c:	e027      	b.n	800a28e <HAL_UARTEx_DisableFifoMode+0x66>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2224      	movs	r2, #36	@ 0x24
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a26c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e02d      	b.n	800a30e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2224      	movs	r2, #36	@ 0x24
 800a2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0201 	bic.w	r2, r2, #1
 800a2d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f850 	bl	800a394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e02d      	b.n	800a38a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2224      	movs	r2, #36	@ 0x24
 800a33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0201 	bic.w	r2, r2, #1
 800a354:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f812 	bl	800a394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d108      	bne.n	800a3b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3b4:	e031      	b.n	800a41a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3b6:	2310      	movs	r3, #16
 800a3b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3ba:	2310      	movs	r3, #16
 800a3bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	0e5b      	lsrs	r3, r3, #25
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	f003 0307 	and.w	r3, r3, #7
 800a3cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	0f5b      	lsrs	r3, r3, #29
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	f003 0307 	and.w	r3, r3, #7
 800a3dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3de:	7bbb      	ldrb	r3, [r7, #14]
 800a3e0:	7b3a      	ldrb	r2, [r7, #12]
 800a3e2:	4911      	ldr	r1, [pc, #68]	@ (800a428 <UARTEx_SetNbDataToProcess+0x94>)
 800a3e4:	5c8a      	ldrb	r2, [r1, r2]
 800a3e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3ea:	7b3a      	ldrb	r2, [r7, #12]
 800a3ec:	490f      	ldr	r1, [pc, #60]	@ (800a42c <UARTEx_SetNbDataToProcess+0x98>)
 800a3ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	7b7a      	ldrb	r2, [r7, #13]
 800a400:	4909      	ldr	r1, [pc, #36]	@ (800a428 <UARTEx_SetNbDataToProcess+0x94>)
 800a402:	5c8a      	ldrb	r2, [r1, r2]
 800a404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a408:	7b7a      	ldrb	r2, [r7, #13]
 800a40a:	4908      	ldr	r1, [pc, #32]	@ (800a42c <UARTEx_SetNbDataToProcess+0x98>)
 800a40c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a40e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a412:	b29a      	uxth	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a41a:	bf00      	nop
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	0800b464 	.word	0x0800b464
 800a42c:	0800b46c 	.word	0x0800b46c

0800a430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a430:	b084      	sub	sp, #16
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	f107 001c 	add.w	r0, r7, #28
 800a43e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a442:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a446:	2b01      	cmp	r3, #1
 800a448:	d121      	bne.n	800a48e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	4b2c      	ldr	r3, [pc, #176]	@ (800a50c <USB_CoreInit+0xdc>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a46e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a472:	2b01      	cmp	r3, #1
 800a474:	d105      	bne.n	800a482 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 faaa 	bl	800a9dc <USB_CoreReset>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
 800a48c:	e01b      	b.n	800a4c6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fa9e 	bl	800a9dc <USB_CoreReset>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a4a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d106      	bne.n	800a4ba <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a4b8:	e005      	b.n	800a4c6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a4c6:	7fbb      	ldrb	r3, [r7, #30]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d116      	bne.n	800a4fa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4da:	4b0d      	ldr	r3, [pc, #52]	@ (800a510 <USB_CoreInit+0xe0>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f043 0206 	orr.w	r2, r3, #6
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f043 0220 	orr.w	r2, r3, #32
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a506:	b004      	add	sp, #16
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	ffbdffbf 	.word	0xffbdffbf
 800a510:	03ee0000 	.word	0x03ee0000

0800a514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f023 0201 	bic.w	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d115      	bne.n	800a584 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a564:	200a      	movs	r0, #10
 800a566:	f7f7 f88d 	bl	8001684 <HAL_Delay>
      ms += 10U;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	330a      	adds	r3, #10
 800a56e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fa25 	bl	800a9c0 <USB_GetMode>
 800a576:	4603      	mov	r3, r0
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d01e      	beq.n	800a5ba <USB_SetCurrentMode+0x84>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a580:	d9f0      	bls.n	800a564 <USB_SetCurrentMode+0x2e>
 800a582:	e01a      	b.n	800a5ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d115      	bne.n	800a5b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a596:	200a      	movs	r0, #10
 800a598:	f7f7 f874 	bl	8001684 <HAL_Delay>
      ms += 10U;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	330a      	adds	r3, #10
 800a5a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fa0c 	bl	800a9c0 <USB_GetMode>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <USB_SetCurrentMode+0x84>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5b2:	d9f0      	bls.n	800a596 <USB_SetCurrentMode+0x60>
 800a5b4:	e001      	b.n	800a5ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e005      	b.n	800a5c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2bc8      	cmp	r3, #200	@ 0xc8
 800a5be:	d101      	bne.n	800a5c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e000      	b.n	800a5c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a5de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	e009      	b.n	800a604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3340      	adds	r3, #64	@ 0x40
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3301      	adds	r3, #1
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b0e      	cmp	r3, #14
 800a608:	d9f2      	bls.n	800a5f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a60a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d11c      	bne.n	800a64c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a620:	f043 0302 	orr.w	r3, r3, #2
 800a624:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	e005      	b.n	800a658 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a65e:	461a      	mov	r2, r3
 800a660:	2300      	movs	r3, #0
 800a662:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a664:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d10d      	bne.n	800a688 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a674:	2100      	movs	r1, #0
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f968 	bl	800a94c <USB_SetDevSpeed>
 800a67c:	e008      	b.n	800a690 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a67e:	2101      	movs	r1, #1
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f963 	bl	800a94c <USB_SetDevSpeed>
 800a686:	e003      	b.n	800a690 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a688:	2103      	movs	r1, #3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f95e 	bl	800a94c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a690:	2110      	movs	r1, #16
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f8fa 	bl	800a88c <USB_FlushTxFifo>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f924 	bl	800a8f0 <USB_FlushRxFifo>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	e043      	b.n	800a764 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6f2:	d118      	bne.n	800a726 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a706:	461a      	mov	r2, r3
 800a708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	e013      	b.n	800a738 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71c:	461a      	mov	r2, r3
 800a71e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	e008      	b.n	800a738 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a732:	461a      	mov	r2, r3
 800a734:	2300      	movs	r3, #0
 800a736:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a744:	461a      	mov	r2, r3
 800a746:	2300      	movs	r3, #0
 800a748:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a756:	461a      	mov	r2, r3
 800a758:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a75c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3301      	adds	r3, #1
 800a762:	613b      	str	r3, [r7, #16]
 800a764:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a768:	461a      	mov	r2, r3
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d3b5      	bcc.n	800a6dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a770:	2300      	movs	r3, #0
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	e043      	b.n	800a7fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a78c:	d118      	bne.n	800a7c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e013      	b.n	800a7d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	e008      	b.n	800a7d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a7f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a802:	461a      	mov	r2, r3
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4293      	cmp	r3, r2
 800a808:	d3b5      	bcc.n	800a776 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a81c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a82a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a82c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f043 0210 	orr.w	r2, r3, #16
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699a      	ldr	r2, [r3, #24]
 800a844:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <USB_DevInit+0x2b4>)
 800a846:	4313      	orrs	r3, r2
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a84c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f043 0208 	orr.w	r2, r3, #8
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a860:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a864:	2b01      	cmp	r3, #1
 800a866:	d105      	bne.n	800a874 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <USB_DevInit+0x2b8>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a880:	b004      	add	sp, #16
 800a882:	4770      	bx	lr
 800a884:	803c3800 	.word	0x803c3800
 800a888:	40000004 	.word	0x40000004

0800a88c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8a6:	d901      	bls.n	800a8ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e01b      	b.n	800a8e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	daf2      	bge.n	800a89a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	019b      	lsls	r3, r3, #6
 800a8bc:	f043 0220 	orr.w	r2, r3, #32
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8d0:	d901      	bls.n	800a8d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e006      	b.n	800a8e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d0f0      	beq.n	800a8c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a908:	d901      	bls.n	800a90e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e018      	b.n	800a940 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	daf2      	bge.n	800a8fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2210      	movs	r2, #16
 800a91e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3301      	adds	r3, #1
 800a924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a92c:	d901      	bls.n	800a932 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e006      	b.n	800a940 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f003 0310 	and.w	r3, r3, #16
 800a93a:	2b10      	cmp	r3, #16
 800a93c:	d0f0      	beq.n	800a920 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	68f9      	ldr	r1, [r7, #12]
 800a968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a96c:	4313      	orrs	r3, r2
 800a96e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a998:	f023 0303 	bic.w	r3, r3, #3
 800a99c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9ac:	f043 0302 	orr.w	r3, r3, #2
 800a9b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	f003 0301 	and.w	r3, r3, #1
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9f4:	d901      	bls.n	800a9fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e01b      	b.n	800aa32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	daf2      	bge.n	800a9e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f043 0201 	orr.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3301      	adds	r3, #1
 800aa16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa1e:	d901      	bls.n	800aa24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e006      	b.n	800aa32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d0f0      	beq.n	800aa12 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
	...

0800aa40 <sniprintf>:
 800aa40:	b40c      	push	{r2, r3}
 800aa42:	b530      	push	{r4, r5, lr}
 800aa44:	4b17      	ldr	r3, [pc, #92]	@ (800aaa4 <sniprintf+0x64>)
 800aa46:	1e0c      	subs	r4, r1, #0
 800aa48:	681d      	ldr	r5, [r3, #0]
 800aa4a:	b09d      	sub	sp, #116	@ 0x74
 800aa4c:	da08      	bge.n	800aa60 <sniprintf+0x20>
 800aa4e:	238b      	movs	r3, #139	@ 0x8b
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	b01d      	add	sp, #116	@ 0x74
 800aa58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa5c:	b002      	add	sp, #8
 800aa5e:	4770      	bx	lr
 800aa60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aa64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa68:	bf14      	ite	ne
 800aa6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa6e:	4623      	moveq	r3, r4
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa78:	9002      	str	r0, [sp, #8]
 800aa7a:	9006      	str	r0, [sp, #24]
 800aa7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa82:	ab21      	add	r3, sp, #132	@ 0x84
 800aa84:	a902      	add	r1, sp, #8
 800aa86:	4628      	mov	r0, r5
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	f000 f9a7 	bl	800addc <_svfiprintf_r>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	bfbc      	itt	lt
 800aa92:	238b      	movlt	r3, #139	@ 0x8b
 800aa94:	602b      	strlt	r3, [r5, #0]
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	d0dd      	beq.n	800aa56 <sniprintf+0x16>
 800aa9a:	9b02      	ldr	r3, [sp, #8]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	e7d9      	b.n	800aa56 <sniprintf+0x16>
 800aaa2:	bf00      	nop
 800aaa4:	24000014 	.word	0x24000014

0800aaa8 <memset>:
 800aaa8:	4402      	add	r2, r0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d100      	bne.n	800aab2 <memset+0xa>
 800aab0:	4770      	bx	lr
 800aab2:	f803 1b01 	strb.w	r1, [r3], #1
 800aab6:	e7f9      	b.n	800aaac <memset+0x4>

0800aab8 <strncmp>:
 800aab8:	b510      	push	{r4, lr}
 800aaba:	b16a      	cbz	r2, 800aad8 <strncmp+0x20>
 800aabc:	3901      	subs	r1, #1
 800aabe:	1884      	adds	r4, r0, r2
 800aac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d103      	bne.n	800aad4 <strncmp+0x1c>
 800aacc:	42a0      	cmp	r0, r4
 800aace:	d001      	beq.n	800aad4 <strncmp+0x1c>
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	d1f5      	bne.n	800aac0 <strncmp+0x8>
 800aad4:	1ad0      	subs	r0, r2, r3
 800aad6:	bd10      	pop	{r4, pc}
 800aad8:	4610      	mov	r0, r2
 800aada:	e7fc      	b.n	800aad6 <strncmp+0x1e>

0800aadc <__errno>:
 800aadc:	4b01      	ldr	r3, [pc, #4]	@ (800aae4 <__errno+0x8>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	24000014 	.word	0x24000014

0800aae8 <__libc_init_array>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	4d0d      	ldr	r5, [pc, #52]	@ (800ab20 <__libc_init_array+0x38>)
 800aaec:	4c0d      	ldr	r4, [pc, #52]	@ (800ab24 <__libc_init_array+0x3c>)
 800aaee:	1b64      	subs	r4, r4, r5
 800aaf0:	10a4      	asrs	r4, r4, #2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	42a6      	cmp	r6, r4
 800aaf6:	d109      	bne.n	800ab0c <__libc_init_array+0x24>
 800aaf8:	4d0b      	ldr	r5, [pc, #44]	@ (800ab28 <__libc_init_array+0x40>)
 800aafa:	4c0c      	ldr	r4, [pc, #48]	@ (800ab2c <__libc_init_array+0x44>)
 800aafc:	f000 fc66 	bl	800b3cc <_init>
 800ab00:	1b64      	subs	r4, r4, r5
 800ab02:	10a4      	asrs	r4, r4, #2
 800ab04:	2600      	movs	r6, #0
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	d105      	bne.n	800ab16 <__libc_init_array+0x2e>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab10:	4798      	blx	r3
 800ab12:	3601      	adds	r6, #1
 800ab14:	e7ee      	b.n	800aaf4 <__libc_init_array+0xc>
 800ab16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1a:	4798      	blx	r3
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	e7f2      	b.n	800ab06 <__libc_init_array+0x1e>
 800ab20:	0800b4b0 	.word	0x0800b4b0
 800ab24:	0800b4b0 	.word	0x0800b4b0
 800ab28:	0800b4b0 	.word	0x0800b4b0
 800ab2c:	0800b4b4 	.word	0x0800b4b4

0800ab30 <__retarget_lock_acquire_recursive>:
 800ab30:	4770      	bx	lr

0800ab32 <__retarget_lock_release_recursive>:
 800ab32:	4770      	bx	lr

0800ab34 <_free_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4605      	mov	r5, r0
 800ab38:	2900      	cmp	r1, #0
 800ab3a:	d041      	beq.n	800abc0 <_free_r+0x8c>
 800ab3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab40:	1f0c      	subs	r4, r1, #4
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	bfb8      	it	lt
 800ab46:	18e4      	addlt	r4, r4, r3
 800ab48:	f000 f8e0 	bl	800ad0c <__malloc_lock>
 800ab4c:	4a1d      	ldr	r2, [pc, #116]	@ (800abc4 <_free_r+0x90>)
 800ab4e:	6813      	ldr	r3, [r2, #0]
 800ab50:	b933      	cbnz	r3, 800ab60 <_free_r+0x2c>
 800ab52:	6063      	str	r3, [r4, #4]
 800ab54:	6014      	str	r4, [r2, #0]
 800ab56:	4628      	mov	r0, r5
 800ab58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab5c:	f000 b8dc 	b.w	800ad18 <__malloc_unlock>
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	d908      	bls.n	800ab76 <_free_r+0x42>
 800ab64:	6820      	ldr	r0, [r4, #0]
 800ab66:	1821      	adds	r1, r4, r0
 800ab68:	428b      	cmp	r3, r1
 800ab6a:	bf01      	itttt	eq
 800ab6c:	6819      	ldreq	r1, [r3, #0]
 800ab6e:	685b      	ldreq	r3, [r3, #4]
 800ab70:	1809      	addeq	r1, r1, r0
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	e7ed      	b.n	800ab52 <_free_r+0x1e>
 800ab76:	461a      	mov	r2, r3
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	b10b      	cbz	r3, 800ab80 <_free_r+0x4c>
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d9fa      	bls.n	800ab76 <_free_r+0x42>
 800ab80:	6811      	ldr	r1, [r2, #0]
 800ab82:	1850      	adds	r0, r2, r1
 800ab84:	42a0      	cmp	r0, r4
 800ab86:	d10b      	bne.n	800aba0 <_free_r+0x6c>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	4401      	add	r1, r0
 800ab8c:	1850      	adds	r0, r2, r1
 800ab8e:	4283      	cmp	r3, r0
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	d1e0      	bne.n	800ab56 <_free_r+0x22>
 800ab94:	6818      	ldr	r0, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	6053      	str	r3, [r2, #4]
 800ab9a:	4408      	add	r0, r1
 800ab9c:	6010      	str	r0, [r2, #0]
 800ab9e:	e7da      	b.n	800ab56 <_free_r+0x22>
 800aba0:	d902      	bls.n	800aba8 <_free_r+0x74>
 800aba2:	230c      	movs	r3, #12
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	e7d6      	b.n	800ab56 <_free_r+0x22>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	1821      	adds	r1, r4, r0
 800abac:	428b      	cmp	r3, r1
 800abae:	bf04      	itt	eq
 800abb0:	6819      	ldreq	r1, [r3, #0]
 800abb2:	685b      	ldreq	r3, [r3, #4]
 800abb4:	6063      	str	r3, [r4, #4]
 800abb6:	bf04      	itt	eq
 800abb8:	1809      	addeq	r1, r1, r0
 800abba:	6021      	streq	r1, [r4, #0]
 800abbc:	6054      	str	r4, [r2, #4]
 800abbe:	e7ca      	b.n	800ab56 <_free_r+0x22>
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop
 800abc4:	24000954 	.word	0x24000954

0800abc8 <sbrk_aligned>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	4e0f      	ldr	r6, [pc, #60]	@ (800ac08 <sbrk_aligned+0x40>)
 800abcc:	460c      	mov	r4, r1
 800abce:	6831      	ldr	r1, [r6, #0]
 800abd0:	4605      	mov	r5, r0
 800abd2:	b911      	cbnz	r1, 800abda <sbrk_aligned+0x12>
 800abd4:	f000 fba6 	bl	800b324 <_sbrk_r>
 800abd8:	6030      	str	r0, [r6, #0]
 800abda:	4621      	mov	r1, r4
 800abdc:	4628      	mov	r0, r5
 800abde:	f000 fba1 	bl	800b324 <_sbrk_r>
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	d103      	bne.n	800abee <sbrk_aligned+0x26>
 800abe6:	f04f 34ff 	mov.w	r4, #4294967295
 800abea:	4620      	mov	r0, r4
 800abec:	bd70      	pop	{r4, r5, r6, pc}
 800abee:	1cc4      	adds	r4, r0, #3
 800abf0:	f024 0403 	bic.w	r4, r4, #3
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d0f8      	beq.n	800abea <sbrk_aligned+0x22>
 800abf8:	1a21      	subs	r1, r4, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 fb92 	bl	800b324 <_sbrk_r>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d1f2      	bne.n	800abea <sbrk_aligned+0x22>
 800ac04:	e7ef      	b.n	800abe6 <sbrk_aligned+0x1e>
 800ac06:	bf00      	nop
 800ac08:	24000950 	.word	0x24000950

0800ac0c <_malloc_r>:
 800ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	1ccd      	adds	r5, r1, #3
 800ac12:	f025 0503 	bic.w	r5, r5, #3
 800ac16:	3508      	adds	r5, #8
 800ac18:	2d0c      	cmp	r5, #12
 800ac1a:	bf38      	it	cc
 800ac1c:	250c      	movcc	r5, #12
 800ac1e:	2d00      	cmp	r5, #0
 800ac20:	4606      	mov	r6, r0
 800ac22:	db01      	blt.n	800ac28 <_malloc_r+0x1c>
 800ac24:	42a9      	cmp	r1, r5
 800ac26:	d904      	bls.n	800ac32 <_malloc_r+0x26>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	6033      	str	r3, [r6, #0]
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad08 <_malloc_r+0xfc>
 800ac36:	f000 f869 	bl	800ad0c <__malloc_lock>
 800ac3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac3e:	461c      	mov	r4, r3
 800ac40:	bb44      	cbnz	r4, 800ac94 <_malloc_r+0x88>
 800ac42:	4629      	mov	r1, r5
 800ac44:	4630      	mov	r0, r6
 800ac46:	f7ff ffbf 	bl	800abc8 <sbrk_aligned>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	d158      	bne.n	800ad02 <_malloc_r+0xf6>
 800ac50:	f8d8 4000 	ldr.w	r4, [r8]
 800ac54:	4627      	mov	r7, r4
 800ac56:	2f00      	cmp	r7, #0
 800ac58:	d143      	bne.n	800ace2 <_malloc_r+0xd6>
 800ac5a:	2c00      	cmp	r4, #0
 800ac5c:	d04b      	beq.n	800acf6 <_malloc_r+0xea>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	4639      	mov	r1, r7
 800ac62:	4630      	mov	r0, r6
 800ac64:	eb04 0903 	add.w	r9, r4, r3
 800ac68:	f000 fb5c 	bl	800b324 <_sbrk_r>
 800ac6c:	4581      	cmp	r9, r0
 800ac6e:	d142      	bne.n	800acf6 <_malloc_r+0xea>
 800ac70:	6821      	ldr	r1, [r4, #0]
 800ac72:	1a6d      	subs	r5, r5, r1
 800ac74:	4629      	mov	r1, r5
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7ff ffa6 	bl	800abc8 <sbrk_aligned>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d03a      	beq.n	800acf6 <_malloc_r+0xea>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	442b      	add	r3, r5
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	f8d8 3000 	ldr.w	r3, [r8]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	bb62      	cbnz	r2, 800ace8 <_malloc_r+0xdc>
 800ac8e:	f8c8 7000 	str.w	r7, [r8]
 800ac92:	e00f      	b.n	800acb4 <_malloc_r+0xa8>
 800ac94:	6822      	ldr	r2, [r4, #0]
 800ac96:	1b52      	subs	r2, r2, r5
 800ac98:	d420      	bmi.n	800acdc <_malloc_r+0xd0>
 800ac9a:	2a0b      	cmp	r2, #11
 800ac9c:	d917      	bls.n	800acce <_malloc_r+0xc2>
 800ac9e:	1961      	adds	r1, r4, r5
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	6025      	str	r5, [r4, #0]
 800aca4:	bf18      	it	ne
 800aca6:	6059      	strne	r1, [r3, #4]
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	bf08      	it	eq
 800acac:	f8c8 1000 	streq.w	r1, [r8]
 800acb0:	5162      	str	r2, [r4, r5]
 800acb2:	604b      	str	r3, [r1, #4]
 800acb4:	4630      	mov	r0, r6
 800acb6:	f000 f82f 	bl	800ad18 <__malloc_unlock>
 800acba:	f104 000b 	add.w	r0, r4, #11
 800acbe:	1d23      	adds	r3, r4, #4
 800acc0:	f020 0007 	bic.w	r0, r0, #7
 800acc4:	1ac2      	subs	r2, r0, r3
 800acc6:	bf1c      	itt	ne
 800acc8:	1a1b      	subne	r3, r3, r0
 800acca:	50a3      	strne	r3, [r4, r2]
 800accc:	e7af      	b.n	800ac2e <_malloc_r+0x22>
 800acce:	6862      	ldr	r2, [r4, #4]
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	bf0c      	ite	eq
 800acd4:	f8c8 2000 	streq.w	r2, [r8]
 800acd8:	605a      	strne	r2, [r3, #4]
 800acda:	e7eb      	b.n	800acb4 <_malloc_r+0xa8>
 800acdc:	4623      	mov	r3, r4
 800acde:	6864      	ldr	r4, [r4, #4]
 800ace0:	e7ae      	b.n	800ac40 <_malloc_r+0x34>
 800ace2:	463c      	mov	r4, r7
 800ace4:	687f      	ldr	r7, [r7, #4]
 800ace6:	e7b6      	b.n	800ac56 <_malloc_r+0x4a>
 800ace8:	461a      	mov	r2, r3
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	42a3      	cmp	r3, r4
 800acee:	d1fb      	bne.n	800ace8 <_malloc_r+0xdc>
 800acf0:	2300      	movs	r3, #0
 800acf2:	6053      	str	r3, [r2, #4]
 800acf4:	e7de      	b.n	800acb4 <_malloc_r+0xa8>
 800acf6:	230c      	movs	r3, #12
 800acf8:	6033      	str	r3, [r6, #0]
 800acfa:	4630      	mov	r0, r6
 800acfc:	f000 f80c 	bl	800ad18 <__malloc_unlock>
 800ad00:	e794      	b.n	800ac2c <_malloc_r+0x20>
 800ad02:	6005      	str	r5, [r0, #0]
 800ad04:	e7d6      	b.n	800acb4 <_malloc_r+0xa8>
 800ad06:	bf00      	nop
 800ad08:	24000954 	.word	0x24000954

0800ad0c <__malloc_lock>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	@ (800ad14 <__malloc_lock+0x8>)
 800ad0e:	f7ff bf0f 	b.w	800ab30 <__retarget_lock_acquire_recursive>
 800ad12:	bf00      	nop
 800ad14:	2400094c 	.word	0x2400094c

0800ad18 <__malloc_unlock>:
 800ad18:	4801      	ldr	r0, [pc, #4]	@ (800ad20 <__malloc_unlock+0x8>)
 800ad1a:	f7ff bf0a 	b.w	800ab32 <__retarget_lock_release_recursive>
 800ad1e:	bf00      	nop
 800ad20:	2400094c 	.word	0x2400094c

0800ad24 <__ssputs_r>:
 800ad24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad28:	688e      	ldr	r6, [r1, #8]
 800ad2a:	461f      	mov	r7, r3
 800ad2c:	42be      	cmp	r6, r7
 800ad2e:	680b      	ldr	r3, [r1, #0]
 800ad30:	4682      	mov	sl, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	4690      	mov	r8, r2
 800ad36:	d82d      	bhi.n	800ad94 <__ssputs_r+0x70>
 800ad38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad40:	d026      	beq.n	800ad90 <__ssputs_r+0x6c>
 800ad42:	6965      	ldr	r5, [r4, #20]
 800ad44:	6909      	ldr	r1, [r1, #16]
 800ad46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad4a:	eba3 0901 	sub.w	r9, r3, r1
 800ad4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad52:	1c7b      	adds	r3, r7, #1
 800ad54:	444b      	add	r3, r9
 800ad56:	106d      	asrs	r5, r5, #1
 800ad58:	429d      	cmp	r5, r3
 800ad5a:	bf38      	it	cc
 800ad5c:	461d      	movcc	r5, r3
 800ad5e:	0553      	lsls	r3, r2, #21
 800ad60:	d527      	bpl.n	800adb2 <__ssputs_r+0x8e>
 800ad62:	4629      	mov	r1, r5
 800ad64:	f7ff ff52 	bl	800ac0c <_malloc_r>
 800ad68:	4606      	mov	r6, r0
 800ad6a:	b360      	cbz	r0, 800adc6 <__ssputs_r+0xa2>
 800ad6c:	6921      	ldr	r1, [r4, #16]
 800ad6e:	464a      	mov	r2, r9
 800ad70:	f000 fae8 	bl	800b344 <memcpy>
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad7e:	81a3      	strh	r3, [r4, #12]
 800ad80:	6126      	str	r6, [r4, #16]
 800ad82:	6165      	str	r5, [r4, #20]
 800ad84:	444e      	add	r6, r9
 800ad86:	eba5 0509 	sub.w	r5, r5, r9
 800ad8a:	6026      	str	r6, [r4, #0]
 800ad8c:	60a5      	str	r5, [r4, #8]
 800ad8e:	463e      	mov	r6, r7
 800ad90:	42be      	cmp	r6, r7
 800ad92:	d900      	bls.n	800ad96 <__ssputs_r+0x72>
 800ad94:	463e      	mov	r6, r7
 800ad96:	6820      	ldr	r0, [r4, #0]
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4641      	mov	r1, r8
 800ad9c:	f000 faa8 	bl	800b2f0 <memmove>
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	1b9b      	subs	r3, r3, r6
 800ada4:	60a3      	str	r3, [r4, #8]
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	4433      	add	r3, r6
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	2000      	movs	r0, #0
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	462a      	mov	r2, r5
 800adb4:	f000 fad4 	bl	800b360 <_realloc_r>
 800adb8:	4606      	mov	r6, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	d1e0      	bne.n	800ad80 <__ssputs_r+0x5c>
 800adbe:	6921      	ldr	r1, [r4, #16]
 800adc0:	4650      	mov	r0, sl
 800adc2:	f7ff feb7 	bl	800ab34 <_free_r>
 800adc6:	230c      	movs	r3, #12
 800adc8:	f8ca 3000 	str.w	r3, [sl]
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	f04f 30ff 	mov.w	r0, #4294967295
 800add8:	e7e9      	b.n	800adae <__ssputs_r+0x8a>
	...

0800addc <_svfiprintf_r>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	4698      	mov	r8, r3
 800ade2:	898b      	ldrh	r3, [r1, #12]
 800ade4:	061b      	lsls	r3, r3, #24
 800ade6:	b09d      	sub	sp, #116	@ 0x74
 800ade8:	4607      	mov	r7, r0
 800adea:	460d      	mov	r5, r1
 800adec:	4614      	mov	r4, r2
 800adee:	d510      	bpl.n	800ae12 <_svfiprintf_r+0x36>
 800adf0:	690b      	ldr	r3, [r1, #16]
 800adf2:	b973      	cbnz	r3, 800ae12 <_svfiprintf_r+0x36>
 800adf4:	2140      	movs	r1, #64	@ 0x40
 800adf6:	f7ff ff09 	bl	800ac0c <_malloc_r>
 800adfa:	6028      	str	r0, [r5, #0]
 800adfc:	6128      	str	r0, [r5, #16]
 800adfe:	b930      	cbnz	r0, 800ae0e <_svfiprintf_r+0x32>
 800ae00:	230c      	movs	r3, #12
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	b01d      	add	sp, #116	@ 0x74
 800ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0e:	2340      	movs	r3, #64	@ 0x40
 800ae10:	616b      	str	r3, [r5, #20]
 800ae12:	2300      	movs	r3, #0
 800ae14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae16:	2320      	movs	r3, #32
 800ae18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae20:	2330      	movs	r3, #48	@ 0x30
 800ae22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afc0 <_svfiprintf_r+0x1e4>
 800ae26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae2a:	f04f 0901 	mov.w	r9, #1
 800ae2e:	4623      	mov	r3, r4
 800ae30:	469a      	mov	sl, r3
 800ae32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae36:	b10a      	cbz	r2, 800ae3c <_svfiprintf_r+0x60>
 800ae38:	2a25      	cmp	r2, #37	@ 0x25
 800ae3a:	d1f9      	bne.n	800ae30 <_svfiprintf_r+0x54>
 800ae3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae40:	d00b      	beq.n	800ae5a <_svfiprintf_r+0x7e>
 800ae42:	465b      	mov	r3, fp
 800ae44:	4622      	mov	r2, r4
 800ae46:	4629      	mov	r1, r5
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff ff6b 	bl	800ad24 <__ssputs_r>
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f000 80a7 	beq.w	800afa2 <_svfiprintf_r+0x1c6>
 800ae54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae56:	445a      	add	r2, fp
 800ae58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 809f 	beq.w	800afa2 <_svfiprintf_r+0x1c6>
 800ae64:	2300      	movs	r3, #0
 800ae66:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae6e:	f10a 0a01 	add.w	sl, sl, #1
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	9307      	str	r3, [sp, #28]
 800ae76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae7c:	4654      	mov	r4, sl
 800ae7e:	2205      	movs	r2, #5
 800ae80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae84:	484e      	ldr	r0, [pc, #312]	@ (800afc0 <_svfiprintf_r+0x1e4>)
 800ae86:	f7f5 fa33 	bl	80002f0 <memchr>
 800ae8a:	9a04      	ldr	r2, [sp, #16]
 800ae8c:	b9d8      	cbnz	r0, 800aec6 <_svfiprintf_r+0xea>
 800ae8e:	06d0      	lsls	r0, r2, #27
 800ae90:	bf44      	itt	mi
 800ae92:	2320      	movmi	r3, #32
 800ae94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae98:	0711      	lsls	r1, r2, #28
 800ae9a:	bf44      	itt	mi
 800ae9c:	232b      	movmi	r3, #43	@ 0x2b
 800ae9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aea2:	f89a 3000 	ldrb.w	r3, [sl]
 800aea6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aea8:	d015      	beq.n	800aed6 <_svfiprintf_r+0xfa>
 800aeaa:	9a07      	ldr	r2, [sp, #28]
 800aeac:	4654      	mov	r4, sl
 800aeae:	2000      	movs	r0, #0
 800aeb0:	f04f 0c0a 	mov.w	ip, #10
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeba:	3b30      	subs	r3, #48	@ 0x30
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d94b      	bls.n	800af58 <_svfiprintf_r+0x17c>
 800aec0:	b1b0      	cbz	r0, 800aef0 <_svfiprintf_r+0x114>
 800aec2:	9207      	str	r2, [sp, #28]
 800aec4:	e014      	b.n	800aef0 <_svfiprintf_r+0x114>
 800aec6:	eba0 0308 	sub.w	r3, r0, r8
 800aeca:	fa09 f303 	lsl.w	r3, r9, r3
 800aece:	4313      	orrs	r3, r2
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	46a2      	mov	sl, r4
 800aed4:	e7d2      	b.n	800ae7c <_svfiprintf_r+0xa0>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	1d19      	adds	r1, r3, #4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	9103      	str	r1, [sp, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	bfbb      	ittet	lt
 800aee2:	425b      	neglt	r3, r3
 800aee4:	f042 0202 	orrlt.w	r2, r2, #2
 800aee8:	9307      	strge	r3, [sp, #28]
 800aeea:	9307      	strlt	r3, [sp, #28]
 800aeec:	bfb8      	it	lt
 800aeee:	9204      	strlt	r2, [sp, #16]
 800aef0:	7823      	ldrb	r3, [r4, #0]
 800aef2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aef4:	d10a      	bne.n	800af0c <_svfiprintf_r+0x130>
 800aef6:	7863      	ldrb	r3, [r4, #1]
 800aef8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aefa:	d132      	bne.n	800af62 <_svfiprintf_r+0x186>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	1d1a      	adds	r2, r3, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	9203      	str	r2, [sp, #12]
 800af04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af08:	3402      	adds	r4, #2
 800af0a:	9305      	str	r3, [sp, #20]
 800af0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afd0 <_svfiprintf_r+0x1f4>
 800af10:	7821      	ldrb	r1, [r4, #0]
 800af12:	2203      	movs	r2, #3
 800af14:	4650      	mov	r0, sl
 800af16:	f7f5 f9eb 	bl	80002f0 <memchr>
 800af1a:	b138      	cbz	r0, 800af2c <_svfiprintf_r+0x150>
 800af1c:	9b04      	ldr	r3, [sp, #16]
 800af1e:	eba0 000a 	sub.w	r0, r0, sl
 800af22:	2240      	movs	r2, #64	@ 0x40
 800af24:	4082      	lsls	r2, r0
 800af26:	4313      	orrs	r3, r2
 800af28:	3401      	adds	r4, #1
 800af2a:	9304      	str	r3, [sp, #16]
 800af2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af30:	4824      	ldr	r0, [pc, #144]	@ (800afc4 <_svfiprintf_r+0x1e8>)
 800af32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af36:	2206      	movs	r2, #6
 800af38:	f7f5 f9da 	bl	80002f0 <memchr>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d036      	beq.n	800afae <_svfiprintf_r+0x1d2>
 800af40:	4b21      	ldr	r3, [pc, #132]	@ (800afc8 <_svfiprintf_r+0x1ec>)
 800af42:	bb1b      	cbnz	r3, 800af8c <_svfiprintf_r+0x1b0>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	3307      	adds	r3, #7
 800af48:	f023 0307 	bic.w	r3, r3, #7
 800af4c:	3308      	adds	r3, #8
 800af4e:	9303      	str	r3, [sp, #12]
 800af50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af52:	4433      	add	r3, r6
 800af54:	9309      	str	r3, [sp, #36]	@ 0x24
 800af56:	e76a      	b.n	800ae2e <_svfiprintf_r+0x52>
 800af58:	fb0c 3202 	mla	r2, ip, r2, r3
 800af5c:	460c      	mov	r4, r1
 800af5e:	2001      	movs	r0, #1
 800af60:	e7a8      	b.n	800aeb4 <_svfiprintf_r+0xd8>
 800af62:	2300      	movs	r3, #0
 800af64:	3401      	adds	r4, #1
 800af66:	9305      	str	r3, [sp, #20]
 800af68:	4619      	mov	r1, r3
 800af6a:	f04f 0c0a 	mov.w	ip, #10
 800af6e:	4620      	mov	r0, r4
 800af70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af74:	3a30      	subs	r2, #48	@ 0x30
 800af76:	2a09      	cmp	r2, #9
 800af78:	d903      	bls.n	800af82 <_svfiprintf_r+0x1a6>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d0c6      	beq.n	800af0c <_svfiprintf_r+0x130>
 800af7e:	9105      	str	r1, [sp, #20]
 800af80:	e7c4      	b.n	800af0c <_svfiprintf_r+0x130>
 800af82:	fb0c 2101 	mla	r1, ip, r1, r2
 800af86:	4604      	mov	r4, r0
 800af88:	2301      	movs	r3, #1
 800af8a:	e7f0      	b.n	800af6e <_svfiprintf_r+0x192>
 800af8c:	ab03      	add	r3, sp, #12
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	462a      	mov	r2, r5
 800af92:	4b0e      	ldr	r3, [pc, #56]	@ (800afcc <_svfiprintf_r+0x1f0>)
 800af94:	a904      	add	r1, sp, #16
 800af96:	4638      	mov	r0, r7
 800af98:	f3af 8000 	nop.w
 800af9c:	1c42      	adds	r2, r0, #1
 800af9e:	4606      	mov	r6, r0
 800afa0:	d1d6      	bne.n	800af50 <_svfiprintf_r+0x174>
 800afa2:	89ab      	ldrh	r3, [r5, #12]
 800afa4:	065b      	lsls	r3, r3, #25
 800afa6:	f53f af2d 	bmi.w	800ae04 <_svfiprintf_r+0x28>
 800afaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afac:	e72c      	b.n	800ae08 <_svfiprintf_r+0x2c>
 800afae:	ab03      	add	r3, sp, #12
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	462a      	mov	r2, r5
 800afb4:	4b05      	ldr	r3, [pc, #20]	@ (800afcc <_svfiprintf_r+0x1f0>)
 800afb6:	a904      	add	r1, sp, #16
 800afb8:	4638      	mov	r0, r7
 800afba:	f000 f879 	bl	800b0b0 <_printf_i>
 800afbe:	e7ed      	b.n	800af9c <_svfiprintf_r+0x1c0>
 800afc0:	0800b474 	.word	0x0800b474
 800afc4:	0800b47e 	.word	0x0800b47e
 800afc8:	00000000 	.word	0x00000000
 800afcc:	0800ad25 	.word	0x0800ad25
 800afd0:	0800b47a 	.word	0x0800b47a

0800afd4 <_printf_common>:
 800afd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd8:	4616      	mov	r6, r2
 800afda:	4698      	mov	r8, r3
 800afdc:	688a      	ldr	r2, [r1, #8]
 800afde:	690b      	ldr	r3, [r1, #16]
 800afe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afe4:	4293      	cmp	r3, r2
 800afe6:	bfb8      	it	lt
 800afe8:	4613      	movlt	r3, r2
 800afea:	6033      	str	r3, [r6, #0]
 800afec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aff0:	4607      	mov	r7, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	b10a      	cbz	r2, 800affa <_printf_common+0x26>
 800aff6:	3301      	adds	r3, #1
 800aff8:	6033      	str	r3, [r6, #0]
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	0699      	lsls	r1, r3, #26
 800affe:	bf42      	ittt	mi
 800b000:	6833      	ldrmi	r3, [r6, #0]
 800b002:	3302      	addmi	r3, #2
 800b004:	6033      	strmi	r3, [r6, #0]
 800b006:	6825      	ldr	r5, [r4, #0]
 800b008:	f015 0506 	ands.w	r5, r5, #6
 800b00c:	d106      	bne.n	800b01c <_printf_common+0x48>
 800b00e:	f104 0a19 	add.w	sl, r4, #25
 800b012:	68e3      	ldr	r3, [r4, #12]
 800b014:	6832      	ldr	r2, [r6, #0]
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	42ab      	cmp	r3, r5
 800b01a:	dc26      	bgt.n	800b06a <_printf_common+0x96>
 800b01c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	3b00      	subs	r3, #0
 800b024:	bf18      	it	ne
 800b026:	2301      	movne	r3, #1
 800b028:	0692      	lsls	r2, r2, #26
 800b02a:	d42b      	bmi.n	800b084 <_printf_common+0xb0>
 800b02c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b030:	4641      	mov	r1, r8
 800b032:	4638      	mov	r0, r7
 800b034:	47c8      	blx	r9
 800b036:	3001      	adds	r0, #1
 800b038:	d01e      	beq.n	800b078 <_printf_common+0xa4>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	6922      	ldr	r2, [r4, #16]
 800b03e:	f003 0306 	and.w	r3, r3, #6
 800b042:	2b04      	cmp	r3, #4
 800b044:	bf02      	ittt	eq
 800b046:	68e5      	ldreq	r5, [r4, #12]
 800b048:	6833      	ldreq	r3, [r6, #0]
 800b04a:	1aed      	subeq	r5, r5, r3
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	bf0c      	ite	eq
 800b050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b054:	2500      	movne	r5, #0
 800b056:	4293      	cmp	r3, r2
 800b058:	bfc4      	itt	gt
 800b05a:	1a9b      	subgt	r3, r3, r2
 800b05c:	18ed      	addgt	r5, r5, r3
 800b05e:	2600      	movs	r6, #0
 800b060:	341a      	adds	r4, #26
 800b062:	42b5      	cmp	r5, r6
 800b064:	d11a      	bne.n	800b09c <_printf_common+0xc8>
 800b066:	2000      	movs	r0, #0
 800b068:	e008      	b.n	800b07c <_printf_common+0xa8>
 800b06a:	2301      	movs	r3, #1
 800b06c:	4652      	mov	r2, sl
 800b06e:	4641      	mov	r1, r8
 800b070:	4638      	mov	r0, r7
 800b072:	47c8      	blx	r9
 800b074:	3001      	adds	r0, #1
 800b076:	d103      	bne.n	800b080 <_printf_common+0xac>
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b080:	3501      	adds	r5, #1
 800b082:	e7c6      	b.n	800b012 <_printf_common+0x3e>
 800b084:	18e1      	adds	r1, r4, r3
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	2030      	movs	r0, #48	@ 0x30
 800b08a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b08e:	4422      	add	r2, r4
 800b090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b098:	3302      	adds	r3, #2
 800b09a:	e7c7      	b.n	800b02c <_printf_common+0x58>
 800b09c:	2301      	movs	r3, #1
 800b09e:	4622      	mov	r2, r4
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	47c8      	blx	r9
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d0e6      	beq.n	800b078 <_printf_common+0xa4>
 800b0aa:	3601      	adds	r6, #1
 800b0ac:	e7d9      	b.n	800b062 <_printf_common+0x8e>
	...

0800b0b0 <_printf_i>:
 800b0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	7e0f      	ldrb	r7, [r1, #24]
 800b0b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0b8:	2f78      	cmp	r7, #120	@ 0x78
 800b0ba:	4691      	mov	r9, r2
 800b0bc:	4680      	mov	r8, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	469a      	mov	sl, r3
 800b0c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0c6:	d807      	bhi.n	800b0d8 <_printf_i+0x28>
 800b0c8:	2f62      	cmp	r7, #98	@ 0x62
 800b0ca:	d80a      	bhi.n	800b0e2 <_printf_i+0x32>
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	f000 80d2 	beq.w	800b276 <_printf_i+0x1c6>
 800b0d2:	2f58      	cmp	r7, #88	@ 0x58
 800b0d4:	f000 80b9 	beq.w	800b24a <_printf_i+0x19a>
 800b0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0e0:	e03a      	b.n	800b158 <_printf_i+0xa8>
 800b0e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0e6:	2b15      	cmp	r3, #21
 800b0e8:	d8f6      	bhi.n	800b0d8 <_printf_i+0x28>
 800b0ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b0f0 <_printf_i+0x40>)
 800b0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0f0:	0800b149 	.word	0x0800b149
 800b0f4:	0800b15d 	.word	0x0800b15d
 800b0f8:	0800b0d9 	.word	0x0800b0d9
 800b0fc:	0800b0d9 	.word	0x0800b0d9
 800b100:	0800b0d9 	.word	0x0800b0d9
 800b104:	0800b0d9 	.word	0x0800b0d9
 800b108:	0800b15d 	.word	0x0800b15d
 800b10c:	0800b0d9 	.word	0x0800b0d9
 800b110:	0800b0d9 	.word	0x0800b0d9
 800b114:	0800b0d9 	.word	0x0800b0d9
 800b118:	0800b0d9 	.word	0x0800b0d9
 800b11c:	0800b25d 	.word	0x0800b25d
 800b120:	0800b187 	.word	0x0800b187
 800b124:	0800b217 	.word	0x0800b217
 800b128:	0800b0d9 	.word	0x0800b0d9
 800b12c:	0800b0d9 	.word	0x0800b0d9
 800b130:	0800b27f 	.word	0x0800b27f
 800b134:	0800b0d9 	.word	0x0800b0d9
 800b138:	0800b187 	.word	0x0800b187
 800b13c:	0800b0d9 	.word	0x0800b0d9
 800b140:	0800b0d9 	.word	0x0800b0d9
 800b144:	0800b21f 	.word	0x0800b21f
 800b148:	6833      	ldr	r3, [r6, #0]
 800b14a:	1d1a      	adds	r2, r3, #4
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6032      	str	r2, [r6, #0]
 800b150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b158:	2301      	movs	r3, #1
 800b15a:	e09d      	b.n	800b298 <_printf_i+0x1e8>
 800b15c:	6833      	ldr	r3, [r6, #0]
 800b15e:	6820      	ldr	r0, [r4, #0]
 800b160:	1d19      	adds	r1, r3, #4
 800b162:	6031      	str	r1, [r6, #0]
 800b164:	0606      	lsls	r6, r0, #24
 800b166:	d501      	bpl.n	800b16c <_printf_i+0xbc>
 800b168:	681d      	ldr	r5, [r3, #0]
 800b16a:	e003      	b.n	800b174 <_printf_i+0xc4>
 800b16c:	0645      	lsls	r5, r0, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0xb8>
 800b170:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b174:	2d00      	cmp	r5, #0
 800b176:	da03      	bge.n	800b180 <_printf_i+0xd0>
 800b178:	232d      	movs	r3, #45	@ 0x2d
 800b17a:	426d      	negs	r5, r5
 800b17c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b180:	4859      	ldr	r0, [pc, #356]	@ (800b2e8 <_printf_i+0x238>)
 800b182:	230a      	movs	r3, #10
 800b184:	e011      	b.n	800b1aa <_printf_i+0xfa>
 800b186:	6821      	ldr	r1, [r4, #0]
 800b188:	6833      	ldr	r3, [r6, #0]
 800b18a:	0608      	lsls	r0, r1, #24
 800b18c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b190:	d402      	bmi.n	800b198 <_printf_i+0xe8>
 800b192:	0649      	lsls	r1, r1, #25
 800b194:	bf48      	it	mi
 800b196:	b2ad      	uxthmi	r5, r5
 800b198:	2f6f      	cmp	r7, #111	@ 0x6f
 800b19a:	4853      	ldr	r0, [pc, #332]	@ (800b2e8 <_printf_i+0x238>)
 800b19c:	6033      	str	r3, [r6, #0]
 800b19e:	bf14      	ite	ne
 800b1a0:	230a      	movne	r3, #10
 800b1a2:	2308      	moveq	r3, #8
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1aa:	6866      	ldr	r6, [r4, #4]
 800b1ac:	60a6      	str	r6, [r4, #8]
 800b1ae:	2e00      	cmp	r6, #0
 800b1b0:	bfa2      	ittt	ge
 800b1b2:	6821      	ldrge	r1, [r4, #0]
 800b1b4:	f021 0104 	bicge.w	r1, r1, #4
 800b1b8:	6021      	strge	r1, [r4, #0]
 800b1ba:	b90d      	cbnz	r5, 800b1c0 <_printf_i+0x110>
 800b1bc:	2e00      	cmp	r6, #0
 800b1be:	d04b      	beq.n	800b258 <_printf_i+0x1a8>
 800b1c0:	4616      	mov	r6, r2
 800b1c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1c6:	fb03 5711 	mls	r7, r3, r1, r5
 800b1ca:	5dc7      	ldrb	r7, [r0, r7]
 800b1cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1d0:	462f      	mov	r7, r5
 800b1d2:	42bb      	cmp	r3, r7
 800b1d4:	460d      	mov	r5, r1
 800b1d6:	d9f4      	bls.n	800b1c2 <_printf_i+0x112>
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d10b      	bne.n	800b1f4 <_printf_i+0x144>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	07df      	lsls	r7, r3, #31
 800b1e0:	d508      	bpl.n	800b1f4 <_printf_i+0x144>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	6861      	ldr	r1, [r4, #4]
 800b1e6:	4299      	cmp	r1, r3
 800b1e8:	bfde      	ittt	le
 800b1ea:	2330      	movle	r3, #48	@ 0x30
 800b1ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1f4:	1b92      	subs	r2, r2, r6
 800b1f6:	6122      	str	r2, [r4, #16]
 800b1f8:	f8cd a000 	str.w	sl, [sp]
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	aa03      	add	r2, sp, #12
 800b200:	4621      	mov	r1, r4
 800b202:	4640      	mov	r0, r8
 800b204:	f7ff fee6 	bl	800afd4 <_printf_common>
 800b208:	3001      	adds	r0, #1
 800b20a:	d14a      	bne.n	800b2a2 <_printf_i+0x1f2>
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295
 800b210:	b004      	add	sp, #16
 800b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	f043 0320 	orr.w	r3, r3, #32
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	4833      	ldr	r0, [pc, #204]	@ (800b2ec <_printf_i+0x23c>)
 800b220:	2778      	movs	r7, #120	@ 0x78
 800b222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	6831      	ldr	r1, [r6, #0]
 800b22a:	061f      	lsls	r7, r3, #24
 800b22c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b230:	d402      	bmi.n	800b238 <_printf_i+0x188>
 800b232:	065f      	lsls	r7, r3, #25
 800b234:	bf48      	it	mi
 800b236:	b2ad      	uxthmi	r5, r5
 800b238:	6031      	str	r1, [r6, #0]
 800b23a:	07d9      	lsls	r1, r3, #31
 800b23c:	bf44      	itt	mi
 800b23e:	f043 0320 	orrmi.w	r3, r3, #32
 800b242:	6023      	strmi	r3, [r4, #0]
 800b244:	b11d      	cbz	r5, 800b24e <_printf_i+0x19e>
 800b246:	2310      	movs	r3, #16
 800b248:	e7ac      	b.n	800b1a4 <_printf_i+0xf4>
 800b24a:	4827      	ldr	r0, [pc, #156]	@ (800b2e8 <_printf_i+0x238>)
 800b24c:	e7e9      	b.n	800b222 <_printf_i+0x172>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	f023 0320 	bic.w	r3, r3, #32
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	e7f6      	b.n	800b246 <_printf_i+0x196>
 800b258:	4616      	mov	r6, r2
 800b25a:	e7bd      	b.n	800b1d8 <_printf_i+0x128>
 800b25c:	6833      	ldr	r3, [r6, #0]
 800b25e:	6825      	ldr	r5, [r4, #0]
 800b260:	6961      	ldr	r1, [r4, #20]
 800b262:	1d18      	adds	r0, r3, #4
 800b264:	6030      	str	r0, [r6, #0]
 800b266:	062e      	lsls	r6, r5, #24
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	d501      	bpl.n	800b270 <_printf_i+0x1c0>
 800b26c:	6019      	str	r1, [r3, #0]
 800b26e:	e002      	b.n	800b276 <_printf_i+0x1c6>
 800b270:	0668      	lsls	r0, r5, #25
 800b272:	d5fb      	bpl.n	800b26c <_printf_i+0x1bc>
 800b274:	8019      	strh	r1, [r3, #0]
 800b276:	2300      	movs	r3, #0
 800b278:	6123      	str	r3, [r4, #16]
 800b27a:	4616      	mov	r6, r2
 800b27c:	e7bc      	b.n	800b1f8 <_printf_i+0x148>
 800b27e:	6833      	ldr	r3, [r6, #0]
 800b280:	1d1a      	adds	r2, r3, #4
 800b282:	6032      	str	r2, [r6, #0]
 800b284:	681e      	ldr	r6, [r3, #0]
 800b286:	6862      	ldr	r2, [r4, #4]
 800b288:	2100      	movs	r1, #0
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7f5 f830 	bl	80002f0 <memchr>
 800b290:	b108      	cbz	r0, 800b296 <_printf_i+0x1e6>
 800b292:	1b80      	subs	r0, r0, r6
 800b294:	6060      	str	r0, [r4, #4]
 800b296:	6863      	ldr	r3, [r4, #4]
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	2300      	movs	r3, #0
 800b29c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2a0:	e7aa      	b.n	800b1f8 <_printf_i+0x148>
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	47d0      	blx	sl
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d0ad      	beq.n	800b20c <_printf_i+0x15c>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	079b      	lsls	r3, r3, #30
 800b2b4:	d413      	bmi.n	800b2de <_printf_i+0x22e>
 800b2b6:	68e0      	ldr	r0, [r4, #12]
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	4298      	cmp	r0, r3
 800b2bc:	bfb8      	it	lt
 800b2be:	4618      	movlt	r0, r3
 800b2c0:	e7a6      	b.n	800b210 <_printf_i+0x160>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	47d0      	blx	sl
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d09d      	beq.n	800b20c <_printf_i+0x15c>
 800b2d0:	3501      	adds	r5, #1
 800b2d2:	68e3      	ldr	r3, [r4, #12]
 800b2d4:	9903      	ldr	r1, [sp, #12]
 800b2d6:	1a5b      	subs	r3, r3, r1
 800b2d8:	42ab      	cmp	r3, r5
 800b2da:	dcf2      	bgt.n	800b2c2 <_printf_i+0x212>
 800b2dc:	e7eb      	b.n	800b2b6 <_printf_i+0x206>
 800b2de:	2500      	movs	r5, #0
 800b2e0:	f104 0619 	add.w	r6, r4, #25
 800b2e4:	e7f5      	b.n	800b2d2 <_printf_i+0x222>
 800b2e6:	bf00      	nop
 800b2e8:	0800b485 	.word	0x0800b485
 800b2ec:	0800b496 	.word	0x0800b496

0800b2f0 <memmove>:
 800b2f0:	4288      	cmp	r0, r1
 800b2f2:	b510      	push	{r4, lr}
 800b2f4:	eb01 0402 	add.w	r4, r1, r2
 800b2f8:	d902      	bls.n	800b300 <memmove+0x10>
 800b2fa:	4284      	cmp	r4, r0
 800b2fc:	4623      	mov	r3, r4
 800b2fe:	d807      	bhi.n	800b310 <memmove+0x20>
 800b300:	1e43      	subs	r3, r0, #1
 800b302:	42a1      	cmp	r1, r4
 800b304:	d008      	beq.n	800b318 <memmove+0x28>
 800b306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b30e:	e7f8      	b.n	800b302 <memmove+0x12>
 800b310:	4402      	add	r2, r0
 800b312:	4601      	mov	r1, r0
 800b314:	428a      	cmp	r2, r1
 800b316:	d100      	bne.n	800b31a <memmove+0x2a>
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b322:	e7f7      	b.n	800b314 <memmove+0x24>

0800b324 <_sbrk_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d06      	ldr	r5, [pc, #24]	@ (800b340 <_sbrk_r+0x1c>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	602b      	str	r3, [r5, #0]
 800b330:	f7f6 f82e 	bl	8001390 <_sbrk>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d102      	bne.n	800b33e <_sbrk_r+0x1a>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	b103      	cbz	r3, 800b33e <_sbrk_r+0x1a>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	24000948 	.word	0x24000948

0800b344 <memcpy>:
 800b344:	440a      	add	r2, r1
 800b346:	4291      	cmp	r1, r2
 800b348:	f100 33ff 	add.w	r3, r0, #4294967295
 800b34c:	d100      	bne.n	800b350 <memcpy+0xc>
 800b34e:	4770      	bx	lr
 800b350:	b510      	push	{r4, lr}
 800b352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b35a:	4291      	cmp	r1, r2
 800b35c:	d1f9      	bne.n	800b352 <memcpy+0xe>
 800b35e:	bd10      	pop	{r4, pc}

0800b360 <_realloc_r>:
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	4680      	mov	r8, r0
 800b366:	4615      	mov	r5, r2
 800b368:	460c      	mov	r4, r1
 800b36a:	b921      	cbnz	r1, 800b376 <_realloc_r+0x16>
 800b36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	4611      	mov	r1, r2
 800b372:	f7ff bc4b 	b.w	800ac0c <_malloc_r>
 800b376:	b92a      	cbnz	r2, 800b384 <_realloc_r+0x24>
 800b378:	f7ff fbdc 	bl	800ab34 <_free_r>
 800b37c:	2400      	movs	r4, #0
 800b37e:	4620      	mov	r0, r4
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	f000 f81a 	bl	800b3bc <_malloc_usable_size_r>
 800b388:	4285      	cmp	r5, r0
 800b38a:	4606      	mov	r6, r0
 800b38c:	d802      	bhi.n	800b394 <_realloc_r+0x34>
 800b38e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b392:	d8f4      	bhi.n	800b37e <_realloc_r+0x1e>
 800b394:	4629      	mov	r1, r5
 800b396:	4640      	mov	r0, r8
 800b398:	f7ff fc38 	bl	800ac0c <_malloc_r>
 800b39c:	4607      	mov	r7, r0
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0ec      	beq.n	800b37c <_realloc_r+0x1c>
 800b3a2:	42b5      	cmp	r5, r6
 800b3a4:	462a      	mov	r2, r5
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	bf28      	it	cs
 800b3aa:	4632      	movcs	r2, r6
 800b3ac:	f7ff ffca 	bl	800b344 <memcpy>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	f7ff fbbe 	bl	800ab34 <_free_r>
 800b3b8:	463c      	mov	r4, r7
 800b3ba:	e7e0      	b.n	800b37e <_realloc_r+0x1e>

0800b3bc <_malloc_usable_size_r>:
 800b3bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c0:	1f18      	subs	r0, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	bfbc      	itt	lt
 800b3c6:	580b      	ldrlt	r3, [r1, r0]
 800b3c8:	18c0      	addlt	r0, r0, r3
 800b3ca:	4770      	bx	lr

0800b3cc <_init>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	bf00      	nop
 800b3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d2:	bc08      	pop	{r3}
 800b3d4:	469e      	mov	lr, r3
 800b3d6:	4770      	bx	lr

0800b3d8 <_fini>:
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	bf00      	nop
 800b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3de:	bc08      	pop	{r3}
 800b3e0:	469e      	mov	lr, r3
 800b3e2:	4770      	bx	lr
